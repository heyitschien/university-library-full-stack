Transcript for [Build and Deploy a Fullstack App with Admin Dashboard | Next.js, PostgreSQL, Redis, Auth.js](https://www.youtube.com/watch?v=EZajJGOMWas) by [Merlin AI](https://merlin.foyer.work/)

0:00 - most tutorials start strong but then
0:02 - leave you in the shallow end with boring
0:04 - projects nice design same old crud
0:07 - functionalities simple pagination and
0:09 - call it a day might impress your mom but
0:12 - let's face it no one's buying those
0:14 - that's why today you'll build and deploy
0:17 - a production grade University Library
0:19 - management system which isn't just a
0:21 - single app but a set of two
0:24 - interconnected apps tied together into a
0:26 - monor repo these apps work seamlessly to
0:29 - teach you industry standard practices
0:31 - from rate limiting DDOS protection
0:34 - caching optimizations multimedia uploads
0:37 - complex database queries and advanced
0:39 - error handling to automated workflows
0:42 - with custom notifications you'll learn
0:44 - to implement features that real world
0:46 - apps demand everything starts with a
0:48 - public facing app with an open source
0:50 - authentication with personalized
0:52 - onboarding flows and emails homepage
0:55 - with a highlighted book and newly added
0:57 - books with 3D effects a library page
0:59 - with a Advanced filtering and pagination
1:01 - book detail pages that track
1:03 - availability and show summary video and
1:06 - similar books and a profile page to
1:08 - manage your account track borrowed books
1:10 - and download receipts but Enterprise
1:12 - apps also have admin interfaces for
1:15 - managing the data displayed on the
1:16 - public website you'll build it too a
1:19 - whole another app consisting of an
1:21 - analytics dashboard showing statistics
1:23 - New users and books borrow requests and
1:26 - more an all users page and account
1:28 - requests page where admin can approve or
1:30 - revoke access all books page forms
1:34 - allowing you to add a new book and edit
1:36 - it book detail pages and a borrow
1:38 - request page that was a lot and yes with
1:42 - full pagination and search on
1:44 - practically every single page you'll do
1:46 - it all using nextjs typescript and next
1:50 - o for industry standard development
1:52 - postgress with neon the fastest Edge
1:54 - ready database built to scale allowing
1:57 - you to invite your team members and
1:59 - manage database using branches just like
2:01 - you're working with Git image kit for
2:03 - real-time media processing apis and
2:05 - asset management offering free storage
2:08 - Dynamic Transformations and streaming
2:09 - capabilities perfect for optimizing and
2:12 - transforming images and videos for any
2:14 - device making it the only solution
2:16 - you'll need to deliver manage and
2:18 - collaborate on your media assets at
2:19 - scale up stash reddis for efficient
2:22 - caching rate limiting and the ability to
2:24 - build detailed workflows with custom
2:26 - triggers drizzle the hottest orm right
2:29 - now making database interactions faster
2:31 - and simpler than ever and more like
2:33 - tailin CSS resend shaten to create a
2:37 - polished modern app but talk is cheap so
2:40 - let me show you a full demo of the app
2:42 - you'll build today when you visit the
2:43 - website for the first time you'll see
2:45 - the signin screen if you're creating a
2:47 - new account you can go to the signup
2:49 - page where you'll have to fill in a lot
2:51 - of information all of it fully validated
2:53 - we also have an image upload with
2:55 - completion percentage where you'll have
2:57 - to insert your University card that was
2:59 - quick once you've created an account
3:01 - you'll see this nice little toast and
3:03 - you're in but behind the scenes
3:06 - something important has just happened
3:08 - the moment you've created an account our
3:10 - server triggered an onboarding workflow
3:12 - sending you a welcome email but that's
3:15 - not the best part another part of the
3:16 - onboarding workflow is inactivity checks
3:19 - so if you don't visit the website for
3:21 - the next 3 days you'll get another
3:23 - automated email prompting you to check
3:25 - it out and if you're already using it
3:27 - you'll receive a congratulations email
3:29 - similar to what dual lingo does
3:31 - everything is automated for each user
3:33 - now coming back to the app you can now
3:35 - see a cool modern homepage showcasing a
3:37 - highlighted book with this 3d effect
3:40 - there are also some other latest books
3:41 - here there's this library page where you
3:43 - can see a full list of books available
3:45 - in the library with pation boort and you
3:47 - can easily search for any book or filter
3:49 - it through your liking and if you click
3:51 - on any of these books you'll go to its
3:52 - Details page where you can see complete
3:54 - information from Total and available
3:56 - copies description trailers summaries
3:58 - and more as well as a bunch of other
4:00 - similar books you might want to check
4:02 - out but if you click on borrow book
4:04 - you'll see a destructive toast saying
4:06 - you can't borrow a book until your
4:07 - account gets approved Yep this is what
4:09 - we're doing we're not letting just
4:10 - anyone visit the website and try to
4:12 - borrow a book instead we'll allow admins
4:15 - to approve their account similar to what
4:17 - universities or other institutions do to
4:19 - verify your admission and to mimic that
4:21 - real situation we have an entire admin
4:24 - dashboard for managing everything
4:25 - regarding the content and the users you
4:28 - can visit the admin dashboard right
4:30 - within the website by going to/ admin
4:32 - now of course if you're a normal user
4:34 - you'll automatically be redirected back
4:36 - to the homepage otherwise you'll access
4:38 - this whole new website that has a
4:39 - sidebar on the left and the header with
4:41 - the main page showing complete analytics
4:43 - like the total number of bored books
4:45 - users and more we're also comparing
4:47 - these analytics with the previous week
4:49 - so you know if there has been an
4:50 - increase or decrease in statistics and
4:52 - you can also see a list of recently
4:54 - borrowed books and newly joined users
4:56 - now a super useful thing here is that
4:58 - all of this information loads
5:00 - independently without blocking any other
5:02 - part reload and you'll see different
5:04 - loaders and some information will soon
5:06 - show up followed by other pieces this is
5:09 - called performance optimization and even
5:11 - if an error occurs only that specific
5:14 - part is affected while the rest of the
5:15 - app stays functional and non-blocking
5:18 - after that we also have an all users
5:20 - page where you can see a complete list
5:21 - of users who joined and search or
5:23 - paginate them each user has its role and
5:26 - through the admin dashboard you'll also
5:28 - have the ability to make anyone an admin
5:30 - there's also an all books page where the
5:32 - complete list of books is shown with
5:34 - search and pation so let me create a new
5:36 - book by providing lots of details
5:38 - including the title genre rating cover
5:41 - the color using the Color Picker and
5:43 - upload a video trailer let's first go to
5:45 - account requests where you can see a
5:47 - list of all user accounts that need to
5:48 - be approved let me see where mine is oh
5:52 - there we go now I'll click on it to
5:53 - approve it and confirm upon confirmation
5:56 - I'll also receive an email saying that
5:58 - my account has been approved now going
6:00 - back to our main app if I click borrow
6:02 - book it's processing and there we go now
6:05 - I can actually borrow it which redirects
6:07 - me to my profile page see when I borrow
6:09 - this book something happened in the
6:11 - background if I go and check my email
6:14 - I'll see an email notification about the
6:16 - book being borrowed and showing me when
6:18 - I'm supposed to return it and then
6:20 - before the due date I'll also receive
6:22 - two different email reminders letting me
6:24 - know that the due date is coming and if
6:25 - I don't return it in time I'll also get
6:27 - penalty emails later on this workflow is
6:30 - completely automated similar to what
6:32 - Netflix or other companies are doing
6:34 - giving you payment reminders and
6:35 - notifications pretty amazing and not
6:37 - something you can learn every day right
6:39 - back on the website you can see a kind
6:41 - of an identity card with all our
6:43 - information like full name University ID
6:45 - or university card and on the right side
6:48 - there is a list of books I've borrowed
6:49 - with the dates specifying when I borrow
6:52 - them and when I'm supposed to return
6:53 - them there's also a little receipt icon
6:56 - which when I click it will download the
6:57 - generated book receipt and save it to my
6:59 - my computer it's a NIC looking
7:01 - customized receipt which I can then show
7:02 - to my university to get a book if I now
7:04 - go to the admin side specifically the
7:06 - borrow records page I can see my record
7:09 - alongside some other records listed here
7:11 - and admins can also see the receipts and
7:13 - confirm them and one thing here is that
7:14 - we can also search records by user and
7:17 - not just by the book pretty cool stuff
7:19 - and admins can also change the borrow
7:20 - book status so if somebody comes in and
7:23 - Returns the book in person we can change
7:24 - it so does it feel like a lot well if it
7:27 - does no worries because we'll break it
7:29 - step by step and if you're a beginner
7:31 - still figuring out what components are
7:33 - then this course is not for you first
7:35 - check out my beginner crash courses from
7:37 - tailin CSS and react to next GS and then
7:40 - come back I'm so excited to Dive Right
7:42 - In but first let me tell you that this
7:45 - project completely took over my life
7:47 - what started as a simple tutorial turned
7:49 - into something huge I rebuilt it over
7:52 - and over again until it became a project
7:55 - that even senior developers would find
7:57 - impressive and unlike most tutorials I
7:59 - refused to rush through important
8:01 - Concepts because you deserve better so
8:04 - here's the deal most of these courses on
8:06 - YouTube completely free I mean just see
8:08 - how long this video is free complete
8:10 - source code free figma designs
8:13 - everything but the tutorial got so
8:15 - massive I had to split it into two parts
8:17 - part one right here fully free part two
8:21 - on my soon to launch JS Mastery Pro
8:23 - platform with progress tracking real
8:25 - world challenges Advanced patterns get
8:28 - commits for each lesson personalized
8:30 - learning paths and more other platforms
8:33 - would easily slap a $500 price tag on
8:36 - that but not me first 100 developers
8:39 - that click the link down in the
8:40 - description and join the wait list will
8:42 - get lifetime access for free and
8:44 - everybody else that joins will get a
8:46 - significant discount once it launches
8:49 - it's my way of saying thank you so click
8:51 - the link in the description and join the
8:53 - pre-launch spots can fill up pretty
8:55 - quickly so don't wait too long but even
8:57 - if you don't end up getting it no
8:59 - worries this video alone covers rain
9:02 - limiting DDOS protection postgress
9:04 - databases and more all for free so with
9:07 - that in mind alongside the weightless
9:09 - link check out all of the free links as
9:11 - well to get the figma design the source
9:13 - code and so much more with that said
9:15 - let's Dive Right In and let me teach you
9:17 - how to build a set of these two apps a
9:20 - public facing one and a realworld admin
9:22 - dashboard to manage it super
9:26 - excited to get started developing this h
9:29 - huge application that covers features
9:32 - and Technologies I've never before
9:34 - covered on JavaScript Mastery we'll
9:36 - first start by understanding the entire
9:39 - application and its structure how
9:41 - technically you will not only develop
9:43 - one application but two applications a
9:46 - user platform and an admin panel by
9:49 - using something known as a mono repo
9:51 - architecture yep we'll cover all of that
9:53 - in detail but first let's talk about the
9:56 - Technologies you'll use to build it of
9:58 - course we'll use the react framework for
10:00 - the web next GS used by some of the
10:03 - world's largest companies enabling you
10:05 - to create highquality web applications
10:07 - with the power of react components so
10:10 - let's copy the installation command open
10:12 - up a new project in this case I'm using
10:14 - webstorm which is a powerful IDE which
10:17 - as of recently became completely free
10:20 - but of course you're free to proceed
10:21 - with any other code editor or IDE to
10:23 - follow along with this course open up
10:25 - your integrated terminal and paste the
10:27 - installation command and PX create next
10:30 - app at latest It'll ask you whether you
10:33 - want to install the package that will
10:34 - allow us to create our app so press y
10:37 - for yes it's going to ask you what is
10:39 - your project name in case you've already
10:41 - created a folder within which you want
10:43 - to create this app which is what I did
10:45 - and called it University library then
10:47 - you can just press do slash to create it
10:49 - in the current repository it's asking us
10:51 - whether we would like to use typescript
10:53 - that's going to be a strong yes I'll
10:55 - later explain the many benefits you're
10:57 - getting by using typescript and and
10:59 - don't worry if you haven't used tab
11:00 - script before you can proceed watching
11:02 - this video whenever I'm covering some
11:04 - tab script stuff I'll make sure to take
11:06 - my time and explain what's happening
11:09 - next it's asking us whether we want to
11:11 - use eslint that's another big yes we
11:14 - want our codebase to be scalable well
11:16 - structured and maintained we want to use
11:19 - tailin CSS as it's the preferred way of
11:22 - styling applications nowadays and we
11:24 - don't need a source directory it's just
11:26 - a matter of having an additional folder
11:28 - which we don't need of course we will be
11:30 - using the app router so say yes turbo
11:33 - pack which is going to speed up our
11:34 - development time we can say yes for that
11:36 - as well and we don't necessarily need to
11:39 - customize the import alas so simply say
11:41 - no and as you can see next GS will now
11:44 - automatically install all of the dev
11:46 - dependencies needed for us to run our
11:48 - project very easily while it is doing
11:51 - that let me actually walk you through a
11:53 - couple of other technologies that we'll
11:55 - be using to develop this great
11:56 - application production ready scalable
11:58 - application are not built from scratch
12:01 - trust me you don't want to reinvent the
12:03 - wheel which is why in this course I
12:05 - prepared some technologies which are
12:07 - industry standard open source and
12:09 - production ready for you to learn and
12:12 - build this application with as well as
12:14 - all of your upcoming applications first
12:16 - things first here is Tailwind CSS a very
12:19 - obvious choice for The Styling flavor of
12:22 - our applications it allows you to have
12:24 - full flexibility of how your
12:26 - applications are going to look like it's
12:28 - just like you're writing Reg CSS you
12:30 - have all the properties at your disposal
12:32 - but you can use them in a quicker way by
12:34 - simply using a set of predefined utility
12:36 - classes and to make your application
12:38 - even more standardized we'll use shat
12:41 - nuui a library that allows you to copy
12:44 - some of the components but then use the
12:45 - full power of Tailwind CSS to style them
12:48 - to your liking for example you can take
12:51 - an alert or a button component and then
12:53 - make it completely your own of course
12:56 - buttons are simple but using shaten for
12:58 - something like forms where it comes
13:00 - pre-built with react hook form and Zod
13:03 - which are the industry standard
13:04 - Technologies for managing form nowadays
13:07 - that's definitely going to come in handy
13:08 - I'm also happy to say that this is the
13:10 - first project on JavaScript Mastery
13:12 - that'll use a postgress database yep
13:15 - we're transitioning over to SQL and
13:18 - we'll use the world's most advanced
13:20 - open-source relational database but I
13:22 - won't make you deal with clunky SQL
13:25 - interfaces and outdated admin portals
13:27 - instead we'll use neon allowing you to
13:30 - ship faster with postgress it allows you
13:33 - to use open- Source postgress databases
13:35 - with many features that make it such a
13:37 - breeze to use you get instant
13:39 - provisioning no waiting no config and it
13:42 - configures directly with your stack you
13:44 - can hook it up directly with NEX GS or
13:47 - to make it even more scalable and
13:49 - production ready you can use something
13:51 - known as an orm such as drizzle so yep
13:54 - not only will we use a postgress
13:56 - database will actually power it up but
13:59 - using an or an object relational mapping
14:02 - tool which will allow you to make your
14:03 - database architecture that much more
14:05 - scalable and drizzle is definitely the
14:08 - way to go nowadays we'll also have to
14:10 - store a lot of assets like images and
14:12 - videos within our app and for that I've
14:14 - decided to use image kit it is a free
14:16 - tool allowing you to quickly optimize
14:18 - and transform your videos and images and
14:21 - just have a central Hub where you can
14:23 - efficiently manage all of the assets for
14:25 - your project more on that soon and we'll
14:28 - also use stach to make this application
14:30 - truly production ready first we'll use
14:33 - appstash rdus a service that offers low
14:36 - latency data storage and retrieval
14:38 - perfect for caching session management
14:40 - and real-time applications we'll use it
14:43 - to teach you how you can quickly fetch
14:44 - books within our application but we
14:46 - won't just stop there we'll also use up
14:49 - Stash's workflows allowing you to manage
14:52 - and automate multi-step tasks great for
14:56 - things like onboarding or handling data
14:58 - processing workflow flows you can use it
15:00 - to automatically send emails within your
15:01 - application for example when a user's
15:04 - account is verified by an admin or maybe
15:07 - check if the user is not active for the
15:09 - last 3 days or maybe check the user
15:11 - activity and if they haven't been active
15:13 - for the past 3 days send them an email
15:16 - or a notification similar to what dual
15:19 - lingo and most applications out there do
15:21 - in this case we'll also use it to send
15:23 - book borrowing deadlines limits and
15:25 - warnings so now that you learned a bit
15:28 - more about the text attack we'll use
15:30 - let's head back to our editor and let's
15:32 - Dive Right into
15:35 - code now that our application has been
15:37 - set up before we go ahead and run it
15:39 - let's also set up shaten because we'll
15:41 - very quickly need it to create some of
15:43 - the components for the app and typically
15:46 - I would just give you the commands
15:47 - needed to install it but in this course
15:50 - I really wanted to guide you all the way
15:52 - through of how you would approach
15:54 - building something like this on your own
15:56 - so you don't just learn how to replicate
15:58 - this specific application but you'll
16:00 - learn how to use the Technologies to
16:02 - build all of the apps in the future so
16:05 - head over to shaty and UI go to docs and
16:08 - installation for nextjs right there it's
16:12 - going to say if you're using next5 see
16:14 - next5 plus react 19 guide if you read
16:17 - through this page you'll notice that
16:19 - everything is still working as it should
16:21 - it's just that when you're installing
16:22 - some packages you will need to run an
16:24 - additional flag to install it because
16:26 - otherwise you'll be getting some
16:28 - warnings that's that's more or less it
16:30 - so I'll head back to the previous page
16:32 - and just follow the installation setup
16:33 - with mpm I'll copy the First Command and
16:37 - paste it MPX shaten add latest in it
16:41 - press y to proceed and it's going to ask
16:44 - you for the style you would like to use
16:46 - in this case we'll use the New York
16:48 - style with the color of
16:51 - slate for the rest of the steps just
16:53 - press enter we'll use the CSS variables
16:55 - and now this is that warning that you
16:57 - get by using react 19 and next gs15 it
17:00 - says that some packages May Fail due to
17:02 - a peer dependency issue so just say use
17:06 - Force I tried it a couple of times and
17:08 - trust me it won't pose any problems with
17:11 - that said we have just completed the
17:12 - second step of chassi and install as
17:14 - well and we finally can add some
17:17 - components into it such as a button
17:19 - we'll surely need to use a button right
17:21 - so whenever you're installing it you can
17:23 - just paste it right here MPX shaten add
17:26 - latest add button and is going to ask
17:29 - you whether you want to use Force once
17:31 - again this is just an additional step
17:32 - you have to go through and press enter
17:35 - and there we go one component has been
17:37 - installed now let's go ahead and
17:39 - actually check it out if you head over
17:41 - to components UI you'll see that we have
17:44 - one additional component created for us
17:46 - by shaten now why I love shaten so much
17:49 - is that it actually asks you which
17:51 - components you want to install and it
17:53 - automatically gives you the code only
17:56 - for the components you want to use in
17:58 - this case the button
17:59 - and even though it might seem a bit
18:00 - complicated you never have to dive into
18:03 - this code and modify it you're going to
18:05 - Simply use this code as a button that
18:07 - you created within your code base so if
18:10 - I head over to page. DSX which is our
18:13 - current starting application and if I
18:16 - delete everything within the homepage
18:18 - rather I just create an empty react
18:20 - fragment and within it I try to render
18:23 - this button coming from components UI
18:26 - button we can properly enclose it and I
18:28 - think we're ready to test it out I'll
18:30 - open up the terminal and press mpm run
18:33 - Dev to run our application on Local Host
18:35 - 3000 once you open it up it should look
18:38 - something like this if you see this nice
18:39 - looking button that means that chaten
18:41 - has been installed now before we proceed
18:43 - with the rest of the theming I want to
18:45 - make sure that not only our app but our
18:47 - codebase remains clean as well and for
18:50 - that we'll use prettier and Es lent the
18:53 - setup for every editor will look a bit
18:55 - differently but you'll have to install
18:58 - the Plugin or an extension called eslint
19:01 - as well as prettier and there's also an
19:04 - additional one called eslint prier which
19:06 - connects them together once you do that
19:09 - at least here on webstorm I can head
19:11 - over to preferences and I can turn on
19:14 - the manual preder configuration and try
19:16 - to find the preder package if it's not
19:19 - there yet we might need to install it so
19:21 - head over to your terminal and open up a
19:23 - new one because this one is currently
19:25 - running our application but on the
19:26 - second one we can install the additional
19:28 - depend dependencies and I'll say mpmi D-
19:32 - save-dev as we want to install it as a
19:34 - Dev dependency and I'll say
19:37 - prier es L should have been
19:39 - automatically installed by
19:41 - nextjs so now I can head over to prier
19:45 - and head over to manual and just select
19:47 - it right here from node modules and run
19:50 - reformat on Save I want to do a similar
19:54 - thing for eslint where I can choose the
19:56 - eslint package from node modules and
19:58 - then find a configuration file and we
20:00 - want to run es Lin fix on Save now if
20:03 - you make a change your code and press
20:05 - command s it'll actually try to reformat
20:07 - the code I know that the setup for other
20:09 - code editors might be a bit different so
20:11 - if you want to give webstorm a try which
20:13 - I have been really loving lately I'll
20:15 - put the link down in the description so
20:16 - you can get it completely for free and
20:18 - then follow along with my setup in any
20:20 - case you should be able to head over to
20:22 - es L.C config.js and we can extend some
20:25 - additional configurations such as next
20:28 - core web f titles next typescript as
20:30 - well as
20:31 - standard we can also add
20:35 - plugin Tailwind CSS SL recommended as
20:40 - well as prier so all of these packages
20:42 - will work together to make our codebase
20:44 - clean oh and I think we can go over to
20:47 - command shift p prettier and then also
20:50 - turn on the runon save action which will
20:53 - actually apply all of the es length and
20:55 - prer changes on Save You Can See it'll
20:58 - add some space spaces in between these
20:59 - brackets as well as apply a semicolon at
21:02 - the end among the other packages that
21:03 - I'm using which you can also install on
21:05 - any code editor there is the rainbow
21:09 - brackets which will make sure that you
21:11 - know where's the start or end of your
21:13 - function or code block I'm also using
21:16 - react Snippets so just make sure to
21:19 - install I think in this case I'm using
21:21 - modern react Snippets either way should
21:24 - be fine I know many of you ask me for
21:25 - the theme in this case I'm using a
21:28 - material theme material deep
21:31 - ocean and that's it that's my editor
21:34 - hopefully you were able to set up Prett
21:36 - your and eslint as I did by further
21:38 - configuring this eslint config file but
21:41 - if not don't worry at all you can just
21:43 - proceed normally I know that sometimes
21:45 - setting up these linting tools can be a
21:48 - pain in the ass and it just messes with
21:50 - everything so even if you didn't manage
21:52 - to set them up properly don't worry at
21:54 - all we can proceed and while we're here
21:56 - I'll also turn this home into an S6
21:59 - Arrow function by saying const home is
22:01 - equal to and then finally at the end we
22:04 - can export default home and in case you
22:08 - have nothing right here at the top of
22:10 - the function you rather have just a
22:12 - single return we can also just turn this
22:14 - into an immediate return by removing the
22:16 - curly brace so you'll see that
22:19 - throughout this course I'll try to keep
22:21 - the code base as clean as possible so
22:24 - you can follow along see everything
22:26 - clearly and learn as many best practices
22:28 - is as possible now let's set up the
22:30 - theme of our application in this case I
22:33 - decided to go with a very unique layout
22:35 - something that you don't see often
22:37 - nowadays so if you haven't yet
22:39 - downloaded this figma page definitely do
22:41 - that the link will be down in the
22:43 - description that'll make it much easier
22:45 - to follow along in any case you can see
22:48 - that some things here are shared such as
22:50 - this background image which we can
22:51 - export as well as some of the colors of
22:54 - the background or this primary yellowish
22:56 - color that we'll use so to make her
22:59 - styling in the future a bit easier we
23:01 - can add all those to our Tailwind config
23:04 - so head over to Tailwind doc config.sys
23:28 - so head over below this lesson to a
23:30 - GitHub repository containing the entire
23:32 - source code of this project go to its
23:34 - read me and head over to Snippets to
23:37 - copy there you can find this tailin
23:39 - config file in there we'll do some
23:40 - simple things like set up our primary
23:43 - default color as well as the primary
23:44 - color for the admin interface because
23:47 - this is a monor repo after all so we'll
23:49 - have to keep track of different themes
23:51 - and if you think about it I purposefully
23:53 - made the admin interface a bit different
23:56 - looking because for this application
23:58 - it'll most likely be opened on a desktop
24:01 - computer somewhere in the library and it
24:03 - has to have a very simple to follow
24:05 - design so clerks or non-technical people
24:08 - using it can very easily create new
24:10 - books or give books to rent and this is
24:12 - not just when it comes to book managing
24:15 - whenever you have an admin interface
24:17 - that has to be put at some kind of a
24:18 - desktop computer for employees to use
24:21 - you always want to use a light simple to
24:23 - use interface now even though I provided
24:25 - these colors to you I want to teach you
24:27 - how you can extract them you can create
24:28 - tilin configs manually let's go with
24:31 - this default primary color for example
24:33 - E7 C9 A5 how would you go about finding
24:37 - it so if you head over back to our figma
24:40 - file and go to O obviously this
24:43 - yellowish color is our primary color and
24:46 - right here under colors you can see it
24:47 - Styles you can copy it and then you can
24:50 - paste it right here in the code and I
24:52 - did the same thing for all of the other
24:53 - colors I didn't want you to manually go
24:55 - ahead and copy every single one so I
24:57 - decided to provide them here for you no
24:59 - logic here just some Styles the second
25:01 - thing you'll need that'll make our
25:03 - styling a bit easier is going to be the
25:05 - global. CSS file so head over to global.
25:09 - CSS select everything and override it
25:12 - with the global. CSS file that you can
25:14 - find in the Snippets to copy for this
25:16 - video there's a lot of stuff that I'm
25:17 - providing right now at the start which
25:19 - is just to get us going but trust me as
25:21 - we dive deeper less and less almost
25:24 - nothing will be provided as we'll code
25:27 - all of the complicated logic IC together
25:29 - from scratch now as you can see in the
25:31 - tail config we're using two custom font
25:34 - families so we have to go ahead and
25:37 - Implement them if you head over to app
25:40 - in there we'll be able to put local
25:42 - versions of our fonts this is a new
25:44 - nextjs feature allowing you to locally
25:46 - import the fonts without having to rely
25:48 - on thirdparty services so right below
25:51 - the Snippets to copy you can find a
25:53 - zipped fonts folder unzip it and then
25:55 - simply paste it right here within the
25:57 - app it'll look something like this fonts
26:00 - with a couple of different variants once
26:02 - we have it you can head over to layout.
26:05 - DSX and we can put those fonts to use
26:08 - similarly to how a Guist font was used
26:11 - before instead we'll import local fonts
26:13 - this time so instead of Guist Sans we'll
26:16 - be using the IBM Plex
26:18 - Sans and we'll do it as a local font
26:22 - coming from import local
26:26 - font from next
26:28 - SL font SL looc to this local font you
26:32 - have to provide a source pointing to
26:34 - that font so a source will be an array
26:38 - and here we can have a couple of
26:39 - different objects where first you
26:41 - specify a path to that font so that'll
26:45 - be/ fonts SL
26:48 - ibmx Sans make sure to capitalize the
26:52 - right things and then Dash
26:55 - regular.ttf we can also give it a font
26:57 - weight of
27:00 - 400 and finally a style of
27:05 - normal now we can duplicate this three
27:07 - more
27:09 - times for the second one we'll get the
27:11 - Sans medium and that'll be a weight of
27:15 - 500 with a font style of normal after
27:18 - that we can have a semi bold that's
27:21 - going to be 600 for weight and then
27:24 - finally we can have a bolt which is
27:26 - going to be 700 you can see how nicely
27:29 - prer structured this it figured out that
27:31 - this line is extending over the normal
27:33 - character line limit so it put it into a
27:36 - new line in this case I actually don't
27:38 - think we need to say do slash for each
27:40 - font so I can basically remove that dot
27:43 - at the start and then I can manually set
27:46 - this to be a single line as well this is
27:49 - a bit easier to read and understand with
27:52 - that in mind we can also set up our
27:53 - second font by saying const
27:56 - beas new
27:59 - that's going to look something like this
28:00 - make sure to have the spelling done
28:02 - right we're going to take in the local
28:05 - font and we're going to Simply point to
28:08 - a single
28:10 - object that'll have a source equal to an
28:13 - array where we have a single object of
28:16 - path pointing to for SL
28:19 - font SLB new- regular.ttf weight of 400
28:25 - and style of normal we can also add an
28:28 - additional variable which we can use to
28:31 - apply this font later on by calling it
28:34 - be- new perfect so now we have
28:38 - successfully set up the fonts and we can
28:40 - also set up the metadata of our
28:42 - application here by changing the title
28:44 - to bookwise as well as changing the
28:46 - description to something like bookwise
28:49 - is a book review website or in this case
28:52 - it's actually a book borrowing
28:55 - University Library management
28:58 - solution there we go that's more like it
29:02 - now we have the metadata as well and we
29:04 - ready to use all of these within our
29:06 - application now sometimes nextjs starts
29:09 - with this export default function root
29:10 - layout we can simplify this a bit this
29:13 - readon is not
29:15 - necessary and we can just get the react
29:17 - node automatically from react by
29:19 - importing it so just import react node
29:22 - from react no need to get the react
29:24 - itself if you do that it'll actually put
29:26 - it to one line and and we can change it
29:28 - to an arrow function by saying const
29:30 - root layout is equal to and then a
29:33 - callback function to the return
29:35 - statement like this this is a bit easier
29:37 - to understand in my opinion and we can
29:39 - also run the export default root
29:43 - layout finally we're no longer using the
29:45 - Guist Sans and the Guist mono rather
29:48 - we're using the IBM Plex Sans do class
29:52 - name so we'll actually be applying this
29:53 - font using class names and we're using
29:56 - the beas new font which will to apply
29:58 - through a variable great so this is our
30:01 - root layout now that our setup is done
30:03 - we have successfully implemented the
30:05 - Tailwind config as well as done some es
30:07 - length and preder configuration I showed
30:09 - you which packages I use and more we
30:12 - have also applied the new global. CSS as
30:14 - well as imported all the fonts within
30:16 - our layout that means that we have laid
30:18 - some foundations for the start of the
30:20 - development of our project so in the
30:23 - next lesson let's start working on the
30:25 - homepage
30:28 - I think now is the perfect time to pull
30:29 - my browser side by side by my editor so
30:32 - you can see the changes we're making
30:33 - live that'll look something like this
30:35 - you can see our button is automatically
30:37 - using this primary theme and right now
30:39 - we are on Local Host 3000 which is our
30:41 - homepage but some pages in The Design
30:44 - will use different layouts for example
30:47 - the odd page won't have the navigation
30:49 - bar whereas all the other pages will so
30:52 - let's go ahead and implement the layout
30:54 - that will allow us to reuse the
30:56 - navigation bar across all of our root
30:58 - routes I'll do that very quickly by
31:01 - creating a new route group within the
31:03 - app folder by creating a new folder
31:07 - called
31:09 - root you have to wrap it in parentheses
31:11 - to make sure that it becomes a route
31:13 - group now what route group allows you to
31:16 - do is to create a new layout
31:18 - specifically for the pages within that
31:20 - route group so I'll create a new layout.
31:24 - TSX and I'll run rafc right within it to
31:27 - quickly spin up a new layout component
31:30 - another thing I'll do is move this page
31:32 - right here from the root route to the
31:34 - root route group because this will be
31:36 - our primary homepage nothing will be
31:38 - changed after we make sure that this
31:40 - layout actually Returns the children
31:42 - route and we can do that by saying con
31:45 - layout accepts the children which are of
31:48 - a type react node so we're simply
31:51 - telling typescript hey we want to get
31:53 - some children through props here and
31:55 - they're of type react node once you do
31:57 - that we can return a main tag we use an
32:01 - HTML 5 semantic main tag when you want
32:04 - to make sure that this is the main
32:05 - container so we can actually also give
32:07 - it a class name equal to root- container
32:12 - within it we'll also have another div
32:14 - which we'll use to set up our routes and
32:16 - the max width of our content which will
32:19 - display in within the main container so
32:21 - let's give it a class name of margin X
32:23 - of Auto as well as a Max W of 7 XL and
32:28 - within it we can render a header which
32:30 - for now will just be a piece of text as
32:32 - well as a div with a class name equal
32:37 - to margin top of 20 to divide it from
32:40 - the header as well as a padding bottom
32:42 - of 20 and within it we can render the
32:45 - children meaning the root button you can
32:49 - see how now the max W that we applied is
32:52 - nicely centering the elements and even
32:53 - if we increase it they will always
32:55 - remain centered now what you can notice
32:57 - is that if you hover over a specific
32:59 - element hopefully it does the same thing
33:01 - for you but it's actually pointing me to
33:04 - the style within a global. CSS file
33:07 - where you can see which styles are
33:09 - getting applied for example this utility
33:11 - class called root container is applying
33:14 - a Max H screen as well as some Flex
33:16 - properties with a background cover and
33:19 - for Native tailin CSS properties like
33:21 - margin top of 20 if you hover over it
33:24 - you can see what styles is it applying
33:27 - if you can not see that maybe you don't
33:29 - have a Tailwind CSS plugin installed or
33:31 - an extension so go ahead and install it
33:34 - and it should hopefully work for you but
33:36 - if it doesn't no worries because most of
33:38 - these names are pretty self-explanatory
33:40 - anyway with that in mind we can now
33:42 - create our first component of the day by
33:44 - creating it right within the components
33:46 - folder and I'll create a new file called
33:50 - header dot
33:52 - DSX I'll run rafc within
33:56 - it and we can now nicely import it
33:59 - within the layout by simply saying
34:01 - header coming from components header
34:04 - you'll notice the difference within
34:06 - Shaden components and our own components
34:08 - because Shaden components will be within
34:10 - the UI folder whereas our own components
34:13 - will be right here within the components
34:15 - folder and with that in mind you can see
34:17 - that now this layout is doing its thing
34:20 - and we are ready to implement the header
34:22 - which will show on top of the homepage
34:24 - and then implement the homepage itself
34:26 - so let's start with the header first
34:29 - I'll wrap it in an HTML 5 semantic
34:31 - header tag that'll have a class name
34:35 - equal to margin y of 10 Flex justify
34:39 - Dash between as well as a gap of five
34:43 - within it I'll show a link component
34:45 - coming from next
34:47 - link and I'll give it an HRA pointing to
34:50 - forward slash meaning just the
34:53 - homepage within it for now I'll simply
34:56 - say bookwise right below this link I'll
34:59 - show a UL an unordered list that'll have
35:02 - a class name equal to flex Flex - row
35:07 - items D Center and a gap of eight and
35:10 - within it we can render An Li which is a
35:13 - list item that'll render a link and this
35:16 - link will have an href pointing to for
35:19 - SL Library where we'll be able to
35:21 - explore all the books and it'll say
35:23 - library now we can also give it a class
35:25 - name equal to
35:28 - text-base cursor Das pointer to let it
35:31 - know that it's clickable and capitalize
35:35 - and after that we want to check on which
35:37 - route we're on so we know whether to
35:39 - make it currently selected or not this
35:41 - is what I'm talking about if the search
35:43 - is selected we have to change it to a
35:45 - primary color so we know we're on that
35:47 - page right now to be able to do that we
35:49 - have to know on which path we're on and
35:52 - it's so easy to do that in xjs by saying
35:54 - const path name is equal to use path
35:58 - name coming from next navigation now as
36:00 - soon as you use a hook within your
36:03 - component you have to turn it into a
36:05 - client render component by adding a used
36:07 - client directive at the top now we can
36:09 - change Styles dynamically by copying all
36:12 - the Styles we have here right now and
36:15 - using a CN class name property coming
36:18 - from lib utils which was created for us
36:21 - by I believe shaten maybe it's tailwind
36:24 - and in there as the first parameter you
36:25 - can pass all of the Styles which you
36:27 - always want to pass but then you can
36:29 - also pass a condition something like if
36:32 - path name is triple equal to library or
36:35 - forward SL library in that case you can
36:38 - also apply a text light of 200 else you
36:43 - can apply a text light of 100 so now you
36:46 - can see Library selected and it's
36:49 - glowing yellow it looks a bit weird
36:51 - because we have a white background but
36:53 - don't worry we'll deal with that soon
36:55 - with that in mind here for the bookwise
36:57 - I actually want to use a logo so what we
36:59 - need to do is manually import it from
37:02 - figma you can do that by double clicking
37:04 - on it and exporting it there's going to
37:06 - be many different small icons we'll use
37:08 - throughout this course such as this
37:10 - magnifying glass icon this book borrow
37:13 - request and more so to make your life of
37:15 - grabbing all of these individually a bit
37:17 - easier I went ahead and did that for you
37:19 - so you can find a zipped folder
37:21 - containing all of the assets right where
37:23 - you found the other code Parts delete
37:26 - the current public folder and then
37:28 - simply unzip and paste the new one it
37:32 - should look something like this having
37:34 - our favicon as well as some icons and
37:37 - images if you now go back and reload it
37:40 - should look good you can see that we
37:42 - have one error and this error is a
37:44 - hydration error now this hydration error
37:46 - in nextjs is an error that is hard to
37:49 - debug because in most cases it's not
37:51 - even your fault that it happens
37:54 - basically what nextjs is saying is that
37:56 - your browser changed the version of the
37:58 - HTML before react was loaded which then
38:01 - means there's an HTML mismatch on the
38:03 - client side and this can happen because
38:06 - of the some things you're doing in the
38:07 - code but more often unfortunately it
38:10 - happens if the client has a browser
38:13 - extension which messes with the HTML
38:15 - before react was loaded so you'll have
38:17 - to manually disable a couple of your
38:19 - extensions until you figure out which
38:21 - one it is for me it was
38:23 - grammarly so I just disabled it and now
38:26 - the error is gone with that said now
38:29 - that we have this dark background we can
38:31 - no longer see this bookwise text so
38:33 - let's actually render an image we can do
38:36 - that by using a nextjs image tag coming
38:40 - from next
38:41 - image pass it a source of for SL ions SL
38:48 - logo.svg with an ALT tag of
38:52 - logo as well as a width of 40 and a
38:56 - height of 40 as well so that it look
38:58 - something like this perfect and for now
39:00 - that means that our header is good so we
39:03 - are ready to start implementing the
39:04 - homepage our homepage will actually be
39:06 - super simple it'll consist of two major
39:09 - components one of which is the hero
39:12 - section or the book overview so at all
39:15 - times at the top we'll be displaying an
39:17 - overview of a new book like this origin
39:21 - book by Dan Brown so on the left side
39:23 - we'll display some text and information
39:25 - about the book as well as a button to
39:27 - board borrow it and on the right side
39:29 - will'll display its image and then below
39:31 - we'll have a list of popular or latest
39:34 - books so that means that it will
39:35 - actually consist of two separate
39:37 - components so let's create them the
39:40 - first component will be called
39:42 - book
39:44 - overview. TSX you can create it within
39:47 - the components folder run
39:50 - rafc and that's it and then we can
39:52 - create the second one which will be
39:55 - called booklist
39:57 - TSX you can also run RFC in there now
40:02 - what we can do is import and render both
40:05 - of these within the home so I'll have a
40:07 - simple react fragment to wrap both of
40:10 - them because we cannot just return two
40:11 - children without wrapping them first and
40:14 - then I can render the book overview as
40:16 - well as a book list and make sure to
40:19 - import both of them from where they need
40:21 - to come once you've done that let's head
40:24 - over to book overview and let's turn it
40:26 - into a section with a class name equal
40:28 - to book overview then within it we can
40:31 - render a div with a class name equal to
40:35 - flex Flex D1 flex-all so the elements
40:39 - appear one below another and a gap of
40:42 - five and within it we can render an H1
40:46 - that'll render some kind of a title so
40:48 - this will be a long book title and
40:53 - that'll look something like this on
40:54 - mobile devices so now we at least know
40:56 - that the book overview is being rendered
40:59 - but what about the book list well let's
41:01 - head into it and this book list will
41:03 - also be a section within which we can
41:05 - render an H2 that'll say something like
41:08 - popular books and we can give it a class
41:12 - name of font
41:14 - db- new text- for Excel and text- light
41:20 - 100 there we go so now we have something
41:23 - like this and now is the time to turn it
41:25 - into something that looks more like this
41:27 - where we get an actual book title book
41:30 - information and the description as well
41:32 - as its cover and then we can also show
41:34 - some more covers at the bottom let's do
41:36 - that in the next
41:38 - lesson to get started with showing some
41:41 - data on our homepage so we can quickly
41:43 - build out the UI before we focus on
41:45 - other functionalities let's first import
41:48 - some sample data or dummy data if you
41:51 - will this will allow us to focus on the
41:53 - UI and later on exchange it for real
41:56 - data which which will fetch from our
41:58 - optimized database to do that you can
42:00 - head over to your application and create
42:03 - a new folder called constants within the
42:06 - constants create a new file called
42:10 - index.ts and here we can create some of
42:12 - that fake data that'll look something
42:15 - like this export const sample books is
42:20 - equal to an array of objects of all the
42:23 - information about different books such
42:25 - as an ID of one than a title something
42:29 - like the midnight book and so on but a
42:33 - book has many more pieces of data so for
42:35 - that reason I provided a couple of
42:37 - sample books in the Snippets to copy
42:39 - this contains no programming logic just
42:41 - some static data so copy it and paste it
42:44 - right here into constants you'll notice
42:47 - that here we have some navigation links
42:49 - that we can later on map over as well as
42:52 - a list of many different sample books
42:54 - with their titles authors genre
42:57 - descriptions colors covers videos
42:59 - summaries and more so now we can take
43:01 - those sample books and pass them into
43:03 - the book list by saying title will be
43:07 - equal to latest
43:09 - books books will be equal to sample
43:13 - books coming from constants and we can
43:16 - pass some kind of a container class name
43:19 - of margin top of 28 to divide it a bit
43:22 - from the top and under the book overview
43:25 - we will simply render more information
43:27 - about the current book by simply
43:30 - spreading all the information of sample
43:33 - books zero so that we can head into the
43:36 - book overview and accept all the
43:38 - information about a book right through
43:40 - the prompts we can destructure them such
43:43 - as a title author genre rating total
43:48 - undor copies available uncore copies yep
43:53 - will implement the entire inventory
43:55 - system so users always know how many
43:57 - books are available we can also add a
43:59 - description color and cover as well and
44:03 - now right here just to verify it's
44:04 - working under H1 we can render a book
44:07 - title The Midnight Library there we go
44:10 - now you can see that our tab script is
44:12 - complaining a lot here saying that
44:14 - binding element author has a type of any
44:17 - what we can do instead is create some
44:20 - generic types and to create them we can
44:22 - actually copy all of these props that we
44:24 - have here and then create a new file in
44:27 - the root of our application
44:30 - called types.
44:34 - D.S in there you can create a new
44:36 - interface called book and you can paste
44:40 - all these props that you just copied
44:42 - select multiple lines as we can edit
44:44 - them remove the comma and instead make
44:48 - them all to be equal to a string like
44:51 - this now not all are going to be strings
44:54 - some are going to be numbers like an ID
44:56 - property which will be set to number
44:59 - title is a string author is a string
45:01 - genre is a string rating will be a
45:04 - number total copies will be a number
45:07 - available copies will be a number as
45:10 - well next we're going to have a
45:11 - description color cover and we're also
45:14 - going to have a video of a type string
45:17 - summary of a type string as well as an
45:20 - optional is loaned
45:22 - book which is going to be a Boolean so
45:25 - with this we're now telling t script how
45:27 - our book should look like and you can
45:29 - Define it by simply saying colon book so
45:32 - these props are of a type
45:35 - book great now what do you say that we
45:37 - render some more information about this
45:39 - book right below the H1 I'll create
45:42 - another div with a class name equal to
45:45 - book- info and within it I'll render the
45:48 - first P tag that'll say bu and then a
45:52 - span and then within the span we can
45:54 - render the author's name that'll look
45:56 - something like this
45:57 - but of course we can make the span a bit
45:59 - nicer looking by giving it a class name
46:02 - of font D semibold and text
46:07 - dl-200 there we go that's going to give
46:09 - it that little pop we can now duplicate
46:11 - this P tag one more time and for the
46:13 - second time it'll say category and then
46:16 - we can set the category to be equal to
46:18 - genre either word is fine there we go
46:20 - and this is looking good to me below
46:22 - this P tag we can have another div
46:25 - that'll have a class name equal to flex
46:29 - and flex D row with a gap of one within
46:32 - that div we'll render an image coming
46:35 - from next image with a source of SL ions
46:40 - slst start. SVG with an Al tag of star
46:45 - width of about 22 and a height of
46:48 - 22 and right below it we can render a P
46:51 - tag that'll say rating so now we're
46:54 - displaying the rating of 4.6 for this
46:56 - book as well now let's hit a bit down so
46:59 - one and then two divs down I'll create
47:02 - another div that'll have a class name
47:04 - equal to book-
47:07 - copies and within it we can render a P
47:10 - tag that'll say total
47:12 - books and then we can render a span
47:15 - which will render the number of total
47:18 - copies of those books and we can do
47:20 - another P tag Below in a similar way
47:23 - that'll say available books which will
47:26 - render the number of available copies so
47:30 - we have total books 20 available books
47:32 - 10 we can now go below this div and
47:35 - create another P tag for the description
47:38 - by giving it a class name is equal to
47:41 - description or book
47:44 - description and we can render the
47:46 - description right within it like
47:49 - so there we go a dazzling novel about
47:53 - all the choices that go into a life well
47:56 - lived interesting I mean you could have
47:58 - some fantasy or fiction books here as
48:00 - well but as you know we're going to turn
48:02 - this into University Library later on
48:05 - below the P tag we can render a button
48:07 - this is a button coming from our chatan
48:09 - components with a class name equal to
48:12 - book- overview BTN and within it we can
48:16 - render an image with a source of SL ions
48:20 - SL book.svg with an Al tag of
48:24 - book a width of about
48:27 - 20 and a height of about 20 as well
48:31 - right below the icon we can render a
48:32 - piece of text that'll say
48:35 - borrow book and we can give it a class
48:38 - name of font
48:40 - db- new text- excl and text- dark 100 I
48:46 - think just borrow should do because it
48:48 - makes sense we want to borrow the book
48:50 - finally we can render the book cover
48:52 - right below or to the right side on
48:54 - desktop devices so let's go below load
48:57 - this div and create another div with a
49:00 - class name of relative Flex Flex -1 and
49:04 - justify Dash Center within it we can
49:07 - have another div with a class name off
49:09 - relative within which we can render a
49:11 - new component called book cover so let's
49:14 - head over to the components folder and
49:16 - create a new component called book
49:20 - cover. TSX run rafc and now we can
49:24 - import it right here into the book
49:26 - overview
49:27 - by saying book cover and to it we can
49:31 - pass a couple of props we can first pass
49:34 - a variant will this be a wide or not
49:37 - wide we can then pass a class name
49:40 - should it appear above or below other
49:42 - elements in this case like a z index of
49:44 - 10 so it appears above we can pass a
49:47 - cover color equal to color as well as a
49:51 - cover
49:52 - image equal to cover of course this is
49:56 - the UI we're trying to implement so
49:57 - we'll have two different covers one
50:00 - above and one below so right below this
50:03 - one let's create another div which we
50:05 - can absolutely position a bit away from
50:07 - the original one by giving it a position
50:10 - of absolute left of 16 top of 10 rotate
50:16 - of 12 opacity of 40 and a Max small
50:21 - devices hidden because we don't have
50:23 - enough space to show it and within here
50:25 - we can also render the book cover it'll
50:28 - be very similar but in this case it
50:30 - won't have any additional class names
50:32 - because we want it to appear below the
50:34 - top one so now we can dive into the book
50:36 - cover and implement it within here we
50:39 - want to accept all the props we've
50:41 - passed into this component so we can do
50:43 - that right here at the top and say we'll
50:46 - be accepting a class name let's also get
50:49 - a variant of the book cover a cover
50:53 - color as well as a cover URL and and we
50:56 - can define those as props so now right
51:00 - here at the top we can create a new
51:01 - interface of props we can Define the
51:04 - class name which will be an optional and
51:06 - a type of string we can define a variant
51:09 - which actually will make a bit more
51:11 - complex by creating a new object of
51:14 - different variant Styles such as con
51:16 - variant Styles is equal to an object
51:20 - where we have extra small which will
51:23 - correspond to the class name of book-
51:26 - cover underscore extra underscore
51:30 - small now we can repeat this over for
51:33 - small medium regular and wide so let's
51:37 - rename them appropriately we have small
51:39 - which is going to be book cover
51:41 - underscore small next we have medium so
51:45 - we can rename this one to medium and
51:48 - book cover medium after that we can have
51:51 - regular which is going to be book cover
51:55 - regular and and finally we'll have wide
51:59 - which is going to be book cover wide
52:02 - there we go and just to make sure tab
52:04 - script is safe we can Define the type of
52:07 - this as record of book cover variant so
52:13 - that'll look something like this book
52:15 - cover variant and then a string for the
52:19 - second part of it so what is this book
52:21 - cover variant well it'll simply be
52:24 - another tab script type so we can Define
52:26 - it by by saying book cover variant and
52:29 - it'll be one of these few different
52:31 - things so let's call it variant variant
52:34 - here as well and it'll either be extra
52:37 - small or small or medium or regular or Y
52:42 - so now we always know that we can use
52:43 - one of these variant Styles and within
52:46 - our interface we can Define that the
52:47 - variant will actually be of a type book
52:51 - cover variant after that we have a cover
52:55 - color and a cover URL the variant will
52:58 - be optional because we can Define some
53:00 - default book cover variant with that
53:02 - said let's provide those default values
53:05 - for example the default variant can be
53:07 - regular if we don't pass any other one
53:10 - through props the default cover color
53:13 - can be something like hash 012 b48 and
53:18 - then a default cover URL can be a
53:20 - placeholder photo like https Colin SL
53:25 - placehold Co 400 over 600. BNG this is
53:31 - just some placeholder image great and
53:33 - now we can put those props to use so
53:36 - instead of simply saying book cover
53:38 - right here let's actually return a div
53:41 - with a class
53:42 - name equal to first I'll wrap it into CN
53:47 - which stands for class names and pass in
53:49 - the classes that it'll always have such
53:51 - as relative transition Dall and duration
53:55 - of 300 so it will have a slight
53:58 - animation after that we can pass the
54:01 - variant Styles and then get into a
54:04 - specific variant for passing through
54:05 - props so what this means is that if a
54:08 - variant is regular it'll go into the
54:10 - variant Styles and apply a variant book
54:14 - cover regular class name and finally we
54:17 - can provide additional class names that
54:19 - we pass through props after that within
54:22 - this div we can render a book cover SVG
54:25 - so let's write something like book side
54:28 - SVG which later on will turn into a new
54:31 - component and then below it we can
54:33 - render another div this div will have a
54:36 - class name of absolute and a zindex of
54:40 - 10 to appear on top of other
54:43 - elements it'll also have some additional
54:45 - Styles which we will write in line such
54:48 - as left will be 12% the width will be
54:52 - set to
54:54 - 87.5% I found that value to work the
54:56 - best and of course we have to put it
54:58 - within a string and then after that
55:01 - we'll have the height which we can put
55:02 - to about
55:05 - 88% here we go and now within this div
55:08 - we can render a xgs image so let's just
55:11 - say image right
55:13 - here with a source of cover URL so the
55:17 - one we're passing through props and an
55:19 - I'll tag of something like book
55:23 - cover and close it right here this image
55:27 - also needs to have a fill property as we
55:29 - wanted to fill the entire space of the
55:31 - div a class name equal to rounded DSM as
55:37 - well as object dill and I think that
55:39 - should be good but as soon as I try to
55:42 - actually showcase that image it looks
55:44 - like it picked up a placeholder image so
55:47 - it wasn't able to show it right here
55:49 - because it's not added to the next
55:51 - config so we have to head over to next
55:54 - config JS and add place told that Co
55:57 - right there so let's do that right now
55:59 - by heading over to next config and here
56:02 - you'll have to define the images object
56:06 - which will contain a remote patterns
56:08 - array which will contain different
56:11 - places from where you want to get access
56:13 - to images the first one will be a
56:15 - protocol of https and it'll have a host
56:20 - name of the one you just copied
56:22 - placehold doco later on we'll be able to
56:25 - add some other places from which we
56:27 - might want to get our images for now we
56:29 - have the placeholder so if I reload you
56:31 - should be able to see our placeholder
56:33 - image but wait why are we getting a
56:35 - placeholder image and not this image
56:37 - we're passing right here well that's
56:39 - because here I called it cover image and
56:42 - back in the book cover I called it cover
56:44 - URL so let's actually change this over
56:46 - to cover image so it appears nicely and
56:49 - then we can also refer to it right here
56:51 - as cover image now you'll see the host
56:54 - name will change because now it's
56:56 - picking up the image from our constants
56:58 - index. DSX or DS where the image is
57:03 - coming from Amazon so let's actually
57:06 - head over to our next config and now you
57:08 - know what we need to do we have to add
57:10 - another remote pattern with a protocol
57:13 - of
57:16 - https as well as a host
57:19 - name equal to and we can copy it from
57:22 - here from the error message m.m media
57:24 - amazon.com
57:26 - it'll look something like this so if you
57:29 - do that and reload you should be able to
57:31 - see a great looking cover photo but we
57:34 - won't stop there we'll actually turn it
57:37 - into this very interesting 3D look where
57:40 - we'll wrap it with some kind of an SVG
57:42 - container and then put another version
57:45 - of that image right behind it for this
57:47 - more complete look so to achieve that
57:49 - let's render a new component by heading
57:52 - over to our components folder and
57:53 - creating it and I'll call it
57:57 - book cover SVG do DSX this is going to
58:02 - be just the regular SVG image so think
58:05 - of this as an image file you cannot
58:07 - really code this out so I'll provide it
58:08 - to you alongside the other files simply
58:11 - find the book cover SVG copy it and
58:13 - paste it here as you can see these are
58:16 - the different paths that create this SVG
58:19 - image the reason why we had to have it
58:21 - as a separate component is so we can
58:23 - pass the cover color of the image and
58:25 - match it with the rest rest of the book
58:27 - so now let's head back over to book
58:28 - cover and let's render this book cover
58:32 - SVG and pass the cover color of cover
58:35 - color right into it and you can see that
58:37 - now even in Mobile we have this more
58:39 - completed look there's one thing we have
58:41 - to fix and that is that in the interface
58:44 - props we're still calling it a cover URL
58:47 - but here it's called a cover image so
58:49 - let's actually fix the name right here
58:52 - in the interface of props to be cover
58:54 - image as well just so our book overview
58:56 - doesn't
58:57 - complain now let's check it out on
59:00 - desktop you can now see that the
59:01 - Midnight Library is appearing we have
59:04 - two books so it appears like one is
59:06 - stack on top of the other and we also
59:08 - have this nice looking SVG which is in
59:11 - the color of the cover pretty cool if I
59:14 - may say so myself now with that in mind
59:16 - the hero section is now done so the next
59:19 - thing we have to do will be the popular
59:22 - or the latest book section right below
59:24 - the hero for that we can close the
59:27 - overview and the cover and we can go
59:29 - back over to page. DSX and head into the
59:33 - book list to accept all of the props and
59:36 - start implementing it so let's
59:38 - immediately access the props we're
59:39 - passing from the Page by these
59:42 - structuring the title the books as well
59:45 - as the additional container class name
59:48 - that'll look something like
59:51 - this and we can set it to be of a type
59:54 - which is called props and we can Define
59:56 - that interface right here above by
59:58 - saying interface
60:00 - props and it'll contain a title of a
60:03 - type string a books property which will
60:07 - be of a type book array remember we
60:10 - already created that Global typescript
60:12 - interface right here and then finally
60:15 - we'll have a container class name which
60:18 - will be optional of a typ string so now
60:21 - let's put those to use by giving this
60:23 - section A Class name equal to container
60:28 - class name below it we have an H2
60:31 - that'll simply render the title so
60:33 - that'll look something like this it'll
60:35 - say latest books and finally we can
60:38 - render a UL an unordered list right here
60:41 - below and it'll have a class name equal
60:44 - to book
60:47 - list and right here within it we can map
60:50 - over those books by saying books. map we
60:54 - can map over each book and for each book
60:57 - we can render a new component so let's
61:00 - actually head over to the components
61:01 - folder and create a new component called
61:05 - bookc card. TSX run rce right within it
61:11 - and then we can just import it and
61:13 - render it right here by calling the book
61:15 - card for each one of the books we map
61:18 - over of course since we're mapping over
61:20 - it we also have to provide it a key and
61:23 - a key can be equal to book. tile because
61:26 - in this case all of our books are going
61:28 - to have distinct titles and then we can
61:30 - also spread the rest of the properties
61:33 - of the book so we can very quickly use
61:35 - them within the book card oh looks like
61:37 - I misspelled this container class name
61:39 - right here see how useful it is to have
61:41 - typescript because it's telling us that
61:43 - it doesn't exist on the props above so I
61:46 - will just fix it right here and now
61:48 - it'll get moved a bit down so with that
61:51 - said let's move over into the book card
61:53 - component and let's implement it I think
61:56 - you can start seeing how we're moving
61:57 - from pages to then smaller pieces of UI
62:00 - that we can then reuse across different
62:03 - pages also this borrow button is looking
62:05 - a bit weird to me so if I head over to
62:07 - book
62:08 - overview let's check it out it is right
62:11 - here oh I think I misspelled overview so
62:15 - if I fix overview right here yep now it
62:18 - has a bit more weight to it and it's
62:20 - also looking a bit better on desktop
62:22 - devices perfect so let's go back to the
62:24 - book card
62:26 - and let's implement it first we can
62:28 - accept all of the props such as the ID
62:32 - title genre color cover and is loaned
62:38 - book which can be set to false for now
62:41 - by default and those will be of a type
62:44 - book how useful it is to just be able to
62:46 - reuse the book type now that we have
62:49 - that let's actually turn this return
62:51 - statement into an Li and what you can do
62:54 - is if you just have a return statement
62:56 - and nothing else you can just
62:57 - immediately return it without specifying
63:00 - the return statement so that'll look
63:02 - something like this within this Li I
63:04 - will render a link component because
63:06 - each of these cards will actually be
63:09 - clickable and It'll point to forward SL
63:11 - books forward slash and then the ID of
63:14 - that specific book that'll look
63:16 - something like this and we can close
63:18 - that link right
63:20 - here and within it we can try to render
63:22 - the book cover see how cool this is we
63:25 - will reuse the book cover component that
63:27 - we created before by passing a cover
63:30 - color equal to color as well as passing
63:33 - a cover image equal to just cover let's
63:37 - not forget to import this book cover
63:40 - from the top and would you look at that
63:43 - immediately we get back all the dummy
63:45 - books that I created before so this is
63:47 - already looking so much better I think
63:49 - typescript is letting us know that we're
63:51 - missing the variant prop in the book so
63:53 - let's see how we have defined it we said
63:55 - if no variant is passed it'll equal to
63:58 - default so since we have the default
64:00 - value I think we can make this variant
64:02 - optional and in that case it'll be good
64:05 - because it'll just take the default
64:06 - variant this is pretty useful to be able
64:08 - to use the default values for props in
64:11 - situations where the most common type of
64:14 - prop you will pass will be the one that
64:15 - you set to the default value but when it
64:18 - changes you can then easily override it
64:20 - by passing some kind of a different
64:22 - variant like wide now let's give this Li
64:25 - a class
64:26 - name I will set it to be equal to I'll
64:30 - do a CN property and then I'll check if
64:33 - is loaned book and only if it's loaned
64:36 - then on extra small devices we'll do a w
64:39 - of 52 and W of FO you'll see what this
64:43 - will do soon to this link we can also
64:45 - pass a class name we'll do the same
64:47 - thing CN and then if is loan book we
64:52 - will give it a w- fo
64:56 - a flex property
64:58 - flex-all and items D center now let's go
65:01 - below the book cover and let's render a
65:04 - div that'll render two different P tags
65:07 - the first one will have a class name of
65:10 - book- title and you can guess it it'll
65:13 - render the title and the second one will
65:16 - have a P tag of
65:18 - book genre so that'll look something
65:21 - like this and right within it we can
65:23 - render the genre okay this is looking a
65:26 - bit better let's also style this div by
65:29 - giving it a class name of CN it'll
65:32 - always have a margin top of four but
65:35 - then only if it is not loan book in that
65:39 - case we can give it an extra small of
65:41 - Max W 40 and typically a Max W of 28 so
65:47 - in this case since they're not loaned
65:49 - they will all be able to fit in this
65:50 - nice layout but now if it is loaned we
65:53 - can go below this div and say if it is
65:55 - loan book in that case we can render
65:58 - another div with a class name of margin
66:02 - top of three with a W of
66:05 - fool and we can render another div with
66:08 - a class name of book- loaned and within
66:13 - it we can render an image coming from
66:15 - next image with a source of SL ions SL
66:20 - calendar.
66:23 - SVG with an Al tag of calendar a width
66:26 - of about 18 a height of 18 and a class
66:30 - name of object Das contain right below
66:34 - it we can also put a P tag that will say
66:36 - something
66:37 - like 11 days left
66:41 - to
66:43 - return and we can give it a class name
66:47 - equal to text- light 100 oh and let's
66:50 - put this P tag right in this div and
66:52 - then we can exit one div and render a
66:55 - button and that button will simply have
66:58 - a class name equal to book BTN and we
67:03 - can say
67:04 - download receipt there we go so right
67:07 - now we don't have any loan books but I
67:09 - think if we head over to
67:11 - constants which is right here index. TSX
67:15 - and add the is
67:17 - loaned book property and set it to true
67:21 - you can now see that this will take more
67:23 - space and it'll say download receipt so
67:26 - as we actually expand this you can see
67:28 - how that will look
67:29 - like there we go so here it looks
67:31 - similar because we have more space to
67:33 - show all the data but on mobile devices
67:36 - it actually takes the full row so we can
67:38 - properly show everything for now I will
67:40 - remove that is loan book property from
67:42 - these fake dummy books believe it or not
67:45 - we have completed our book card it was a
67:47 - pretty simple component so now it's
67:49 - looking something like this we can now
67:51 - close the book card the book list where
67:53 - the book card is used as well the book
67:55 - covered and with it we have implemented
67:58 - the two components that our homepage is
68:00 - made up of so let's open it up in the
68:02 - full screen there we go we have a nice
68:05 - looking hero section with this SVG book
68:07 - cover and then we have some latest books
68:10 - right here falling nicely into line with
68:12 - that in mind our homepage UI is now
68:15 - complete so we are ready to move to
68:17 - pages that users need to visit before
68:20 - they can visit the homepage or borrow
68:22 - any books and that is of course the o we
68:26 - have two beautifully designed o pages
68:28 - with the form on the left and then the
68:30 - cover image on the right same thing
68:32 - right here for the signin it has less
68:35 - Fields but the same structure so in the
68:37 - next lesson I'll teach you how we can do
68:39 - those two in a way that we can reach
68:41 - full reusability of all of these forms
68:44 - and components that make them great work
68:46 - on completing the
68:49 - homepage to get started creating our
68:52 - authentication Pages let's first create
68:54 - the routes
68:56 - we can do that by heading over to our
68:58 - app folder and creating a new route
69:01 - group that's going to be a folder which
69:04 - I'll call O and make sure to wrap it in
69:07 - parentheses to make it an O group within
69:09 - it I'll create a new layout which will
69:12 - only serve the odd group routes this
69:15 - time we won't have the nav bar so let's
69:17 - create it layout. TSX run
69:22 - RFC and as you know with every layout it
69:25 - must get children as props and children
69:28 - are of a
69:30 - type react
69:32 - node and then it simply can return that
69:35 - children for now so now whatever other
69:37 - Pages we create it will simply show
69:40 - those pages let me show you I'll create
69:42 - two new folders within o one will be
69:46 - called sign-
69:49 - in and the other one will be called sign
69:52 - Dash up
69:55 - within both of these we'll create a new
69:57 - page. TSX to create a route within which
70:01 - I will run
70:03 - rafc so in both of these Pages just
70:06 - create a new page. TSX and run
70:10 - RFC if you do that we can now manually
70:13 - move over to both of these Pages by
70:16 - heading to forward slash sign- in or
70:20 - just sign Dash up there we go so let's
70:25 - first focus on the layout as it is a bit
70:27 - Bland and both of these pages will share
70:29 - it so I'll move over to layout belonging
70:32 - to O first things first I'll wrap
70:35 - everything in an HTML 5 semantic main
70:38 - tag with a class name equal to o dash
70:44 - container for now I will remove the
70:46 - children within it we'll have another
70:49 - section which we'll use for the form so
70:52 - it'll have a class name equal to Au Dash
70:56 - form there we go so now we get that nice
70:59 - looking background we'll also render a
71:01 - div with a class name equal to
71:05 - off-box so this is the box for the form
71:08 - and then within it we can render an
71:10 - image belonging to next image with a
71:13 - source of SL iicons SL
71:17 - logo.svg with an ALT tag of logo a width
71:21 - of about 37 and a height of about 37 as
71:25 - well if we close it we get this nice
71:28 - looking logo and we can render an H1
71:31 - that'll simply say bookwise which is the
71:33 - name of our application with a class
71:35 - name equal to text- toxel with a font
71:39 - semi bold and text- white there we go
71:43 - let's also wrap those two in an
71:44 - additional div so both the image and the
71:47 - H1 that'll have a class name equal to
71:51 - flex Flex D row and the gap of two just
71:55 - to to make them look a bit nicer now we
71:56 - can go below that div and we can render
71:59 - another div that will render the
72:01 - children meaning whatever is appearing
72:03 - on both of these pages so now if I
72:06 - change this text on the signin page to
72:09 - signin form I think you'll start getting
72:11 - the idea of where we're going and I'll
72:14 - change it to sign up form here so now if
72:18 - I manually move to sign in you can see
72:20 - that even though the layout Remains the
72:22 - Same here we have the signin form and
72:25 - here we have the sign up form and
72:27 - finally both of these will actually
72:29 - share the right side of the screen as
72:31 - well so I can create another section
72:33 - which will have a class name equal to O
72:37 - illustration and within it we can render
72:39 - an image that will have a source of SL
72:43 - images SL
72:45 - off-
72:47 - illustration.png with an Al tag of O
72:54 - illustration with a height of about
72:56 - 1,000 a width of about 1,000 as well and
73:00 - finally a class name equal to size- full
73:04 - and object Das
73:07 - cover so you can see on mobile devices
73:10 - it's going to show up at the top and on
73:12 - desktop devices it'll take half the
73:14 - screen because we don't really need much
73:16 - more for a simple form how do we make
73:18 - that happen well if you look into the O
73:20 - illustration you'll notice that we're
73:22 - setting it to Sticky with the height of
73:24 - 40 W fo so it takes the full width and
73:28 - then in small devices we're positioning
73:30 - it at the top zero and in small devices
73:32 - we're making it take the full screen so
73:34 - it's going to Simply depend on the
73:35 - screen size of how it's going to behave
73:38 - as soon as we go over the small it'll
73:40 - take the full height and then expand and
73:42 - an extra small it'll look like this with
73:44 - that in mind we're now done with the
73:46 - layout and we are ready to start
73:47 - implementing both of these pages but we
73:50 - won't just create a form here and then
73:53 - just copy it over and do do the same
73:55 - thing here with a couple of different
73:56 - inputs not at all we'll create a single
74:00 - o form component that will'll be able to
74:02 - then switch between when we move from
74:05 - sign in to sign up let me show you how
74:08 - we can do that I'll head over to
74:09 - components and create a new component
74:12 - called o
74:14 - form right here.
74:17 - TSX run rafc within it and now we have
74:22 - the OD form now this OD form will accept
74:25 - a couple of different props such as the
74:28 - type of the form is it sign in or sign
74:31 - up it can also accept something known as
74:33 - a schema meaning schema validation for
74:35 - the fields within that specific type of
74:38 - the form as well as the default values
74:41 - for the fields within the form and
74:44 - finally it'll accept a different
74:46 - onsubmit function because depending on
74:48 - which one we're submitting we want to
74:49 - either log the user in or create a new
74:52 - user so these will be of a type type
74:55 - props so let's define them right here at
74:57 - the top by saying interface props and
75:00 - here for the first time we're dealing
75:02 - with a bit more complex typescript
75:04 - values where we're going to have a
75:06 - generic parameter of T what t means is
75:10 - that it's generic so it can take in the
75:13 - type of whatever we pass into it because
75:15 - we don't yet know how the exact
75:17 - structure will look like rather we'll
75:19 - take in the fields or the inputs that
75:22 - we're going to have by extending the
75:24 - field field values so we can say extend
75:27 - field values and this will come in from
75:30 - react hook form but we cannot use this
75:33 - yet because we haven't yet installed a
75:35 - shaten form component that contains the
75:37 - Imports for react hook form as well as
75:40 - Zod so head over to shaten and search
75:43 - for form and it'll tell you here that
75:45 - forms are tricky one of the most common
75:47 - things you'll build in a web application
75:49 - but also one of the most complex in this
75:51 - guide we'll take a look at building
75:53 - forms with react hook form and Zod so
75:56 - let's actually go through the
75:57 - installation process we first have to
76:00 - add it by copying this command and then
76:03 - pasting it into the terminal we'll have
76:05 - to press enter to force install it since
76:07 - we're using newer versions of nextjs and
76:09 - react and it'll install it into our
76:11 - components folder after that we are
76:13 - ready to create a schema the schema
76:16 - defines the shape of our form so let's
76:18 - actually head over to our lib folder and
76:21 - within it create a new file called
76:24 - validation
76:27 - dots within there we can do something
76:29 - like this export const sign up schema is
76:34 - equal to Z doob and then we can pass all
76:37 - the fields that we want to have Z we
76:40 - have to import like this by saying
76:42 - import Z from Zod and this is coming
76:45 - with the installation of a component
76:48 - it's also asking us whether we want to
76:49 - override the button let's say sure yeah
76:53 - and now it'll update it and the form
76:55 - will be installed so which types of
76:57 - fields will we have on our signup form
77:00 - well we'll have a full name so let's say
77:03 - full name and actually I won't use camel
77:06 - case here because later on once we store
77:08 - it in the database we have to keep it
77:10 - all lowercase like this and that'll be a
77:13 - z. string do Min characters of three so
77:18 - a string of a minimum of three
77:20 - characters after that we can have an
77:22 - email which will be a z. string
77:25 - email next we can have a
77:27 - University ID and you know what
77:30 - typically we would have to have it as
77:32 - all lowercase or maybe something like an
77:35 - underscore in between but this is not
77:37 - really a standard JavaScript practice
77:39 - even though it is a good SQL practice
77:42 - and even my webstorm is telling me right
77:44 - here that there is a typo here this
77:46 - should have been full name so let's
77:49 - actually keep it camel case like this
77:51 - for our front end code and then when we
77:53 - pass it over to our back back end we can
77:55 - then switch it over to snake case with
77:59 - underscores but for now I'll leave it
78:01 - like this University ID that'll have a
78:04 - z. coer number so it'll actually take a
78:08 - string and turn it into a number we do
78:10 - it like that then we're going to have a
78:12 - university card which will be of a type
78:14 - z.
78:15 - string do nonempty and we'll say
78:21 - University card is required
78:26 - perfect and finally we of course need a
78:28 - password so let's put a password Here of
78:31 - a type z. string. M length of eight
78:35 - characters and let's define the schema
78:37 - for the signin by saying export const
78:40 - sign in schema is z. object where we get
78:43 - an email and a password and that is it
78:47 - and now we can use those two schemas as
78:49 - we pass them into corresponding
78:50 - components so let's head back over to
78:53 - our odd form and now we're accepting
78:55 - those different types of props so what I
78:57 - wanted to show you is how we can
78:59 - actually call this odd form depending on
79:01 - the type from the two different pages
79:03 - that'll look something like this I'll
79:05 - say Au form Das Dash and then I'll
79:08 - render the type which we dynamically
79:11 - pass as a prop and then in both of these
79:14 - components the only thing I will render
79:16 - is a self-closing OD form component so
79:20 - that'll look something like this OD form
79:22 - to which we can now pass a type
79:25 - equal to signore n we can also pass a
79:29 - schema coming from validations equal to
79:33 - sign in schema which will import it from
79:36 - validations as well as default values
79:39 - equal to email and password both at the
79:42 - start equal to an empty string and now
79:44 - if we save it and head over to sign in
79:47 - you can see that it says off form sign
79:49 - in and it has the sign-in schema so it
79:51 - knows which Fields it has it has the
79:53 - type as well as the the default values
79:56 - finally it also needs an onsubmit
79:58 - function which for now I will leave as
80:00 - an empty callback function and later on
80:03 - we can Implement its logic so let me
80:05 - actually copy this entire code and paste
80:09 - it to the sign up form as well but this
80:12 - time I will change the type to sign up
80:15 - I'll change the schema to sign up schema
80:18 - so we have to get it from
80:20 - validations and under default values
80:23 - we'll have to pass a few more values
80:25 - like email password as well as full name
80:29 - which will start as an empty string
80:32 - University ID which will start as an
80:34 - empty string and a university card which
80:38 - will also start as an empty string great
80:41 - and now you can see as we're switching
80:42 - between those both of these will be the
80:44 - odd form but their logic and the fields
80:46 - will show will change depending on the
80:49 - type now we can turn this component into
80:51 - a use client component right here at the
80:53 - top because it is a form and we're
80:56 - managing a lot of States here so it has
80:58 - to be rendered on the client side then
81:00 - we have to define the form by importing
81:02 - a few things such as Zod resolver as
81:05 - well as use form from react hook form
81:08 - that'll look like this and we can Define
81:11 - the form as well as the onsubmit
81:13 - function so let's put that right here at
81:15 - the top of our component that'll be con
81:18 - form is equal to use form Z coming from
81:23 - Zod so you have to import it that'll be
81:26 - form and then we can Define the type of
81:28 - that form to be use form return coming
81:33 - from react hook form to which we can
81:35 - pass the T generic type and then I don't
81:39 - think we actually have to have this type
81:40 - because we're defining it in a different
81:42 - way we can just call the Ed form and
81:44 - then Define the Zod resolver to which we
81:47 - can pass our Dynamic schema so it's no
81:49 - longer just a singular form schema it is
81:52 - the schema coming from params right here
81:54 - so it'll depend sometimes it'll be
81:56 - signed in and sometimes it'll be signed
81:58 - up and the same thing happens for
82:00 - default values we won't just Define them
82:02 - here manually we'll say default values
82:05 - is equal to default values as default
82:08 - values of a type T coming through props
82:12 - and then we have a submit Handler which
82:14 - we can call const we can rename it to
82:17 - handle submit which will be of a type
82:20 - submit
82:22 - Handler that accepts the type t
82:25 - and it'll be equal to a callback
82:27 - function that is asynchronous and simply
82:30 - takes in the data so I will rename these
82:33 - values in the type to data and just make
82:36 - it look like this so now we have a clean
82:38 - slate to work with which will work for
82:40 - both forms of course we have to define
82:42 - the props so let's do that right now
82:44 - interface props will take in that t that
82:47 - extends the field values which are
82:50 - coming from react hook form and it'll
82:52 - have a schema of a type Zod
82:55 - type which will take in that generic T
82:58 - parameter the default values which will
83:01 - be of a type T so I think now we can
83:03 - understand what the t is T is actually
83:05 - the default values that we're passing
83:07 - into the function and this Zod type also
83:11 - has to be
83:12 - imported from Zod onsubmit will be equal
83:15 - to a callback function where we get the
83:17 - data of a type T which returns a promise
83:21 - that will result in a success Boolean as
83:25 - well as a potential error which is
83:27 - optional of a type string if it fails
83:29 - and finally a type which will be either
83:33 - signore in or signore up so now we're
83:37 - setting our form up for Success because
83:40 - we're telling it that it can be one of
83:42 - those two types and we're defining all
83:44 - of the props we're passing into it to
83:45 - make it reusable without any problems
83:48 - these props will have to accept the
83:50 - dynamic T generic parameter and when we
83:54 - Define find the odd form we also have to
83:55 - specify it here that t extends field
84:01 - values it should be done like this so
84:03 - now prettyer nicely put this into
84:05 - multiple lines so it's easier to
84:07 - understand we first have this interface
84:09 - where we Define the types of props that
84:11 - we accept into these function and saying
84:14 - that we're also passing a t generic
84:16 - parameter that extends the field values
84:19 - we have a schema default values onsubmit
84:22 - and type submit and then we Define it
84:25 - and now if you hover over each one of
84:27 - these things you know exactly what it is
84:29 - not only that you know what it is type
84:32 - script as well as Zod and react hook
84:34 - form and everyone knows what each one of
84:36 - these things are which will make her
84:38 - debugging and turning this form to be
84:40 - reusable super simple let's move over to
84:43 - the Second Step which is to build out
84:44 - our form by importing the necessary
84:47 - components for it such as the input and
84:49 - the button we can do that right here at
84:52 - the top and then we can use use it
84:54 - within the form right here by copying
84:56 - the form and putting it as the return
85:00 - statement that should look something
85:02 - like this if we save this we're done and
85:06 - we should have something that looks like
85:07 - this but instead we have something that
85:09 - looks more like this don't worry it's
85:11 - just an error saying that we haven't yet
85:13 - installed the input component from
85:15 - shaten so let's do that by saying MPX
85:18 - shaten add input you can see how simple
85:21 - it is now you don't even have to visit
85:23 - the docs you just say the component name
85:26 - and you add it there we go the input got
85:28 - added but we got another error this one
85:31 - is saying that only plain objects and a
85:33 - few built-ins can be passed to client
85:36 - components from server components but if
85:38 - you check out some of our Pages like the
85:39 - signin page we're actually passing some
85:42 - more complicated objects as well as
85:44 - functions so that is not allowed which
85:47 - means that we'll have to turn these two
85:48 - components into use client components as
85:51 - well so just add the use client
85:53 - directive to the top of the sign in page
85:56 - as well as to the top of the sign up
85:58 - page so let's head over there and let's
86:00 - add the used
86:03 - client when you do that you'll notice
86:05 - that it will no longer complain and
86:07 - we'll be able to see our very simple
86:09 - form right now so now let's implement
86:11 - the rest of the form now that we have
86:13 - the structure and the skeleton for what
86:15 - this form will become we can head to the
86:17 - form and add some information that goes
86:20 - around the form letting us know whether
86:22 - we're on the signin or signup form now
86:24 - you will start seeing how reusable it
86:26 - can get I'll do that by first wrapping
86:29 - this form in a div and then I'll pull it
86:32 - within that div next let's give that div
86:35 - a class
86:37 - name equal to flex Flex Dash call and a
86:41 - gap of four and then within it create a
86:43 - new
86:44 - H1 that'll have a class name equal to
86:47 - text- 2XL font D semi bold and text-
86:53 - white and and within it we can check if
86:56 - is sign in is true which is one of the
86:59 - props for passing in that case we can
87:01 - say welcome back to bookwise but if it's
87:05 - not sign in we can say create your
87:10 - library account something like that and
87:13 - of course this is sign in is actually a
87:15 - new field which we can create based on
87:18 - the prop of the type so right here at
87:20 - the top I can say something like const
87:25 - is sign in and that'll be true if the
87:28 - type is triple equal to sign in so now
87:32 - it says create your library account and
87:34 - of course on signin it'll say something
87:36 - else we can do another piece of text
87:39 - below this AG one may be a P
87:42 - tag with a class name equal to text-
87:47 - light 100 and there we can say if is
87:51 - sign in then we can render a piece of
87:55 - text of well let's try to find it from
87:58 - the design something like let's see
88:01 - access the vast collection of resources
88:03 - and stay updated and then if it's create
88:07 - we can do something like please complete
88:08 - all fields and upload a valid University
88:11 - ID to gain access to the library there
88:13 - we go so now if I get back you can see
88:16 - both the heading and the subheading
88:17 - right here we can do something similar
88:20 - below the form okay so here we have the
88:22 - form and then below
88:25 - we can have a P tag with a class name
88:28 - equal to text- Center
88:31 - text-base and font Das medium where we
88:34 - can check if is sign in in that case we
88:36 - can say something like new to bookwise
88:39 - else we'll say already have an account
88:41 - we can also render a link that'll say a
88:44 - similar thing if is sign in it'll say
88:47 - create an account else it'll say sign in
88:50 - and of course we have to give this href
88:52 - a link so that'll be something something
88:54 - like this if is sign in then we can
88:57 - point it to for/
89:00 - signup else we'll point it to slash sign
89:04 - in and of course make sure to import the
89:06 - link from next link let's also give a
89:08 - class name to this link equal to font
89:11 - Das bold and text- primary and let's put
89:14 - a space after both of these two texts so
89:17 - we can nicely see them so currently we
89:19 - are on the Creator account and it's
89:21 - saying if you already have an account
89:23 - head over to to sign in and if we're
89:26 - welcome back to bookwise if you're new
89:28 - create an account and now we have linked
89:30 - in between those two forms which share
89:33 - the same layout as you can see but later
89:35 - on based on these we can change the
89:37 - inner content of the form so with that
89:39 - in mind let's create those different
89:41 - form Fields first we have a form where
89:43 - we call a handle submit and then we can
89:46 - pass in a handle submit because we
89:48 - rename that function we can give it a
89:51 - space- y of six as well as a w fo so it
89:56 - takes more space and then this is super
89:58 - interesting we will make this so
89:59 - reusable that you will actually doubt
90:02 - the way it's working let me show you
90:04 - instead of just manually duplicating
90:06 - different form Fields like this which
90:08 - would leave us with having hundreds of
90:09 - lines of code and then on top of that
90:12 - you would also have to add checks like
90:14 - if is sign up then actually include this
90:17 - form and so on no we won't do that we
90:20 - will simply utilize the fields that we
90:23 - have above the default values So based
90:26 - on those default values we can show
90:28 - different form Fields I will first wrap
90:31 - everything in a dynamic block of code
90:34 - and then say object. keys of default
90:37 - values so I just want to grab their
90:39 - names and the map over them where I'm
90:41 - going to get each individual field and
90:44 - for each field I want to return a what
90:48 - well a form field so now I will put this
90:51 - a bit up within the map
90:54 - function and you can see this
90:56 - immediately created as many fields as
90:58 - many we have added in our validation so
91:01 - if you head over to validations dots you
91:04 - can see that for the sign up we have 1 2
91:06 - 3 4 5 and here we have just two so if
91:09 - you switch over between them you can see
91:10 - that's already working but definitely
91:13 - not all of them are just supposed to say
91:15 - username right so let's now make them
91:17 - unique first we need to pass a key to
91:20 - each one of these because we're mapping
91:21 - over them and the key will be fielded
91:25 - the name will be equal to field and just
91:28 - to make typescript happy we can say as
91:31 - path of T and then we are rendering that
91:34 - field where we have a form item we have
91:36 - a form label to which I'll pass a class
91:39 - name of capitalize and I will select the
91:42 - right form field by accessing the field
91:46 - names coming from index.ts of constants
91:50 - and then we'll get a field name for that
91:52 - specific field by saying field. name and
91:55 - that'll look something like this now we
91:57 - can see that it says email password Here
91:59 - We have nothing for some reason
92:01 - University ID number and upload
92:03 - University ID card so it's pulling them
92:06 - from our constants where we have defined
92:08 - what each one of these fields should say
92:10 - and make sure to rename full name to use
92:13 - camel case there we go you can do the
92:15 - same thing for the field types below now
92:17 - just to make tab script safe one more
92:19 - time we can say field name will be as
92:23 - key off type off
92:27 - field names like this so basically with
92:30 - all of this what we're doing is we're
92:32 - saying that these form labels will
92:34 - belong to one of these things right here
92:37 - after the label we have the form control
92:39 - and here we can choose whether we want
92:40 - to display it as an input or as
92:42 - something else most of them will be
92:44 - inputs besides for the University card
92:47 - which will be an image upload so that'll
92:49 - be a new component which we have to
92:50 - create so let's create it in the
92:52 - components folder I'll call it
92:54 - image upload. TSX run
92:59 - rafc and now back in the odd form we can
93:02 - check if field. name is triple equal to
93:07 - University card in that case we want to
93:11 - render the image upload component else
93:16 - we want to render a regular input
93:18 - component so that'll look something like
93:20 - this and of course this was supposed to
93:22 - be a string we're checking for the field
93:24 - name of University card so now you can
93:27 - see that everything is the same but here
93:30 - it says upload University card that'll
93:32 - be an image upload which we'll Implement
93:34 - soon let's also style our input to make
93:37 - it required and we can also remove the
93:40 - placeholder and instead give it a type
93:44 - which will be equal to this part right
93:46 - here where we are mapping over the field
93:49 - names so I will copy that and paste it
93:52 - here but instead of of mapping over the
93:54 - field names we'll map over the field
93:57 - types like this and then say field. name
94:00 - as key off field types right here and of
94:04 - course we have to import the field types
94:05 - coming from constants those are these
94:08 - right here which tell us should they be
94:09 - text email number or password if we
94:12 - structure it properly it should look
94:14 - something like this and then we spread
94:16 - all of the other field properties and
94:18 - render the class name equal to form
94:22 - input and that'll make them look just a
94:25 - tiny bit nicer like
94:27 - this and now check this out this one
94:30 - immediately knows that it is an email
94:31 - field this one will hide it because it's
94:34 - a password this one provides me with the
94:36 - number information because it's a number
94:38 - and this one is just a string and if we
94:40 - switch over to signin you can see that
94:42 - it only has the email and password and
94:45 - we did all of this by just rendering a
94:47 - single form field which is then being
94:49 - created for each one of the mapped
94:52 - default values pretty cool
94:54 - right and finally we have the form
94:56 - description which I believe we can
94:58 - remove we already have enough
95:00 - information right here we render the
95:02 - form message and then we can go here
95:04 - below the form to display a button of a
95:07 - type submit a class name equal to form
95:11 - BTN and we can say something like if is
95:14 - sign in then we can say let's do sign
95:19 - in else we'll do something like sign up
95:24 - there we go so now this is looking like
95:26 - a real form finally right there we go
95:30 - and with that the UI of the form is now
95:33 - more or less
95:34 - complete the only thing we have to do is
95:37 - implement the upload image for the
95:39 - University card which we'll do soon but
95:42 - for now you can see most of the general
95:43 - Fields have been completed we can also
95:45 - check it out on desktop devices in my
95:47 - opinion this is looking much much better
95:49 - it's looking like a real professional
95:51 - slick form where users can sign in in
95:53 - with complete validation as well as sign
95:56 - up this path right here right now has a
95:59 - red squiggly line so we can actually
96:01 - import it from react hook form so let's
96:04 - do that there we go so now we're good we
96:06 - no longer have any errors and I mean
96:09 - just look at how clean this form is
96:12 - we're defining it to be fully reusable
96:14 - we Define what the default values are
96:17 - what the submit function is and then we
96:19 - specify how it should be rendered so
96:21 - with that in mind we are now ready to
96:23 - start setting up the back end of our
96:24 - application including the database and
96:27 - more so we can actually fill in the
96:29 - information of this form and then submit
96:32 - it through the handle submit function
96:34 - and create a record in our database
96:36 - which will of course be our user so
96:38 - let's do that next great work on
96:41 - completing the odd
96:43 - form just before we can create users
96:46 - iner database we need to deal with the
96:48 - last piece of UI and logic to be able to
96:50 - submit the signup form and that is the
96:52 - ability to upload the University ID card
96:55 - image and to make that happen we'll use
96:57 - image kit actually we'll use image kit
97:00 - for all of the image and video handling
97:02 - in our entire application as it'll
97:04 - always remain completely free and give
97:06 - you 5 GB of free storage with 25 GB of
97:10 - media delivery bandwidth and not only
97:13 - that you'll also get a ton of image and
97:15 - video processing features from
97:17 - Transformations AI Generations
97:20 - optimizations streaming features and
97:23 - more of all the image upload services
97:25 - that I've used I found this one to be
97:27 - the best both in terms of features that
97:29 - it has to offer as well as the amount of
97:31 - free stuff that they provide so click
97:33 - the link down in the description to be
97:35 - able to follow along and see exactly
97:37 - what I'm seeing and create a new account
97:39 - I'll sign up with Google then you'll get
97:42 - redirected to the onboarding so you can
97:44 - select your position and choose what's
97:46 - your main objective in this course I'll
97:48 - teach you how to use image kit to
97:50 - optimize and transfer your images as
97:53 - well well as videos as well as create
97:55 - some personalized media assets and
97:57 - overlays how to manage your content and
98:00 - how to use apis to uploaded in more so
98:02 - we'll cover all of it finally you'll get
98:05 - your image kit ID in this case you can
98:07 - do something like JS Mastery and then
98:09 - you can put your name after it like
98:11 - Adrien and you can choose the region
98:13 - that is closest to you and click submit
98:15 - after that you'll get redirected to
98:17 - image kids dashboard you can hide the
98:19 - checklist as I'll show you how to do
98:21 - everything first head over to developer
98:23 - options
98:24 - and now we'll have to extract the keys
98:26 - for everything we need let's get the URL
98:28 - endpoint and then head back over to your
98:30 - code and let's put those in our
98:32 - environment variables by creating a new
98:34 - file called env.
98:37 - local and let's call it
98:41 - nextore Public uncore Image kit uncore
98:45 - URL uncore endpoint and make that equal
98:48 - to the endpoint that we just copied
98:51 - after that we can get our public key so
98:53 - so we can put that as next Public Image
98:56 - kit public key and finally we'll also
99:00 - need our private key so copy it from
99:02 - here and first you must set a password
99:04 - to do that so once you add a password
99:07 - head back over here you'll have to
99:09 - reenter that password and then you'll be
99:11 - able to copy that key head back to your
99:14 - envs and just say image kit private key
99:19 - and for this one you won't add the
99:21 - nextore public because this one will be
99:23 - used only on the server side now since
99:25 - there will be many envs we'll be using
99:27 - and their names are pretty long let's go
99:29 - ahead and create a new file called
99:31 - config within the lib folder so that's a
99:34 - new
99:35 - config dots
99:38 - file and within it we can create a new
99:41 - config
99:42 - object that'll have the EnV object
99:45 - within it that will then have the imag
99:47 - kit object and here we can keep track of
99:50 - all of those envs such as a public key
99:54 - which will be equal to process. EnV do
99:58 - nextore Public Image kit undoru key you
100:04 - get the idea right and now we can add
100:06 - the other two as well so I'll simply
100:07 - copy their names so that'll be URL
100:11 - endpoint is
100:13 - process. env. nexu image kit URL
100:17 - endpoint and finally we'll have the
100:19 - private key as well so let's define it
100:22 - as private key which is process. env.
100:26 - imagit private key and now we can export
100:29 - default. configuration so it's easier
100:32 - for us to get access to these
100:33 - environment variables later on great now
100:36 - that we have those envs from the
100:38 - dashboard we'll have to head over to
100:40 - image kits documentation specifically on
100:42 - the next GS installation part so let's
100:45 - scroll through the steps first things
100:47 - first we have to set up image kit next
100:48 - gssd K so we can skip the steps where
100:51 - we're creating the app and we can head
100:53 - over straight to the installation of the
100:55 - package npm install image kit IO next
100:58 - I'll do that in our second terminal and
101:00 - it's telling you here that we need to
101:01 - get a couple of envs which we have
101:03 - already set up after that it's telling
101:05 - us a bit about different components that
101:07 - we can use such as the image kit image
101:11 - which utilizes the next image and
101:13 - renders an image tag and others so let's
101:16 - go ahead and import a few of these into
101:17 - one of our components so I'll copy
101:21 - this and we'll move over to a new file
101:26 - which is going to be under components
101:27 - image upload and I will paste those
101:30 - Imports right here we won't need all of
101:33 - them right now we'll just need the image
101:35 - kit image the image kit provider and the
101:37 - image kit upload and these are of course
101:40 - client side components so we'll have to
101:42 - turn the use client directive on right
101:45 - here at the top next we need to
101:46 - configure the app for image kit we'll
101:49 - have to do some styling and then render
101:50 - the images this is all looking great I
101:53 - think the documentation is very detailed
101:55 - but I'll teach you how to do that from
101:57 - scratch so let's go ahead and do it
101:59 - together first things first we'll create
102:01 - an additional function which will
102:02 - authenticate us to be able to upload
102:05 - images securely I can do that by saying
102:08 - const authenticator is equal to an async
102:11 - function here we can open up a try and
102:14 - catch block where we get the error if
102:16 - there is an error we're going to Simply
102:18 - throw it by saying throw new error and
102:21 - then we can say something like authentic
102:24 - ation request failed and then at the end
102:27 - we can render the actual message in a
102:30 - template string and rendering the error.
102:33 - message this error for now can be of a
102:36 - type any as we don't yet know how it
102:37 - looks like now in the tri block we can
102:40 - try to authenticate our users by making
102:42 - a request to a function which will
102:44 - execute on the server side so let's say
102:47 - const response is equal to await Fetch
102:52 - and now we have to make a fetch request
102:54 - to a specific domain name first of all
102:57 - I'll head over to our
102:59 - envs and I'll add an additional
103:01 - environment variable called nextore
103:04 - public undor API uncore endpoint we'll
103:08 - change this later on in production but
103:10 - for now it can be HTTP
103:14 - Colin localhost 3000 and we can also add
103:18 - it to our config so head over to config
103:21 - and do it right here above image kit so
103:24 - that'll be API endpoint and it'll be
103:26 - equal to process. env. nextore public _
103:32 - API uncore endpoint and also typescript
103:35 - might not know whether we have
103:37 - successfully provided these environment
103:38 - variables but we do know that so I
103:40 - believe if we add an exclamation mark at
103:42 - the end it'll actually consider it as
103:44 - given that there will be a string for
103:46 - each one of these enbs so now let's head
103:49 - back over to here and let's make a
103:51 - request to a dynamic route of config
103:54 - coming from lib
103:57 - config
103:59 - env. API
104:02 - endpoint then we can do a forward slash
104:05 - API SLO and slash image kit then we can
104:10 - check if not response. okay we can
104:13 - simply open up a new block and get
104:16 - access to the error text by making it
104:19 - equal to a wait response. text and then
104:22 - we can throw a new error where we can
104:24 - say something like request failed with
104:29 - status and then we can just render the
104:32 - response Das status and after that we
104:34 - can render the error text perfect
104:38 - outside of the if if everything goes
104:40 - right we can get access to the data by
104:42 - saying data is equal to await response.
104:46 - Json so what is our server returning to
104:48 - us and then we can destructure some of
104:50 - the things from the data such as the
104:52 - signature the expiration which is expire
104:55 - and then the token and these will come
104:58 - from the data object and finally we can
105:00 - return an object consisting of just
105:02 - these three properties that'll be token
105:06 - expire and signature so now how can we
105:08 - create this function that will actually
105:10 - authenticate us well it is super simple
105:13 - we just have to create this route by
105:15 - heading over to app create a new folder
105:18 - called API within API create another
105:21 - folder called o
105:24 - within o create yet another folder
105:27 - called image
105:29 - kit and within image kit create a new
105:32 - route. DS within it we can say const
105:35 - image kit is equal to new instance of
105:39 - image kit which is coming just from
105:41 - image kit so that means that we have to
105:43 - install this as well because so far we
105:45 - have just installed the next GSS DK so
105:47 - let me just run mpm install image kit on
105:50 - its own as well and then we can pass
105:52 - some configuration op options such as
105:54 - the public key and now we can very
105:56 - easily get access to this public key
105:58 - since we created the config object
106:00 - coming from lib config env. imagit dopu
106:06 - key like so we can repeat that for
106:09 - private key so I'll just rename it here
106:11 - and here to private key and finally we
106:15 - need to do the same thing for the URL
106:17 - endpoint so I'll just do it here URL
106:21 - endpoint perfect
106:24 - now there is some code duplication here
106:26 - so if you want to destructure these
106:28 - fields you can you can do that by saying
106:30 - cons destructure the environment
106:32 - variable key and then from it
106:35 - destructure image kit and then from it
106:37 - destructure these three keys so now we
106:40 - have kind of fully destructured that
106:42 - config object and now we can just use
106:44 - the variables themselves like so and if
106:47 - you have both the key and the value of
106:49 - the same name that means that you can
106:51 - just Omid the ladder and and it'll
106:53 - actually look just like this either way
106:56 - is totally fine once we create a new
106:58 - instance of image kit we can create a
107:00 - function that we're calling by saying
107:03 - export async function get yep it is that
107:06 - easy to create backend API routes in
107:08 - next GS so let's return next
107:12 - responsejson and then pass over the
107:15 - image kit dot get authentication
107:18 - parameters and believe it or not that's
107:20 - it we have to add this to our server
107:23 - and it will return all the information
107:25 - we need to authenticate so now we can
107:27 - head back over to our image
107:30 - upload and we can call this
107:32 - authenticator within our image upload
107:34 - component pretty straightforward right
107:36 - but now let's see how we can use some of
107:38 - these image kit next GSS DEC components
107:41 - I'll first wrap everything into an image
107:44 - kit provider to which we have to feed
107:47 - all of this information such as the
107:49 - public key equal to and now once again
107:51 - we need to get access to the same
107:53 - configuration options so we can just
107:55 - head over to our route and we can
107:58 - actually extract all of these because
108:00 - we'll have to reuse them again so I'll
108:02 - paste them right here at the top so the
108:03 - public key will be equal to public key
108:06 - next we have the URL endpoint equal to
108:09 - you can guess it URL endpoint and
108:11 - finally we have the authenticator this
108:13 - time equal to authenticator which is the
108:16 - actual function that calls our backend
108:18 - to authenticate our user in this case we
108:20 - must not get access to the private key
108:23 - because this private key is available
108:25 - only on the server side and we'll
108:27 - actually get an error if we try to call
108:28 - it right here on the client side and we
108:30 - also don't need to initialize the image
108:32 - kit right here as we're initializing it
108:34 - in that server action where we
108:35 - authenticate perfect so now we're
108:38 - wrapping everything with the image kit
108:40 - provider and within it we can render the
108:43 - image kit upload component that allows
108:45 - us to handle image upload I'll render it
108:48 - like so i k upload it'll be a closing
108:53 - component and to it we need to pass a
108:55 - ref so let's declare that reference
108:57 - right here at the top by saying cons ik
109:01 - upload ref is equal to use ref this is
109:05 - of course coming from react and at the
109:07 - start it'll be equal to null later on
109:09 - we'll also have to have a state that'll
109:11 - help us keep track of the file we're
109:12 - uploading so let's create it immediately
109:15 - by creating a new use State snippet I'll
109:18 - call it file and set file at the start
109:22 - equal to null we can also Define the
109:26 - type of that state right here by saying
109:29 - that it'll have access to a file path of
109:32 - a type string or the entire thing will
109:35 - just be null at the start this is just
109:37 - to help typescript make sense of what it
109:38 - is and you can already see this choose
109:41 - file upload right below for the time
109:43 - being I will actually provide a class
109:45 - name of hidden to this upload because it
109:49 - doesn't look best let's be honest so for
109:52 - that reason I'll provide it a ref of ik
109:55 - upload ref which will allow us to then
109:57 - render a nicer version of that same
110:00 - component very soon it also needs two
110:02 - additional things which are going to be
110:04 - handlers for error and success so I'll
110:07 - say const on
110:09 - error will be equal to just an empty
110:12 - callback function for
110:13 - now and we need to do the same thing for
110:16 - on success so I'll just create it and
110:19 - rename it perfect and we can now pass
110:21 - them to this component by saying on
110:24 - error is equal to on error and on
110:28 - success is equal to on success finally
110:33 - we can also pass the file name and we
110:35 - can say something like test upload. PNG
110:38 - at least for now later on we can change
110:40 - that dynamically now given that we're
110:42 - providing that reference we can actually
110:44 - trigger the click on this upload but
110:47 - when a bit of a nicer looking component
110:48 - gets clicked that we can style properly
110:51 - so let's actually run the under a button
110:54 - and this button will have a class name
110:57 - equal to upload D
111:00 - BTN there we go it's looking similar to
111:03 - all of the other inputs within it we can
111:06 - render an image coming from next image
111:09 - with a source of Slash ions SL upload.
111:14 - SVG with an Al tag of upload
111:18 - icon with a width of about 20 a height
111:23 - of about 20 and a class name equal to
111:27 - object D contain so now we have a little
111:29 - upload icon and below it we can render a
111:33 - P tag that will say upload a
111:36 - file and we can style it a bit by giving
111:39 - it a class name of
111:41 - text-base and text- light 100 and right
111:45 - below it if we have successfully
111:47 - uploaded a file so if file exists then
111:51 - we can render a p tag with a class name
111:55 - equal to upload Das file name and within
111:58 - it we can render the file do file path
112:01 - for now we of course cannot see it but
112:03 - if it's there it would appear right here
112:05 - finally once it gets uploaded if it's
112:07 - there we can show it to the user by
112:09 - saying if file exists then render the
112:13 - ik image component this is actually a
112:17 - wrapper around the nextjs as image
112:19 - component so you can have all of the
112:21 - buil-in nextjs features as well as well
112:22 - it can accept things like the alt tag as
112:25 - all images do which can be equal to
112:27 - file. file path it can accept the path
112:30 - to the image equal to file. file path
112:33 - and a width of 500 as well as the height
112:36 - of 500 as well now of course we cannot
112:39 - see it yet because we haven't uploaded
112:40 - anything but later on we should be able
112:43 - to see the uploaded file so let me try
112:45 - to fill out this form by first filling
112:47 - in my email I'll do some password as
112:49 - well let's enter a full name we can
112:52 - enter some kind of a University ID and
112:54 - then you can upload a file and then we
112:56 - can upload a file by providing an
112:58 - onclick function to this button I'll say
113:01 - onclick is equal to a callback function
113:03 - where we get access to the click event I
113:06 - will run the e. prevent default to
113:08 - prevent the default behavior of the
113:10 - browser to reload on click and onclick
113:13 - I'll call the ik upload component to
113:15 - upload images by saying if ik upload ref
113:20 - exists or that current so if it has some
113:22 - kind of value in that case we can simply
113:25 - call ik upload ref.
113:29 - current question mark dot click so it's
113:32 - like we're clicking this above component
113:34 - right here but rather we're clicking a
113:36 - bit of a nicer looking button I think
113:37 - there's a typescript issue right here
113:39 - saying that click does not exist on type
113:41 - never for the time being I think we can
113:43 - just suppress this by using the DS
113:44 - ignore on the line above so now if you
113:47 - click right here to upload a file your
113:49 - users will be able to find their
113:51 - University ID and double click to upload
113:54 - it currently we're not seeing anything
113:56 - happen because once we click and start
113:58 - uploading the file now is the time to
114:00 - handle our on success and on error
114:03 - functionalities so let's do on success
114:05 - first we get a response of a type any
114:08 - and we can set file to be equal to the
114:10 - response that we're getting and we'll
114:12 - have to also modify the form values so
114:15 - we have to head back over to OD form and
114:19 - to this image upload component right
114:21 - here provide a prop of
114:25 - on file change is equal to field.on
114:30 - change in a similar way how we're
114:32 - changing these input fields we also have
114:34 - to change the image upload field so now
114:36 - we can get into it these structure it
114:38 - from props by getting the on file
114:41 - change and let typescript know that on
114:44 - file change is of a type callback
114:47 - function that accepts a file path of a
114:50 - type string and returns void means
114:53 - nothing so now on success on top of
114:57 - setting the current state of the file we
114:59 - can also set the on file change and set
115:02 - it to rest that file path and on error
115:05 - we can simply consol log that error by
115:07 - saying conso log we're going to get the
115:10 - error right here of a type any and we
115:13 - can just conso log it now of course
115:16 - users are not going to really notice
115:17 - those conso logs so it might be good to
115:19 - give them some kind of feedback on the
115:21 - screen like some kind of a toast at the
115:22 - bottom right so with that in mind we can
115:24 - quickly set up chatsi and toast
115:26 - component like this little popup that
115:28 - can appear by installing the chatsi and
115:31 - toast I'll add it right into the
115:33 - terminal say use Force sure go ahead and
115:37 - now we have to add that toaster
115:39 - component to our main layout so let's
115:42 - just copy its import that'll be under
115:44 - our first
115:46 - layout we can import it right here at
115:49 - the top and then we can add it right
115:51 - here I I think they do it below the main
115:54 - within the body so that's below HTML but
115:56 - within the body
115:58 - toaster perfect and now how do we use it
116:02 - well we just say use toast coming from
116:04 - hooks use toast and then we call it like
116:07 - this so let's do that by heading over to
116:09 - our image upload on success we'll do
116:12 - something like this Toast of course we
116:14 - have to import it right at the top so we
116:17 - can do that toast coming from hooks use
116:19 - toast and we won't say scheduled catch
116:22 - up rather we'll say something like image
116:24 - uploaded successfully and for the
116:26 - description we can say something like
116:29 - let's do Dynamic and then say rest. file
116:32 - path uploaded perfect I can also
116:36 - duplicate this and add it on error so if
116:39 - something goes wrong we can say image
116:42 - upload failed your image could not be
116:47 - uploaded please try again and the
116:50 - variant will be set to the instructive
116:53 - perfect let's go ahead and give it a
116:54 - shot I'll try to upload a new file I'll
116:57 - choose my University ID and it
116:59 - immediately appears right here at the
117:01 - bottom I think a driver's license should
117:03 - be fine with that in mind we have very
117:06 - easily integrated image kits image
117:08 - upload as well as image display
117:10 - properties now if you experienced an
117:12 - error while trying to show this image
117:14 - you might need to head over to next.
117:21 - config.sys another host name so that'll
117:23 - be protocol
117:25 - https and in this case the images will
117:28 - be coming from ik image kit. imagekit
117:31 - doio and we can leave the port as empty
117:35 - perfect and with that in mind our form
117:37 - has now successfully been completed not
117:40 - only can we import all of the
117:41 - information like here like the email
117:44 - password and more all of it is of course
117:46 - fully validated we can switch to
117:48 - different types of forms and we can
117:50 - upload our University ID card
117:52 - since most IDs have more width than they
117:54 - do height you can lower the height to
117:56 - about 300 so it looks better and then we
117:59 - can successfully upload and see the IDS
118:02 - before we go ahead and create our
118:03 - database and finally create our users
118:05 - within that database I want to show you
118:07 - how we can further optimize our images
118:10 - by heading over to our image kit
118:11 - dashboard head over to settings and
118:14 - under images you can see many different
118:16 - optimizations many of which have been
118:18 - pre-selected by default use the best
118:21 - format for image image delivery so it
118:23 - automatically selects it based on the
118:25 - image optimize image quality before
118:27 - delivery changes the image quality to
118:29 - reduce the image size without any visual
118:32 - difference you can leave it at about 80
118:34 - or you can decrease it much more and we
118:37 - can also do similar things with video as
118:39 - well as create different Transformations
118:41 - I'll show you how to use most of these
118:43 - later on with that in mind great work on
118:46 - completing the UI of the odd form in the
118:48 - next few lessons we'll focus on creating
118:51 - our own database and finally we'll
118:53 - connect the
118:56 - two this is the exciting part of the
118:58 - course let's create our serverless
119:00 - postgress database click the neon link
119:03 - down in the description to be able to
119:04 - follow along and see exactly what I'm
119:06 - seeing and go ahead and create a new
119:09 - account you can use whatever either
119:11 - Google or GitHub is totally fine in this
119:13 - case I'll proceed with Google and
119:15 - immediately you'll be redirected to the
119:17 - on boarding where you can get started
119:19 - with neon for free you can start by
119:20 - choosing your project name
119:22 - start with JSM uncore and then we can do
119:26 - university- library or feel free to
119:28 - choose your own name after that you can
119:30 - choose the database name as well I'll
119:32 - call it simply library and it also
119:34 - allows you to choose your cloud service
119:36 - provider as well as the region in my
119:38 - case I'll go with Europe but you can
119:40 - choose the region that is closest to you
119:42 - and click create project now the second
119:44 - step is interesting you can choose your
119:46 - own compute size which refers to the
119:48 - resources allocated for running the
119:50 - database server the vcp or virtual CPUs
119:53 - determines the number of virtual
119:55 - processors available for the database
119:57 - and memory just means Ram in this case
120:00 - I'll let my Autos scaling range from
120:02 - zero all the way to two in this case
120:04 - I'll just say use recommended and just
120:06 - like that we are redirected to our neon
120:08 - dashboard but before we go ahead and set
120:11 - it up I want to tell you a couple of
120:12 - reasons of why I decided to proceed with
120:14 - neon for setting up our postcourse
120:16 - database see neon allows you to run a
120:19 - serverless database meaning that every
120:22 - from setup to your servers autoscaling
120:24 - and much more is in a serverless
120:27 - environment without it you would have to
120:29 - do a hell of a lot of setup for creating
120:31 - servers using Cloud providers installing
120:33 - postgress there learning about
120:35 - permissions and roles and you would also
120:37 - have to give out your credit card before
120:39 - you can even understand how things work
120:41 - so if you have enough money to pay just
120:43 - to learn how to use postgress and you
120:46 - want to do everything on your own sure
120:48 - you can do that but if you're anyone
120:50 - like me who wants to share things faster
120:53 - while learning new things then together
120:55 - we can use neon postgress for free as
120:58 - you saw we were able to set up a whole
121:00 - project in a matter of seconds you can
121:02 - have 10 of those with half a gigabyte of
121:04 - storage and 190 computer hours and on
121:08 - top of that you also get a lot of
121:09 - additional features like autoscaling
121:12 - doing database branching like you're
121:14 - doing branching on git great apis
121:17 - authorization levels and more but with
121:19 - that in mind let's see how we can set
121:20 - all of this up go ahead and copy your
121:22 - post connection string go back to your
121:26 - env. looc and add your database URL
121:30 - right here perfect finally head over to
121:33 - our config and modify it to also include
121:37 - the database URL equal to process.
121:41 - env. database URL and now that all of
121:45 - that is set up in the next lesson we'll
121:47 - also hook it up with an omm known as
121:50 - drizzle
121:53 - what is an or object relational mapping
121:57 - tool allows you to make your app more
121:59 - scalable typically it slows your process
122:02 - down while you set it up but drizzle on
122:04 - the other hand is made to ship ship ship
122:07 - so as with neon I have a lot of reasons
122:10 - of why we're using it it's designed for
122:13 - modern typescript developers type safe
122:16 - clean and Incredibly easy to use it
122:19 - allows you to connect to any database
122:21 - has a pretty pretty cool Studio where
122:22 - you can explore and manipulate your data
122:24 - not within an ugly postgress admin
122:27 - interface and it is a developer favorite
122:29 - so let's set it up click the link down
122:31 - in the description and let's follow the
122:33 - tutorial for integrating drizzle with
122:36 - neon pogress we already have an existing
122:38 - xgs project so we can go ahead and
122:41 - install and set up drizzle orm and
122:43 - drizzle kit we can copy those two
122:46 - commands and paste them into the
122:48 - terminal mpmi dzm and mpmi D drizzle kit
122:53 - once those get installed we can also
122:55 - install the neon serverless driver and
122:57 - if we want to we can also have a package
122:59 - that helps us manage our envs but we
123:01 - have already created our EnV
123:03 - configuration and it says here in case
123:05 - you face the issues with resolving
123:07 - dependencies during installation if
123:08 - you're not using react native Force the
123:11 - installation with force or Legacy peps
123:14 - and now we have a couple of steps to set
123:16 - everything up log into neon console and
123:18 - create a new project and create a new
123:21 - project we've already done that I
123:23 - believe I called my database Library set
123:25 - up the connection string variable we
123:27 - have already done that as well and added
123:29 - it to our EnV local in the previous
123:32 - lesson finally we have to connect our
123:34 - jel orm to our database by creating a
123:37 - new drizzle. TS file so let's copy this
123:40 - code head back to our code and create a
123:43 - new folder in the road over application
123:45 - called
123:46 - database within database create a new
123:49 - file called drizzle.
123:52 - DS and within it you can paste the code
123:55 - that we copied we'll be getting the
123:56 - config object not from EnV but from add
123:59 - for/
124:01 - libconfig here are all of our
124:03 - environment variables and it is a
124:05 - default import so we can remove those
124:07 - curly braces then we import drizzle and
124:10 - then we can say something like
124:12 - this const SQL is equal to Neon which we
124:16 - can import from neon DB serverless
124:18 - database and to it we can pass the
124:20 - config
124:23 - env. database URL finally we export that
124:27 - database by calling drizzle and then we
124:29 - can set the client to be equal to this
124:32 - SQL database the next step is to declare
124:35 - schemas in this case drizzle is
124:37 - insulting us and telling us that we're
124:39 - building a to-do application but as you
124:41 - know we're building a University Library
124:43 - management system but still we'll take
124:45 - what they give us and then modify it so
124:47 - let's create a new file right here in
124:49 - the database and let's call it SK
124:53 - .ts and I'll paste the code that we
124:55 - copied but in our case it'll have to
124:58 - look a bit more advanced I'll keep this
125:00 - ID here but remove the other two
125:03 - properties and make the ID a bit more
125:06 - advanced check this out instead of using
125:08 - integer we'll be using uid which stands
125:12 - for a unique identifier and we'll give
125:15 - it a name of ID we can also specify that
125:18 - this property should not be null and
125:21 - that it will act as the primary key of
125:24 - the rows in the database also by default
125:28 - it'll have a random value so we can say
125:30 - default random and it has to be unique
125:34 - since it's a primary identifier or a
125:36 - primary key and we can import this uid
125:39 - coming right here from drizzle
125:41 - orm perfect and I think this shows you
125:44 - why we're using drizzle in the first
125:45 - place it makes it super simple to
125:48 - specify the architecture of your
125:49 - database very complex SQL databases for
125:53 - that matter in simple JavaScript code
125:55 - and you'll see later on once we migrate
125:57 - over to Native SQL commands of how much
126:00 - more complex it'll
126:01 - get for now let's continue by providing
126:05 - a full name it'll look something like
126:07 - this we can also say that this full name
126:10 - will be a VAR car this simply means that
126:13 - it's a list of
126:14 - characters and the name of that column
126:17 - will be foore name which is not null so
126:21 - why have I decided to use full uncore
126:23 - name which means that this is snake case
126:26 - and not regular camel case even though
126:29 - we use camel case in JavaScript most
126:31 - often when you're creating SQL databases
126:34 - you typically want to go for snake case
126:36 - meaning lowercase letters divided by the
126:38 - underscore separator great let's also
126:42 - import varar from the top and let's give
126:44 - it a maximum length of about 255
126:49 - characters great next let's let's move
126:51 - over to email which will be a type of
126:55 - text with the name of email which is not
126:58 - null and is unique we can also Define a
127:03 - University ID which will be an
127:08 - integer with a name of University ID and
127:12 - it will not be null and it also has to
127:15 - be unique after the University ID we can
127:18 - Define the password field which will be
127:21 - of a type text password and it must not
127:24 - be null we can also have a university
127:28 - card which will be a URL pointing to the
127:32 - image of the University card so we can
127:34 - have a text property of University card
127:37 - which is not null doesn't have to be
127:39 - unique and we can also have a status of
127:42 - that specific student and I just noticed
127:44 - right here we're not working with to-dos
127:46 - which is what be copied over from here
127:48 - we're working with the users within our
127:50 - database so let's rename this over to
127:52 - users and make it a PG table of users
127:56 - right here as well the status itself
127:59 - will actually be an enum so let's say
128:02 - export
128:04 - status uncore enum and an enum simply
128:08 - means an array of different strings that
128:10 - are possible answers to that status so
128:14 - the values that can be used we can
128:16 - declare it by saying PG enum like this
128:19 - which we can import from PG core and
128:22 - then to it we can Define the name which
128:24 - will be simply
128:25 - status and provide an array of different
128:28 - values such as pending approved or
128:31 - rejected we can also have another enum
128:34 - for the role of that user which we can
128:37 - export and call roll enum it'll follow
128:41 - the similar structure PG enum of roll
128:44 - and it'll be something like user or
128:48 - admin so to keep it simple let's have
128:50 - user
128:52 - and then admin all uppercase like this
128:55 - finally let's have one final enum not
128:57 - for users but for books so it can be
129:00 - borrow status enum which will be equal
129:03 - to PG enum of borrow status with an
129:06 - underscore in between with the values of
129:09 - let's keep it simple and just say
129:12 - something along the lines of
129:14 - borrowed or
129:17 - returned there we go so now we have
129:19 - three different enums which we exporting
129:22 - right here and of course we have to say
129:24 - export const and then the name of that
129:27 - enum perfect you can see prettyer
129:29 - automatically put it into new lines for
129:31 - me which is okay and finally we can now
129:33 - use that enum when declaring the user
129:36 - table so here we can say status is going
129:39 - to be equal to status
129:41 - enum which we call like this pass it the
129:44 - name of status and we can choose a
129:47 - default value for this enum by default
129:49 - the status will be set to depending we
129:52 - can then define the role of the user by
129:54 - saying Ro enum of the name role and
129:57 - choose the default value of user it
129:59 - might be useful to track the last
130:01 - activity date so I'll set that over to
130:05 - date and I'll call it last activity date
130:09 - which can default to now so we can
130:11 - Define it something like
130:13 - this default now of course we have to
130:17 - import date right here from PG
130:20 - core as it's another
130:22 - type and finally we can also have a
130:25 - created ad property so we can know when
130:28 - the user joined and that'll be equal to
130:30 - a timestamp coming from PG core and
130:34 - it'll be called created
130:36 - at and we're going to say with time zone
130:39 - will be applied to true and we can
130:42 - default it to
130:43 - default
130:46 - now perfect so this is the structure of
130:50 - how our us users are going to look like
130:52 - in our
130:53 - database we have defined all of it using
130:56 - drizzle so what is the next step well as
130:59 - you can see right here in the docs they
131:01 - say that the next step is to set up the
131:03 - drizzle configuration it is a file used
131:06 - by drizzle that contains all the
131:08 - information about your database
131:09 - connection migration folder more on that
131:12 - soon and schema files so let's create a
131:15 - new drizzle.
131:20 - config.sys outside of everything and
131:23 - I'll call it jizzel DOC
131:36 - config.sys more carefully so let's
131:38 - actually open up a new terminal window
131:41 - and run
131:43 - mpmi EnV and if you face any kind of
131:45 - issues when installing some dependencies
131:47 - like it happened in this case looks like
131:49 - my esin has been bugging me simply add
131:52 - the-- Legacy Pier depths after the
131:54 - installation command so it's going to
131:56 - look something like this npmi EnV --
132:00 - Legacy - beer- deps and it'll install it
132:03 - right off the bat now that we've
132:05 - installed the EnV package and we're
132:07 - getting the defined config from jizel
132:09 - kit we have to set up our configuration
132:11 - path currently by default it is set to
132:14 - EnV but as you might know we have stored
132:18 - our environment variables within a EnV
132:21 - local file so simply add the local right
132:25 - here so it points to the right place
132:28 - after that we have to Define where our
132:30 - schema is located it is not under Source
132:33 - DP schema TS it is actually
132:36 - under
132:37 - database schema.
132:40 - TS the out folder is where our
132:42 - migrations will go you'll see how that
132:44 - looks like soon and then we have to
132:46 - choose the dialect of our database
132:48 - language in this case it is postgress
132:50 - and we have to add our DB credentials in
132:53 - this case they're coming from process.
132:55 - env. database URL so it looks like we're
132:58 - good with the step five so what's going
133:01 - to happen once we try to run the
133:03 - commands listed in Step six it says you
133:07 - can generate migrations using drizzle
133:09 - kit generate command and then run them
133:11 - using drizzle kit migrate the concepts
133:14 - of generate and migr are very important
133:16 - database Concepts which drle didn't
133:19 - invent they have existed for a long time
133:21 - time on many different
133:23 - ORS and once I actually run these
133:26 - commands you'll see exactly what they do
133:28 - you'll see their visual representation
133:31 - so let's go ahead and generate those
133:32 - migrations by copying the MPX jle kid
133:36 - generate command and pasting it into our
133:38 - terminal this will very quickly create a
133:40 - new SQL migration under the migrations
133:43 - folder right here and there we go create
133:47 - table users uu ID primary key default
133:51 - gen random uid what is this syntax well
133:54 - it's definitely not JavaScript in fact
133:57 - if you check out the file name you can
133:59 - see that the extension ends with SQL so
134:02 - this is native SQL code that's necessary
134:05 - to update our database schema and it got
134:07 - generated based off of our plain
134:10 - JavaScript code which looks a lot like
134:12 - using Zod which means that it is
134:15 - familiar simple and quick now does this
134:18 - mean that you should not learn SQL as a
134:21 - full stack or backend developer not at
134:23 - all learning it will definitely be of
134:26 - great help but using drizzle to quickly
134:28 - spin up databases and projects will save
134:31 - you so much time so alongside this SQL
134:34 - file drizzle also generated a meta
134:37 - folder that contains a snapshot of the
134:39 - database at that specific point in time
134:41 - the next thing we have to do is run the
134:43 - migration so let's copy this command and
134:46 - paste it into the terminal MPX drizzle
134:49 - kit migrate and there we we go even
134:51 - though there's a warning right here you
134:53 - don't have to worry the migration ran
134:56 - successfully and if something went wrong
134:58 - it is mostly a problem with your schema
135:01 - so please make sure that it is exactly
135:03 - like this with all of the enums exports
135:05 - and more and then you can try to
135:07 - regenerate and remigrate if that fails
135:10 - to you might want to create a new neon
135:12 - project just like I did and then you can
135:14 - use it within your envs hopefully that
135:16 - should help with any potential problems
135:19 - but as you can see in my case everything
135:21 - went smoothly on the first run so what
135:23 - did the migr command do well it applied
135:25 - all the changes like new tables columns
135:28 - or relationships and these are the
135:30 - commands that you'll have to use quite
135:32 - often when using drizzle remember you
135:34 - have to create schemas then generate
135:37 - respective SQL commands using drizzle
135:39 - generate and then apply those commands
135:41 - to changes to the database using drizzle
135:43 - migrate so if you want me to do a
135:45 - detailed video just on how drizzle works
135:47 - in the future let me know down in the
135:49 - comments and I'll do that but running
135:51 - these commands every single time is a
135:53 - bit of a pain so instead of manually
135:56 - typing it out and trying to remember it
135:58 - we can head over to our package.json and
136:01 - modify the scripts to run these commands
136:03 - for us so right here we can say DB
136:07 - generate will run the MPX drizzle kit
136:12 - generate after that we can do something
136:15 - like DB
136:17 - migrate which can run MPX drizzle kit
136:20 - kit migrate and finally we can also run
136:24 - the DB Studio which will open up the
136:28 - drizzle kit Studio that'll look
136:31 - something like this so far we have
136:33 - tested these two but we still haven't
136:35 - yet tested out the studio so let me
136:37 - actually show you how that works I'll
136:39 - head over to my terminal and run mpm run
136:43 - DB Studio it says drizzle studio is up
136:46 - and running on local. drizzle. studio so
136:49 - let's actually open it up and it just
136:51 - opened up in my browser I'll expand it
136:53 - so you can see it in the full View and
136:54 - there we
136:55 - go think of this as your modern SQL
136:58 - database interface where you can run
137:01 - different SQL commands to query the data
137:03 - from the database check out all the rows
137:06 - and columns and Records even manually
137:09 - add some data or alter the tables drop
137:12 - them and do so much more pretty cool
137:15 - right all of it running locally within
137:17 - your browser in a modern interface of
137:19 - course there is so much more that you
137:21 - can do and explaining all of the
137:22 - features would require a separate video
137:24 - on drizzle so as I said if you want me
137:26 - to do that I'll gladly do it just let me
137:28 - know down in the comments but for the
137:30 - time being to test out the connection
137:32 - between our database and between our
137:34 - application let's add a simple user I'll
137:36 - go ahead and add a record of full name I
137:39 - can do something like Adrian JS Mastery
137:42 - right here email can be something like
137:44 - contact JS
137:47 - mastery. proo University ID has to be
137:50 - unique password University card what
137:53 - else do we have status role last
137:56 - activity created ad can all be default
137:58 - so let's actually fill in the email
138:00 - that's going to be contact jm.pro as
138:05 - well as the University ID I think you
138:06 - have to press enter once you actually
138:08 - save it and let's try to save this
138:12 - record and there we go we now have one
138:15 - real record within our database so let's
138:18 - head back over to our homepage that's
138:20 - going to be page root DSX and let's try
138:23 - to fetch that user because doing it is
138:26 - super simple I'll turn this into a
138:29 - regular function that has a return block
138:32 - that'll look something like this and
138:35 - then right here at the top we can say
138:37 - const result is equal to a weight of
138:40 - course we have to make this an async
138:42 - function if we want to use a weight DB
138:45 - coming from at database SL drizzle.
138:49 - select.
138:51 - from and here we can select from users
138:55 - users will actually be a schema coming
138:57 - from database schema super simple right
139:00 - give me all the users and then we can
139:03 - console.log json.stringify
139:07 - result and then pass in null and two to
139:10 - create some more space in between the
139:12 - results even though right now it'll be
139:13 - only a single result so if we get
139:16 - something in the console it means we
139:17 - have successfully established a
139:19 - connection with database so back on the
139:21 - homepage I'll reload and would you look
139:25 - at that we get back one user with its
139:28 - uniquely generated ID activity date and
139:30 - created ad as well as some default enums
139:33 - for the status and role University card
139:36 - ID password email and even full name it
139:39 - is all here and we're fetching it
139:41 - directly from the database Isn't that
139:44 - cool in this lesson you just learned how
139:47 - to set up a serverless postgress
139:49 - database yep that's right you've done
139:52 - everything from creating different
139:54 - schemas for the user table to then
139:56 - running the migrate and generate
139:58 - commands which created an SQL
140:00 - counterpart that postgress can actually
140:02 - read to create a real database then we
140:06 - have added those commands right here in
140:08 - the package.json so we can more easily
140:10 - call them in the future whenever we
140:12 - decide to change our schemas and finally
140:15 - we explored drizzle super convenient
140:17 - Studio that allows us to modify the
140:19 - database in real time which we did by
140:21 - adding an additional record then I
140:23 - showed you just how simple it is to
140:26 - fetch the data from that new postar
140:28 - database that we've created all it took
140:30 - was a single line of course setting up
140:32 - databases especially SQL databases
140:35 - typically takes a long time and you get
140:37 - an interface that doesn't really look
140:39 - like this it's clunky and old and the
140:41 - only reason why we're able to set this
140:43 - up so quickly and so conveniently is
140:46 - because we use neon neon spun up a
140:48 - serverless instance of her post database
140:51 - gave us a connection string and that's
140:53 - it you can also track a lot of
140:55 - additional stats right here and even
140:57 - check the database right here with a
140:59 - neon as well you can see this looks very
141:02 - similar to what we saw in drizzle Studio
141:05 - there's also an overview and one of
141:07 - neon's best and unique features is their
141:10 - branching allowing it to create g-like
141:12 - branches for different instances of your
141:15 - database you can simply give it a branch
141:17 - name give it your parent branch and
141:19 - choose which data you want to include
141:21 - you can include all the data up to this
141:23 - point or just some specific logs or
141:25 - dates and times and that said you have
141:27 - another version of your database right
141:29 - here right now and let me know in the
141:32 - comments down below if you'd like me to
141:33 - see do more full stack projects using
141:36 - SQL databases such as postgress with
141:39 - neon over something like mongodb I found
141:42 - it to be super fast to spin up new
141:44 - projects and I'd love to do many more
141:46 - using it with that in mind we have
141:48 - successfully built out the homepage as
141:50 - well as o pages of our project let's not
141:53 - forget we have also hooked up a real
141:55 - database and created a user schema so
141:58 - naturally that leads us to The Next Step
142:01 - which is to hook up the existing UI of
142:03 - the oth with the user schema in our
142:05 - database so we can actually create new
142:08 - users and onboard them to our app so
142:11 - let's do that
142:13 - next let's set up authentication since
142:16 - this is a production ready application
142:18 - we'll use the best free and open source
142:21 - off OJs so simply head over to their
142:24 - getting started guide and move over to
142:26 - installation with nextjs and let's go
142:29 - ahead and follow the steps we can run
142:31 - mpm install and then copy the rest of
142:33 - the command I'll do it right here in my
142:35 - second terminal oh we'll need a third
142:38 - one because we are running both the
142:39 - drizzle Studio as well as our
142:41 - application before running this command
142:44 - also add another package which we
142:45 - installed and that's going to be bcrypt
142:48 - JS also for some reason in this project
142:50 - I have some issues with es lend so I
142:53 - have to add-- Legacy Das beer- deps you
142:57 - might not need to do that if it throws
142:59 - an error then you can but other than
143:01 - that you can just run mpm install and
143:03 - let's wait for those two packages to get
143:06 - installed now while they are getting
143:08 - installed I want to explain a bit about
143:10 - how we can configure OJs there are two
143:13 - different ways off configuring it one is
143:16 - with something known as adapters if I
143:19 - expand the list of adapters right here
143:21 - you'll see that it includes everything
143:22 - from drizzle to different types of
143:24 - databases like mongodb postgress and
143:27 - even up stach redis which we'll explore
143:29 - in more detail soon an adapter in next o
143:32 - basically connects your application to
143:33 - whatever database or backend system you
143:35 - want to use to store your data for user
143:38 - accounts and sessions in our case we
143:40 - could use drizzle because we're using it
143:42 - as our orm of choice with these adapters
143:45 - we have automatic database handling and
143:47 - type safety ideal for standardized and
143:50 - low maintenance approach but if you
143:53 - decide to go without an adapter it's
143:55 - definitely more flexible but it requires
143:58 - custom coding for the entire
144:00 - authentication logic but it allows for
144:02 - more straightforward database calls to
144:04 - store users and do other things to be
144:07 - able to make a decision of which route
144:09 - you're going to go it's important to
144:10 - consider your project requirements in
144:12 - our case we have just a very simple
144:14 - email and password mechanism with no
144:17 - social odds like Google or GitHub and
144:19 - more so in this case we can go without
144:21 - using an adapter since the user will
144:23 - only have one account not multiple
144:25 - accounts but if you're interested in
144:27 - learning how you can manage multiple
144:29 - user accounts like emails passwords
144:31 - Google GitHub and more check out my
144:34 - ultimate nextjs course where I teach all
144:37 - of these things in detail I even
144:38 - remember creating dedicated diagrams to
144:41 - explain the entire authentication flow
144:43 - you can see how many lessons there are
144:45 - and then we go into authentication 2 for
144:48 - social off accounts and then finally
144:50 - email and password authentication
144:52 - there's a lot but you don't need to know
144:54 - any of that for this course so back in
144:57 - our terminal you can see that our
144:58 - packages successfully got installed so
145:00 - let's go ahead and create a new file
145:02 - called O.S in the root of our project
145:06 - within here we can set up the
145:07 - credentials provider but just before we
145:09 - set it up let's actually follow the
145:11 - steps outlined in the installation
145:13 - process where we have to run MPX off
145:16 - secret to create a mandatory environment
145:18 - variable it'll looks something like this
145:21 - immediately if you head over to your
145:23 - env. loal you'll be able to see a new
145:26 - odd secret right here now that we have
145:28 - that we are ready to configure the odgs
145:31 - file and object where we control the
145:33 - behavior of the library and specify
145:35 - custom authentication logic or choose
145:39 - adapters create a new odds file which is
145:42 - what we have already done and then get
145:44 - started quickly by pasting the following
145:47 - contents import next OD we get a lot of
145:51 - things out of it like the signin
145:52 - functionality sign out off and more and
145:55 - we can choose which providers to add
145:57 - before we get started with the second
145:58 - part of Step number
146:00 - three which is adding a new route
146:03 - Handler let's actually go ahead and set
146:04 - up our custom authentication logic right
146:07 - here within the next o config first
146:10 - things first I'll say that we will
146:11 - manage the session using a
146:14 - strategy known as JWT meaning Json web
146:18 - tokens then under providers we can
146:21 - provide a credentials provider which
146:24 - will look something like this you can
146:26 - import this credentials provider right
146:28 - here at the top by saying import
146:31 - credentials provider coming from next- o
146:36 - SL providers SL credentials then once
146:40 - you call it you can pass an object into
146:42 - it which acts as the
146:44 - configuration within there you can
146:46 - Define some methods you can call such as
146:49 - an asyn function of
146:52 - authorize which takes in the
146:55 - credentials and then we can do whatever
146:57 - we want with those credentials first
146:59 - things first we want to check if there
147:01 - is no credentials question mark. email
147:05 - or no credentials question mark.
147:08 - password we simply want to return null
147:11 - meaning there's nothing there but if we
147:14 - do have an email or password we are
147:16 - ready to try to fetch the user from the
147:18 - database by saying const user is equal
147:20 - to await
147:23 - DB coming from database drizzle do
147:26 - select so we want to select from where
147:29 - from users this users can simply point
147:31 - to the schema of users where EQ which
147:35 - means equal coming from drizzle orm
147:38 - email is equal to credentials. email. to
147:43 - string so we're checking whether the
147:44 - email field matches or specifically this
147:47 - should be the users. email
147:50 - if the user's email matches then we want
147:53 - to return that user and we're going to
147:55 - limit it only to one because there can
147:57 - be only one user with that specific
147:59 - email if this query returns nothing
148:02 - meaning if user. length is triple equal
148:05 - to zero then we can return null else we
148:09 - can check the validity of the password
148:11 - by saying const is password
148:14 - valid and that'll be equal to a wait
148:18 - compare credentials
148:21 - password.
148:23 - twring with the user zero meaning the
148:27 - first user we fetch do
148:29 - password so we're comparing those two
148:32 - and the compare function is actually
148:34 - coming from the package we installed
148:35 - after installing nextto and that's going
148:38 - to be bcrypt so import compare from
148:42 - bcrypt JS it looks like we also have to
148:45 - install the types for the bcjs package
148:48 - so let's copy this error message
148:51 - head over to the terminal and say mpmi
148:54 - D- save-dev bcrypt JS if you do that the
148:58 - error will be gone great so now that
149:01 - we're checking for the validity of the
149:02 - password if the password is not valid we
149:05 - can simply return n once again but if we
149:08 - have successfully passed all of these
149:09 - checks we can return an object
149:13 - containing the ID which is going to be
149:14 - equal to user z. id. TW string
149:20 - we're going to also pass the email equal
149:22 - to
149:24 - user0 doil and the name of the user
149:27 - which is going to be equal to user z.
149:30 - full name make sure it is full name like
149:34 - this even though the field in the
149:35 - database looks like this full uncore
149:38 - name here we're declaring it with
149:40 - regular full name in typical JavaScript
149:43 - camel case format and we can say that
149:45 - this is as user coming from types. D.S
149:50 - saying that this will follow the
149:51 - structure of the user but it will not be
149:54 - a user coming from our types it'll
149:56 - actually be a user coming from next off
149:59 - so let's import it right at the top we
150:01 - can do that by adding a comma right here
150:03 - and then getting access to the user type
150:05 - from next off which has the ID name
150:09 - email and image great with that in mind
150:12 - our authorized method under the
150:14 - credentials provider is now complete so
150:17 - we can exit the provids array and we can
150:20 - find the pages where we'll be doing the
150:22 - off the sign in page will simply look
150:26 - like this SL sign- in and we also need
150:29 - to define the callbacks within callbacks
150:32 - we can have an async JWT function that
150:35 - accepts a token and a user and it'll
150:38 - check if a user exists then set the
150:41 - token ID to be equal to the user ID and
150:44 - set the token. name to be equal to
150:47 - user.name once you have set those values
150:51 - return the modified token alongside this
150:53 - async JWT we can also create an async
150:56 - session function which accepts a session
150:59 - and a token and then if a session exists
151:03 - so if session. user then we can set the
151:06 - session. user. ID to token
151:09 - ID as string just for typescript to be
151:13 - safe as string here as well and set the
151:16 - session. user.name to token. name
151:20 - finally we can return the session we do
151:23 - this to populate the token as well as
151:25 - the session with the currently logged in
151:28 - user yes there is some manual work you
151:29 - have to do if you don't use an adapter
151:32 - but you have more flexibility with that
151:34 - in mind we have now completed the first
151:36 - part of the third step and now we have
151:38 - to create a route Handler we can do that
151:41 - by heading over to our app API o and
151:45 - then next to image kit we'll also create
151:47 - a new folder and I'll call it o within o
151:51 - we need to create a file called square
151:54 - brackets dot dot dot next o square
151:57 - brackets so let's create a new folder
152:00 - with that name and then within that
152:02 - folder let's create another file called
152:04 - route. DS just following the docs here
152:08 - and then within it you can copy and
152:09 - paste the code provided to you from the
152:12 - documentation after that we can add the
152:14 - optional middleware so let's do that by
152:17 - creating a new file in the root of our
152:19 - application called
152:22 - middleware
152:25 - DS and to it you can copy and paste this
152:29 - line finally we need to set up
152:31 - authentication methods with different
152:33 - providers in this case we won't be using
152:35 - any providers or rather we'll be using
152:37 - just one provider and that is the
152:39 - credentials provider meaning email and
152:41 - password login which we have just set up
152:44 - so now that we're done with this
152:45 - installation guide let's actually create
152:48 - a server action for signing up our users
152:50 - we can do that by heading over into lib
152:53 - and create a new folder called
152:56 - actions and within actions create a new
152:59 - file called off. DS within this and
153:03 - other server actions file in nextjs
153:06 - there is one first very important thing
153:09 - you have to do and that is add the use
153:12 - server directive at the top the used
153:15 - server directive tells this file and the
153:18 - rest of the code that whatever function
153:20 - you have here like const sign up is
153:25 - equal to an async arrow function will
153:28 - only be called on the server side not
153:31 - the client side and this is important
153:33 - because whenever you're making database
153:34 - call or database mutations those calls
153:37 - have to be very
153:39 - secure so not all of these environment
153:42 - variables can be accessed from the
153:44 - client side like the image kit private
153:46 - key or your database URL those are for
153:49 - server eyes only right here into this
153:52 - function we are accepting params and
153:55 - those params can be of a type O
153:58 - credentials and we can add those o
154:00 - credentials right within our types. D.S
154:04 - below the book by defining a new
154:07 - interface called o credentials and then
154:10 - defining the fields that it'll have
154:12 - it'll of course have a full name of a
154:14 - typ string an email of a type string a
154:18 - password of a type string string and a
154:21 - University ID of a type number as well
154:24 - as a university
154:26 - card which will be of a type string as
154:29 - it'll be a URL to an uploaded
154:32 - image so now we're accepting it right
154:35 - here and let's put it to use by
154:37 - destructuring all of those values by
154:39 - saying const full name email
154:45 - University ID password and University
154:50 - card and those are going to be equal to
154:53 - params now let's try to fetch an
154:55 - existing user if one was created already
154:59 - we can do that by saying cons existing
155:02 - user is equal to await
155:05 - DB coming from database drizzle do
155:08 - select from users where EQ meaning equal
155:14 - users. email is equal to the email that
155:17 - we're checking for right now and this EQ
155:20 - is coming from drizzle orm so at the top
155:23 - let's say import EQ from drizzle dasm
155:28 - and we're going to limit it to one user
155:31 - perfect now if an existing user. length
155:34 - is greater than zero it means that it
155:36 - already exists so we can either throw an
155:39 - error or just return an object that says
155:42 - success is false and error saying
155:46 - something like user already exists but
155:49 - if a use user doesn't already exist we
155:51 - can hash the new user's password by
155:53 - saying const hashed password is equal to
155:57 - a weit hash coming from bcrypt JS to
156:02 - which we can pass the password and then
156:04 - something known as salt which is the
156:06 - complexity upon which it'll be hashed
156:09 - then we can open up a try and catch
156:11 - Block in the catch we get access to an
156:14 - error and we can simply console that
156:16 - error or console log that error
156:20 - and we can say something like sign up
156:22 - error right here and return an object
156:26 - saying success is false sign up error
156:30 - but in the try we can try to create a
156:32 - new user and let me show you how simple
156:34 - that is you can just say await db.
156:37 - insert into users the values and then
156:41 - Define the values you want to insert
156:43 - such as a full name email University ID
156:47 - password equal to a hash password and
156:50 - the university card and I just noticed I
156:52 - have a typo right here with the password
156:54 - webstorm also let me know that so this
156:56 - was supposed to be password right here
157:00 - and here and that's it that's how you
157:03 - create users and later on upon
157:06 - registration we can also automatically
157:08 - sign in on the behalf of the new user so
157:11 - they don't have to provide their email
157:12 - and password again on the signin screen
157:15 - by doing something like a wait sign in
157:18 - with credential
157:20 - and then pass in the email and the
157:22 - password this sign in with credentials
157:24 - is a function that we are yet to create
157:27 - once we implement the signin server
157:29 - action and finally after that we can
157:32 - return a success of true perfect so
157:37 - while we're here let's actually create
157:39 - that function for signing in I will
157:41 - uncomment it here and create it right
157:44 - above by saying const sign in with
157:49 - credentials is equal to an async
157:51 - function that accepts params but it
157:54 - doesn't accept all params so here I
157:56 - actually want to teach you an advanced
157:58 - typescript thing where you can still say
158:01 - that it'll be all credentials but then
158:04 - you can apply a pick parameter and then
158:07 - pick only some of the types that will be
158:09 - there in this case it'll be
158:11 - email as well as password because it is
158:14 - sign in and not sign up so let's
158:17 - destructure those values by saying con
158:20 - email and password is equal to params
158:23 - and we can open up a try and catch
158:25 - Block in the catch we'll do the same
158:28 - thing as before conso log sign in error
158:31 - success fals sign in error but in the
158:34 - try we will simply sign our user in and
158:37 - once again next off or OJs makes it
158:40 - super simple to do that by saying const
158:43 - result is equal to
158:46 - await sign in and this is coming from
158:50 - add SLO to which we need to say that we
158:54 - want to sign in using the credentials
158:56 - method and then pass in the email the
159:00 - password as well as the redirect set to
159:03 - false finally if result question mark.
159:08 - error is true meaning if error exists we
159:10 - can return false and then pass in the
159:13 - error else if we do everything
159:15 - successfully we can return success of
159:18 - true so we can now collapse this
159:20 - function let's not forget to export both
159:23 - of these so export cons sign in with
159:26 - credentials as well as export con sign
159:28 - up and let's head over into our signin
159:31 - page that is this one right here under
159:34 - app o sign in here we have to pass the
159:37 - function we just created which will
159:39 - happen on form submit simply put it'll
159:41 - be sign in with credentials and let's
159:46 - not forget to head over to our sign up
159:48 - page as well that'll look something like
159:52 - this and here we can simply call sign up
159:55 - coming from lib actions o now we'll have
159:59 - to head over into the O form. TSX and
160:03 - modify it to implement the toast
160:05 - functionality we already used the toast
160:07 - component on image upload now we're
160:09 - going to use it here as well to let the
160:10 - user know whether they have successfully
160:12 - or unsuccessfully signed in or signed up
160:16 - so let's head over into the handle
160:17 - submit function and here we can submit
160:20 - the data by saying const result is equal
160:22 - to await on submit and then pass the
160:26 - data that we got from the form and if
160:28 - the result is a success then we simply
160:31 - want to display a toast with a title of
160:35 - success as well as a description of if
160:39 - is sign in then we can do you have
160:42 - successfully signed in or we can do
160:44 - something like you have successfully
160:46 - signed up so it'll look something like
160:48 - that and Fin finally after signing the
160:50 - user in we want to use the router
160:51 - functionality so right here we can say
160:54 - const router is equal to use router and
160:57 - then we can say router.
161:00 - push and push over to the homepage
161:03 - because we have signed in successfully
161:05 - and don't forget to import the toast
161:07 - coming from add SL hooks use- toast and
161:12 - don't forget to import the used router
161:15 - coming from next navigation okay that's
161:18 - good and in case something fails we can
161:21 - add an else and then present a user with
161:24 - a
161:26 - toast that'll have a title of error if
161:29 - we're signing in so if is sign
161:33 - in in that case we'll say error signing
161:36 - in else error signing up and for the
161:39 - description we'll simply put the result.
161:41 - error and a variant will be set to
161:45 - destructive great and there's one very
161:48 - very important thing we need need to do
161:49 - before we can test all of this out and
161:52 - that is to head within our primary
161:53 - layout within the app folder Yep this
161:56 - one right here where we added the toast
161:58 - and we have to wrap it with something
162:00 - known as a session provider this is
162:02 - given to us by next o so let's wrap it
162:06 - properly just the body and you can see
162:09 - it is coming from next o react and to it
162:12 - we have to provide a session equal to
162:16 - session now where do we get this session
162:18 - from once again it is super convenient
162:21 - we just say concession is equal to await
162:25 - o and this o is actually coming from the
162:28 - O
162:29 - file next o does everything for us let's
162:33 - not forget to wrap it into a sync since
162:35 - we're using a wait the error is gone and
162:38 - we are ready to test it out I got to go
162:41 - full screen for this first let's create
162:44 - our library account for that we'll also
162:46 - need a University ID so somewhere on the
162:48 - figure design down below you can find
162:50 - this nice looking card and if you copy
162:52 - this entire figma design to your own
162:54 - repo you should also be able to modify
162:56 - it by double clicking on specific words
162:59 - and then changing it right here of
163:00 - course if you have that font if not you
163:02 - can change the font as well once you're
163:04 - there simply select it scroll down right
163:06 - here and Export it as PNG then you can
163:09 - head back and upload it right here there
163:11 - we go that is looking credible so now I
163:15 - can also enter my email I'll enter my
163:17 - password for full name and my University
163:20 - ID you can think of whatever what
163:23 - matters more is the University card and
163:25 - before I actually create this account I
163:27 - want to head back over to our drizzle
163:29 - studio and remove the current user that
163:31 - we have here we don't need it anymore so
163:34 - with all this in mind let's go ahead and
163:36 - click sign up and just like that we got
163:38 - redirected to the homepage and there was
163:40 - some kind of a toast right here to the
163:42 - bottom right but it didn't look that
163:44 - good it looked like it was missing some
163:46 - Styles we'll look into that soon but
163:49 - what matters more for now is that we
163:50 - actually got redirected back to homepage
163:54 - now what would happen if I try to
163:56 - reload okay we're still on the homepage
163:59 - what if I manually head over to sign in
164:03 - oh we can visit the signin which
164:05 - typically means that we're not logged in
164:07 - right if you can go to the signin page
164:09 - if you're signed in you should never be
164:10 - able to see the odd page so to achieve
164:13 - that we can add redirects head over to
164:16 - your layout. TSX within o and just look
164:21 - for the active user session by saying
164:23 - const session is equal to await
164:28 - o and then if there is an active session
164:31 - simply
164:33 - redirect this is coming from next
164:35 - navigation to forward slash meaning
164:38 - homepage we also have to turn this into
164:40 - an async function and we'll also add
164:42 - this redirect over to our other layout
164:45 - right here within the root but here
164:48 - it'll actually be the other way
164:50 - around I'll say try to get the currently
164:53 - active
164:54 - session and then if there is no session
164:57 - redirect over
164:59 - tosign in because we want our users to
165:02 - be signed in first in this case if I
165:05 - reload you can see I stay on the
165:07 - homepage which means that we're
165:09 - successfully logged in and there is an
165:11 - active session for this user but let's
165:13 - also indicate that there's an active
165:15 - session in another way maybe by showing
165:18 - the user Avatar if the user is logged in
165:20 - right here at the top right I'll do that
165:23 - right here within the header component
165:25 - by simply heading right here below the
165:27 - library link and adding a new Li that's
165:31 - actually a link with an HF of my profile
165:35 - which means we'll have a my profile page
165:36 - too and then within here we can render a
165:39 - shaten avatar component which is an
165:41 - image element with a fullback for
165:43 - representing the user we can install it
165:46 - very simply by running MPA shat and at
165:49 - latest add Avatar and we'll have to add
165:52 - the Legacy Pier depths and once it gets
165:56 - installed we can simply import it right
165:58 - here at the top and then use it like
166:01 - they say right here it looks like it
166:03 - didn't get installed properly so I'll
166:06 - just rerun MPX shatan latest at Avatar
166:09 - one more time without the flag oh and
166:12 - then it's going to manually ask me if I
166:13 - want to apply that flag so I'll say yes
166:16 - which will install the dependency and
166:18 - the immediately you can see this Avatar
166:20 - right here at the top right now we have
166:22 - to get full user data right here into
166:25 - this Avatar component and we can do that
166:28 - by heading over to where we're calling
166:29 - the header
166:31 - component and I think that's in the root
166:33 - layout so let's head over into the root
166:36 - layout and here we're calling the header
166:38 - so the only thing we have to do is
166:40 - simply pass the session into this header
166:43 - then in the header we can accept it by
166:46 - saying session of a type
166:49 - session of
166:52 - session coming from next odd and then we
166:55 - can simply render that users credentials
166:58 - in this case we don't have an image so I
167:00 - can remove this Avatar
167:02 - image as we don't need it and instead I
167:05 - can render the Avatar fullback which
167:07 - will be session question mark. user
167:10 - question mark. name right now we cannot
167:12 - really see it as it's dark on dark but
167:15 - we can give it a class name of text-
167:18 - white and it looks like the text is too
167:20 - long to fit into this small circle so to
167:23 - fix it we'll actually have to just get
167:25 - the credentials of the full name we can
167:27 - do that easily by creating a new utility
167:30 - function let's say export const get
167:34 - initials is equal to a function that
167:37 - takes in a name of a type string and
167:39 - it'll also just return a string but
167:42 - it'll be a modified string which only
167:44 - contains the initials we can do it in
167:46 - line by saying name that split
167:49 - map each word get only the first
167:52 - character of each word join those words
167:56 - and make them uppercase and then slice
167:58 - them to only two characters so I can say
168:01 - do slice 02 in case some names are a bit
168:05 - longer now we can head back here and we
168:07 - can call this get initials function and
168:10 - pass the full name into it and
168:12 - typescript is complaining since we're
168:14 - not certain that the name will be there
168:16 - so if the name is not there we can just
168:17 - provide High n for initials maybe but in
168:21 - this case you can see I got a and then
168:23 - straight line as I typed Adrian JS
168:25 - Mastery for you it should be your
168:27 - initials and to match it with the design
168:29 - we could also maybe change the color of
168:31 - the background instead of changing the
168:33 - text color I'll do that by changing the
168:35 - color to something like BG let's do
168:38 - amber 100 I think this is a nice color
168:41 - and there we go now it's popping up a
168:43 - lot more in case you want to do
168:45 - something else you could also type in
168:46 - your first name here so that's going to
168:48 - go outside of the Avatar like it's on
168:50 - the design but I actually don't think
168:52 - it's needed just keeping the Avatar
168:54 - Photo is looking good and to finalize
168:56 - the entire authentication flow we need a
168:59 - log out function that way our users will
169:01 - be able to log out and we'll be able to
169:03 - test out the entire authentication
169:05 - functionality once again to do that
169:07 - let's actually implement the page that
169:09 - we can get to when the user clicks on
169:11 - their Avatar Photo that's the my profile
169:14 - page so we can add it right here within
169:18 - root create a new folder call it my
169:22 - profile and then within it create a new
169:25 - page.
169:27 - TSX run rce immediately you should be
169:31 - able to see an empty page appear and
169:33 - there we can renter an empty react
169:36 - fragment that'll include a form this
169:39 - form will include only one button
169:41 - that'll say log out now to keep this
169:44 - page server rendered we can actually
169:46 - utilize next js's and react act new
169:49 - server forms by passing an action into
169:53 - this form and declaring it like this
169:55 - async callback
169:57 - function and then giving it the use
170:00 - server directive right here at the top
170:02 - this will be called directly on the
170:03 - server even though it's a click an
170:06 - onclick Handler pretty cool
170:08 - right so here we can await sign out
170:12 - functionality coming from at SLO let's
170:16 - also give it a class name equal to
170:19 - margin bottom of 10 and below this form
170:21 - we can render a book
170:23 - list we can pass a title of something
170:26 - like borrowed books and then for books
170:28 - we can render all of our sample books
170:30 - for now these sample books are coming
170:33 - from constants but later on we'll be
170:35 - able to fill this in with the real books
170:38 - that the currently logged in user has
170:40 - borrowed with that in mind let's close
170:42 - all of the currently open files expand
170:44 - our application check out how nice it
170:47 - looks like on the homepage admire the 3D
170:49 - book we have right here with this SVG
170:51 - cover head over to our profile page and
170:55 - log
170:56 - out that works as we immediately get
170:58 - redirected back to signin now if you
171:01 - want to you can manually head over to
171:03 - the home but you'll automatically be
171:05 - redirected to sign in because there's no
171:07 - active session you can head over to
171:10 - create an account but in this case we
171:13 - already have an account so let's try it
171:14 - out by specifying your email and your
171:18 - password and if you do that you'll be
171:21 - able to go back to the homepage
171:23 - immediately and yep I noticed that toast
171:26 - component didn't look good even though
171:27 - we didn't modify any of the original
171:29 - shat CN code it remained completely
171:31 - intact right here under toast components
171:35 - so it's interesting that it doesn't have
171:36 - the background what we could try is
171:38 - simply reinstalling it so I'll head over
171:40 - to the terminal and say MPX shcn at
171:43 - latest add toast I'll use the Legacy per
171:46 - depths it says the file or already
171:48 - exists would you like to overwrite I'll
171:50 - say yes use so already exists or write
171:54 - that too toaster exist too yep do all of
171:57 - it and now we have the latest versions
171:59 - of the file so if I head back over to
172:01 - our app one more time and try to log in
172:05 - just to see whether it fixed
172:07 - it it looks like it still hasn't so this
172:11 - sometimes happens which means that we'll
172:12 - have to manually modify the toast
172:14 - component don't worry about that it's
172:17 - not as scary as it seems we'll do that
172:18 - later on once we start adding some other
172:21 - cosmetic upgrades for now we have bigger
172:23 - things to focus on finally the entire
172:26 - homepage authentication and database
172:28 - setup have been integrated so in the
172:31 - next lesson I'll teach you how to make
172:32 - your app even more scalable and
172:34 - production
172:36 - ready let me show you how to make your
172:39 - app truly production ready and I really
172:42 - do mean that if you check out the
172:44 - credentials part of the OJs
172:46 - documentation the library we use to
172:48 - Implement authentication you'll see that
172:50 - it says that by default the credentials
172:52 - provider the one we used for emails and
172:54 - passwords does not persist data in the
172:57 - database however you can still create
173:00 - and save data in your database which is
173:02 - what we are doing you just have to
173:04 - provide the necessary Logic for example
173:07 - to encrypt passwords for that we used
173:10 - btjs to add password reset functionality
173:13 - you can do that using any kind of an
173:15 - email provider and to add rate limiting
173:19 - so what is this rate limiting it's not
173:21 - something that I hear about often in web
173:23 - development courses or tutorials even
173:25 - though it's not often mentioned in entry
173:27 - level tutorials it is something that is
173:30 - implemented on almost every single
173:32 - professional application they wouldn't
173:34 - function without it if many users or one
173:37 - malicious user tries to make too many
173:39 - requests to a certain page or API
173:42 - they'll get redirected to a 429 too many
173:45 - requests client error response
173:47 - indicating that the the client has sent
173:49 - too many requests in a given amount of
173:50 - time this mechanism of asking the client
173:53 - to slow down the rate of requests is
173:55 - commonly called raate limiting and it is
173:58 - done to prevent DDOS attacks or the
174:01 - denial of service attacks cyber attacks
174:04 - where perpetrators seek to make a
174:06 - machine or network unavailable to its
174:08 - intended users by temporarily or
174:11 - indefinitely disrupting Services by
174:14 - making too many requests how dare they
174:17 - right so today I'll teach you how to
174:19 - implement rate limiting into your
174:21 - applications to prevent DDOS attacks and
174:24 - we'll do that and more using up stash a
174:27 - serverless data platform that offers a
174:30 - serverless reddis database which you can
174:32 - use for free to cach your data make
174:35 - efficient searches or even rate limit
174:37 - certain devices they also offer vectors
174:40 - for managing numeric representations of
174:42 - objects such as images sounds and text
174:45 - often used in AI applications to build
174:47 - and train your own algorithms and the
174:49 - third very important feature that up
174:51 - stash provides are Q Stash's workflows
174:54 - which allow you to schedule and run
174:56 - workflows such as for onboarding users
174:58 - like dual lingo or sending notifications
175:01 - after an event has happened on your
175:02 - website all of this is completely open-
175:06 - source and used by many developers many
175:08 - of you have already requested it so in
175:10 - this course I decided to teach you how
175:12 - to make the most of appstash reddis and
175:15 - its other features if you haven't
175:16 - already click the link down in the
175:17 - description go ahead and do that and
175:20 - create your account once you do that
175:21 - you'll be redirected to your appstash
175:23 - dashboard so let's go ahead and create a
175:26 - new reddis database if you don't know
175:28 - what reddis is it's a super fast
175:30 - database used for caching real-time data
175:33 - and managing temporary data so your
175:35 - initial thought might be hey we're
175:37 - already using postgress with neon why do
175:40 - we have to add another database well
175:42 - we'll only use it as a secondary
175:43 - database to optimize our application and
175:46 - if you're wondering what up stash rdit
175:47 - is it's similar to what neon postgress
175:50 - is a serverless version of redis that
175:53 - automatically scales and is incredibly
175:55 - easy to set up so let's give it a name
175:57 - I'll call it a University Library you
175:59 - can select your primary region and click
176:02 - next as you can see it is completely
176:04 - free and it'll forever remain free for
176:07 - up to 10,000 daily commands so let's
176:10 - click create and now we can copy up
176:12 - Stash's endpoint and token we have them
176:15 - right here under rest API so copy the
176:17 - first one head over to your env.
176:21 - loal and add it right here below you can
176:24 - call it Upstore red isore URL and then
176:29 - we can do the second one which you can
176:32 - call up
176:33 - stash reddis
176:37 - token there we go so now our rest API
176:40 - has been set up we can also head over to
176:42 - our config to actually leverage those
176:44 - two envs we can do it by adding up stash
176:48 - right here here as a new
176:50 - object and then we can attach the Redd
176:53 - URL to be equal to process. env. Upstore
176:58 - risor URL and we can also add a reddis
177:02 - token which is equal to process. env.
177:05 - Upstore risor
177:09 - token now what we want to do is rate
177:12 - limit the requests made to off pages so
177:15 - people won't spam them we'll create a
177:17 - rate limiter in a way that you can use
177:19 - it in any server action or API route so
177:21 - you can add a rate limit to anything and
177:24 - completely secure your application to
177:26 - achieve that we'll follow the
177:27 - documentation from up stash just head
177:29 - over to sdks rate limit getting started
177:32 - the first step is to install the rate
177:34 - limit package from up stash so I'll copy
177:37 - the command and paste it right here now
177:40 - we can add rate limiting to our endpoint
177:43 - but before we do that you'll notice that
177:45 - we'll also have to have another package
177:47 - installed and that is is app stash rdis
177:49 - so let's install that one too that'll be
177:51 - mpm install appstash
177:55 - RIS there we go it was super quick and
177:58 - now we can copy this code block and add
178:00 - it over to a new file within the lib
178:02 - folder which I'll call rate limit.
178:06 - TS and paste what you copied right here
178:09 - now instead of using this redis from our
178:11 - environment variables we can also set up
178:13 - a new redis configuration instance by
178:16 - heading over to our databases
178:19 - folder and then creating a new file
178:22 - called rus.
178:24 - TS within here we can set up our
178:26 - configuration it's pretty simple to do
178:29 - we can just say con redus is equal to
178:32 - new redus and this redus is coming from
178:35 - appstash rdus and to it we can pass the
178:38 - config by defining the URL equal to
178:41 - config coming from lib
178:43 - config env. up. rdus URL just like this
178:49 - as well as passing the token equal to
178:52 - config env.
178:55 - up. rdis token finally now that we have
178:58 - created this reddis instance we can
179:01 - export default redis and now we can head
179:04 - back over to our rate limit file I can
179:06 - remove all of these comments because we
179:08 - don't need this many and I will actually
179:10 - explain everything that is happening
179:11 - here there we go we won't be needing any
179:14 - of this as of now what we will need is a
179:17 - rate limit instance
179:18 - which you can create by calling the new
179:20 - rate limit from up stash rate limit and
179:23 - then pass the configuration option to it
179:25 - in this case redus will just
179:27 - automatically come from reddis which is
179:30 - the instance of the redus that we just
179:31 - created so we can do it like this then
179:35 - you pass the limiter and in this case
179:36 - you can choose a sliding window or you
179:38 - can do something like fixed window where
179:41 - you can Define the number of requests
179:43 - that can be made on a specific point in
179:45 - time like maybe five tokens per one
179:49 - minute if you hover over it you'll be
179:51 - able to see that a param of token
179:53 - actually specifies to how many requests
179:56 - a user can make in each time window and
179:58 - then you have a fixed time frame right
180:00 - here and we can leave the rest of the
180:01 - stuff as it is analytics the true and
180:04 - the prefix of up stash rate limit
180:06 - finally you can export default this rate
180:09 - limit instance just so we can use it
180:11 - later on when you're trying to rate
180:13 - limit some parts of your code and we can
180:15 - remove this comment as well as the UN
180:18 - used import also rate limit is a valid
180:21 - word so right here I can save it to the
180:23 - dictionary so it's not yellow and so is
180:25 - up stash so we can add it to web Storm's
180:28 - dictionary so it always knows what up
180:30 - stash is because we'll use it in many
180:32 - upcoming applications let's rate limit
180:35 - our first server action it'll be the
180:38 - sign up function within o actions so
180:42 - head over to lib actions
180:45 - .ts and sign up with then here right at
180:49 - the top we can get access to the current
180:51 - user's IP address by saying const IP is
180:55 - equal to wrap it in parenthesis and say
180:58 - await headers which you can call like
181:01 - this coming from next headers and then
181:04 - call the dog get method on it to get the
181:06 - X
181:08 - forwarded for or you can use the default
181:12 - IP address of
181:14 - 1270 01 so what we're doing here here is
181:18 - getting the current IP address then we
181:21 - can try to get something out of the
181:24 - await call to rate limit this is the
181:28 - instance of rate limit that we created
181:30 - to which we need to pass the IP address
181:33 - like this once again rate limit is
181:35 - coming from rate limit TS
181:38 - file oh and I just noticed I misspelled
181:40 - it it was supposed to be rate limit so
181:43 - let me rename it to rate limit. DS and
181:47 - specifically we want to use the limit
181:49 - method on the rate limit instance by
181:51 - saying rate limit. limit this specific
181:55 - IP address once we do that we'll get
181:58 - back a success variable which will let
182:00 - us know if we can go to that page
182:02 - successfully if not so if not success
182:07 - then we want to return a redirect coming
182:10 - from nextjs pointing to forward SL2 fast
182:14 - which is a new route we'll create as a
182:16 - matter of fact let's add this same code
182:18 - over to our signin function as well so
182:21 - right here at the top just below the
182:23 - destructuring of the parameters I'll add
182:25 - this IP address and then we will
182:28 - redirect to to fast if we have made too
182:30 - many requests and now we can create a
182:32 - new page for that to fast route by going
182:35 - to app rout and create a new folder and
182:40 - call it to fast and within it create a
182:43 - new page. TSX within which we can run
182:48 - rafc to quickly spin up a new component
182:51 - and right now let's manually head over
182:52 - to it by heading over to Local Host 3000
182:55 - for
182:56 - slash2
182:58 - fast you should be able to see just an
183:01 - empty page within it let's return a main
183:05 - which is an HTML 5 semantic component
183:07 - and let's give it a class name equal to
183:10 - root-
183:12 - container Flex Min dh- screen so it
183:17 - takes the full height flex-all so the
183:20 - elements appear one below another and
183:22 - items Das Center and let's not forget to
183:25 - justify Center as well within it we can
183:27 - render an H1 that'll say something like
183:30 - whoa slow down there
183:35 - speedy of course you can put whatever
183:37 - message You' like right here and let's
183:40 - also give it a class name equal to font
183:43 - db-
183:45 - new text- 5X Cel font Das bold and text-
183:52 - light-1
183:53 - 100 and now we can see this message
183:55 - appear below it we can also render a P
183:58 - tag and here you can put any kind of
184:01 - text you'd like I'll copy it from one of
184:03 - the r limit examples I found something
184:05 - like looks like you've been a little too
184:07 - eer we've put a temporary pause on your
184:10 - excitement chill for a bit and try again
184:12 - shortly we can also style it a bit by
184:14 - giving it a class name of margin top 3
184:18 - Max dw- excl text- Center and text-
184:24 - light
184:25 - 400 oh and the reason why we have this
184:27 - double background here is because I
184:29 - accidentally put it in the root but
184:31 - actually it should be going outside
184:33 - because it's a standalone page that
184:35 - doesn't need the roots layout it doesn't
184:37 - need Navar so if I move it outside right
184:40 - here and reload you'll notice that now
184:43 - it looks just like an empty page saying
184:46 - whoo slow down it looks something like
184:48 - this on desktop so now to test whether
184:50 - this is working or not let's head back
184:52 - to the homepage and sign out remember if
184:55 - you head over to rate limit you'll
184:57 - notice that currently it's limiting at
184:59 - five requests per minute maybe we can
185:02 - change it to something like one requests
185:04 - per minute so now if you try to sign in
185:06 - for one time in one minute let's try to
185:10 - do that it should let you through and it
185:13 - does and if you log out and try to sign
185:15 - in one more time
185:20 - you'll be redirected to the two- fast
185:22 - page which means that the rate limiting
185:24 - has been successfully implemented keep
185:26 - in mind that this doesn't mean that all
185:28 - of the all of the users around the world
185:30 - only one will be able to log in in one
185:32 - minute and the others will be let here
185:34 - no not at all what this means instead is
185:37 - that every single user based on their IP
185:40 - address will get this many tries so now
185:43 - I'll change it back to five in 1 minute
185:45 - which should be more than enough and if
185:47 - I go go back and try to sign in one more
185:54 - time you can see that it works perfectly
185:57 - and there's one more thing I wanted to
185:58 - share with you and that is actually an
186:00 - example from up Stash's rate limit JS
186:03 - repo under examples nextjs middleware if
186:06 - you want to rate limit not just server
186:08 - actions but also API routes like maybe
186:11 - making calls to image kit API or any
186:14 - other then you can simply copy and paste
186:17 - this code right here and it'll just work
186:19 - immediately you just need to add this
186:21 - code to the same rate limit file we
186:24 - created pretty amazing right to get this
186:26 - much production ready functionality out
186:28 - of this little code with that in mind we
186:30 - looked into just a little bit of what up
186:33 - stach offers to make her apps more
186:35 - production ready later down the line
186:37 - I'll also teach you how to create
186:38 - workflows which will allow us to send
186:41 - notifications to our users when their
186:43 - book borrow request is due and much more
186:46 - like implementing user on on boarding
186:47 - flows which is exactly what we'll do in
186:50 - the next lesson great work so
186:53 - far so far so good we've created a
186:57 - couple of pages like o homepage and even
187:00 - profile implemented oth with postgress
187:03 - next o and even rate limited them using
187:05 - up stash but is that all there is to an
187:08 - Enterprise ready application well not
187:11 - really that's more so what you typically
187:13 - see in tutorials within Enterprise level
187:15 - applications many more things happen
187:17 - behind the scenes have you ever tried
187:19 - learning a new language on Dual lingo
187:21 - that little language learning app which
187:23 - gamifies the language learning
187:24 - experience while many think that front
187:26 - end is more important than backend and
187:28 - vice versa what's actually more
187:30 - important are your users the product you
187:33 - offer to them and the user experience
187:35 - they can get but your front end backend
187:37 - and the entire app falls down the river
187:40 - if no one actually uses it so the first
187:42 - thing you have to do is make sure that
187:45 - people come back and dualingo that best
187:49 - no this is not a sponsor but I'm so
187:51 - excited that you'll get a chance to
187:53 - replicate functionalities from the best
187:55 - in the industry dualingo tracks if the
187:57 - user has not logged in for a specific
187:59 - number of days and if that happens it
188:02 - sends a push notification or an email
188:04 - saying hey it's time to learn and
188:06 - sometimes they make it a bit passive
188:08 - aggressive but it's not just that many
188:10 - ride sharing applications or even food
188:13 - delivery applications like Uber Eats
188:15 - will send you those emails telling you
188:17 - to eat more and order some food heck
188:20 - even e-commerce or course websites will
188:22 - do the same saying that you forgot
188:24 - something in your cart so make sure to
188:26 - buy it I do it as well don't get me
188:27 - wrong but only to get you to learn so
188:30 - how do these developers do that well
188:32 - it's using workflows in the code base
188:35 - you have to set up some kind of a
188:37 - workflow to check if the user has left
188:39 - anything in the card or if they have
188:41 - locked in recently or not and then
188:43 - depending on that information you can
188:45 - create certain workflows like for
188:47 - example example if a user has not logged
188:49 - in for 3 days send an email or an SMS
188:52 - notifying them to check out the website
188:54 - or if a user has left something in the
188:56 - card send an email or SMS telling them
188:58 - to rethink their decision to buy but
189:00 - workflows can do so many more things
189:03 - let's say in our example a user borrowed
189:06 - a book and is close to the return date
189:08 - we can set up a workflow notifying them
189:10 - to return the book before the due date
189:13 - otherwise they'll be charged and yes
189:15 - this is the same functionality that
189:17 - Netflix and other services use to alert
189:20 - you about annual or automatic charges
189:22 - and that's exactly what you learn today
189:24 - using up stash workflows allowing you to
189:27 - schedule events and Trigger them on
189:29 - specific days or situations and much
189:31 - more so head back over to your up stash
189:33 - re platform and navigate over to qash at
189:37 - the top then copy the qash URL and qash
189:40 - token and add them over to your envs and
189:44 - let's not forget to add them to our
189:46 - config they'll also go under up stash
189:49 - but this will be a qash URL equal to
189:52 - process. env. qash URL as well as a qash
189:58 - token which is equal to process. env.
190:03 - qore
190:05 - token and as with up stash looks like
190:08 - webstorm doesn't understand what Q stash
190:11 - means so let's go ahead and add it to
190:12 - the dictionary because we'll be using it
190:15 - much more often in the future there we
190:17 - go go so now that is done and we can
190:20 - head up and navigate over to workflows
190:23 - letting you know that upst stash
190:24 - workflows let you write durable reliable
190:27 - and performant serverless functions so
190:30 - let's head over to Quick starts for
190:33 - nextjs before we set it up for nextjs I
190:36 - want to head over to just general
190:37 - getting started to tell you a bit more
190:39 - about what we'll actually do and what
190:41 - are the key features of up stash
190:43 - workflows one of the key features is
190:45 - failure resilience which means that if
190:48 - your platform experiences a temporary
190:50 - outage your workflow can pick up right
190:53 - where it left off also you have long
190:55 - running executions which means that when
190:57 - you run complex AI models or video
191:00 - processing tools even on serverless
191:02 - platforms with strict time limits
191:04 - they'll be executed properly you can
191:06 - create events with wait or notify
191:08 - mechanisms that wait for external events
191:11 - before proceeding for use cases where
191:13 - you're waiting for a user input like
191:15 - clicking on a confirmation email or even
191:18 - handling asynchronous notifications from
191:19 - external systems you can also schedule
191:22 - jobs at specific intervals with support
191:24 - for Chron Expressions great for
191:26 - recurring tasks like reminders or
191:28 - regular reports and of course there's so
191:30 - much more but instead of simply telling
191:32 - you about all these features let's
191:34 - actually explore them in practice by
191:36 - heading over to the nextjs quick start
191:39 - here we can follow the steps to get it
191:40 - up and running first we have to install
191:43 - up stash workflow so back in the code
191:45 - simply add this command
191:48 - and press enter step two is to configure
191:51 - your envs which we have already done and
191:54 - step three is to configure a workflow
191:57 - endpoint a workflow endpoint allows you
191:59 - to define a set of steps that together
192:02 - make up a workflow each step contains a
192:05 - piece of business logic that is
192:07 - automatically retried on failure with
192:09 - easy monitoring through the visual
192:11 - dashboard to define a workflow endpoint
192:14 - in nextjs navigate into the nextjs app
192:17 - API directory and create a new folder
192:19 - for example called workflow and then
192:21 - create a new route within it here we
192:24 - have a couple of examples there's a
192:25 - minimal one with the request object and
192:28 - more for now we won't use any of these
192:30 - examples instead ight provides a
192:33 - complete example of a customer on
192:35 - boarding flow it registers a new user
192:38 - sends welcome emails and periodically
192:40 - checks and responds to the user activity
192:41 - state so this exact workflow will
192:44 - register a new user send them a welcome
192:46 - email wait for a certain time
192:49 - periodically check the user State and
192:51 - then send appropriate emails based on
192:53 - the user's activity so let's go ahead
192:54 - and copy this example and let's create a
192:57 - new route we can do that within app API
193:02 - we can create a new folder called
193:06 - workflows and then within workflows we
193:08 - can create another folder called
193:13 - onboarding and then within onboarding we
193:16 - can create a new route. TS file within
193:19 - which we can paste this code if you
193:21 - scroll down right here you'll see a
193:23 - complete code breakdown so we can
193:24 - actually understand what is happening
193:27 - line by line so let's actually go
193:29 - through it together first we send a
193:31 - newly signed up user a welcome email by
193:34 - saying context. run step name is new
193:37 - signup and then the function will simply
193:39 - call the send email function with a
193:41 - message of Welcome to the platform and
193:43 - then here we can get the entire email
193:45 - after that we have the initial waiting
193:47 - period to leave the user time to
193:49 - interact with their platform so for that
193:52 - reason we use context. sleep and here
193:54 - you can Define for how long you want to
193:56 - wait in this case it is 3
193:59 - days step three is a periodic check so
194:03 - we're saying while true which means that
194:05 - we enter an infinite Loop and then
194:07 - periodically which means every month we
194:10 - check the users's engagement with your
194:11 - platform and send appropriate emails so
194:14 - right here we get the user State and
194:16 - then if state is not active we send an
194:19 - email to non-active users but if they
194:21 - are active we send them a newsletter and
194:24 - finally we can go back to sleep for 1
194:26 - month pretty cool right and then you
194:28 - have these additional functions that we
194:29 - used above that allow you to specify
194:31 - what you want to do like send email send
194:33 - an SMS or literally do whatever else we
194:36 - already discussed some of the key
194:37 - features like non-blocking sleep and
194:40 - long running tasks another thing we need
194:42 - to make this happen is to create a
194:44 - workflow client because right now we
194:46 - only have a a workflow endpoint so let's
194:49 - actually head over to lib and then
194:52 - within lib like we have rate limit we
194:54 - can also create a new client for the
194:56 - workflow by calling it workflow. TS and
195:00 - within it we can export const workflow
195:04 - client by making it equal to a new
195:07 - workflow client like this and of course
195:10 - we have to import that right here at the
195:12 - top by saying
195:14 - import client as workflow client and
195:19 - this is coming from at
195:21 - upwork flow to it we have to pass the
195:24 - base URL which will be equal to our
195:27 - config coming from at libconfig
195:32 - env. upst doq URL and then we also need
195:38 - a token which is going to be a config
195:41 - env. up. qash toen looks like it's
195:45 - complaining a bit about the token saying
195:47 - that it is possibly undefined I think we
195:49 - need to provide exclamation marks at the
195:51 - end letting it know that it'll actually
195:53 - be there always because we know that we
195:56 - have added it to our env. loal there we
195:59 - go with that the error is gone and we
196:02 - are now exporting our workflow client so
196:05 - now we have both the endpoint as well as
196:07 - the workflow client and we are ready to
196:09 - run it so let me get back to the next GS
196:12 - quick start and we can continue where we
196:13 - left off which is on step number four
196:17 - which says that up stash workflow is
196:18 - powered by qash and qash needs a
196:21 - publicly accessible URL to run your
196:23 - workflows if you want to you can set it
196:26 - up for your local development as well
196:27 - but in this case we'll just deploy our
196:29 - application to get a live URL here it
196:32 - says that we can set up an environment
196:33 - variable but this doesn't need to be set
196:35 - in production so for now we'll skip it
196:38 - and then here it explains how we can set
196:39 - up some of the base URL and then finally
196:42 - triggered the workflow and then we
196:43 - should be able to see it right here
196:45 - within our qash dashboard
196:47 - so let's actually deploy our project to
196:49 - verell First head over to your env. loal
196:53 - and make sure that you have all of the
196:54 - keys right here three from image kit
196:57 - then we have our next public API
196:59 - endpoint which we'll have to change in
197:00 - production we have two for databases two
197:04 - for up stash and two for qash oh and
197:07 - this is the OD secret generated by OJs
197:10 - once you make sure that you have all of
197:11 - these you also want to make sure that
197:13 - there's no typescript or ES length
197:15 - errors because some times they might
197:17 - block some builds in this course I try
197:20 - to be super careful not to cause any
197:22 - issues so if you look into most files
197:24 - you'll see that everything is topnotch
197:28 - no errors whatsoever but it is possible
197:31 - that some errors sneak through and we
197:33 - don't want those little warnings to
197:35 - block our builds so for that reason we
197:37 - can head over into our next.
197:45 - config.sys configuration options one
197:48 - will be called typescript and it'll be
197:51 - an object containing an ignore build
197:54 - errors is set to True property and then
197:57 - we'll also do another one for ES lent
197:59 - where we'll say ignore during builds and
198:03 - we'll set that to true as well just to
198:06 - make sure that everything goes right and
198:08 - now is the time to add it to your GitHub
198:10 - repo so just go ahead and create a new
198:13 - repository I'll say
198:15 - University Library
198:17 - JSM make it public and click
198:22 - create after that you want to follow the
198:24 - steps to push the repo to GitHub so we
198:27 - can do that by saying get in it g add do
198:31 - git commit DM initial
198:34 - commit then you want to switch over to
198:37 - the main
198:38 - branch add a remote
198:41 - origin and finally push to origin Main
198:45 - in a matter of seconds you'll you see
198:47 - your code appear right here on GitHub
198:49 - once you do that head over to ver.com
198:53 - and click plus right here and add a new
198:56 - project you should see it right here at
198:58 - the top University Library JSM and just
199:01 - click import right here It'll recognize
199:04 - that it's a nextjs project so everything
199:06 - will be done for you one thing that you
199:08 - have to do manually is modify the
199:10 - environment
199:11 - variables so go back to your code and
199:14 - head over into EnV local copy all of the
199:17 - variables and simply paste them right
199:18 - here into the input this will populate
199:21 - all of them and for now we don't have to
199:23 - change anything in here we're going to
199:25 - leave this API endpoint to Local Host
199:27 - 3000 but as soon as our app gets
199:29 - deployed we'll also add another
199:31 - production endpoint so for now let's
199:33 - click deploy and let's see what happens
199:36 - it looks like in this case I got an
199:37 - immediate error and this was the issue
199:40 - that I was experiencing with es lint
199:42 - before most likely you don't have this
199:44 - issue and your build should run
199:46 - successfully
199:47 - but on my end I think the quickest fix
199:49 - is to head back over to my
199:52 - projects head over to
199:54 - settings and then head over to right
199:57 - here where we have build and development
199:59 - settings and under install command I can
200:02 - override just the regular mpm install
200:05 - and append Legacy perer depths to it
200:09 - that worked in development mode so it
200:11 - might work here as well after that I'll
200:14 - just re-trigger the deployment
200:17 - let's see how that goes it's building
200:19 - and it is past 5 seconds so that's
200:22 - already a good sign let's see where it
200:24 - is in a minute or two and there we go in
200:26 - about a minute our website is deployed
200:28 - so let's head over back to our project
200:31 - and click visit right here at the top
200:33 - right this should lead you to your
200:34 - deployed
200:36 - URL now copy that URL and then head over
200:39 - to settings environment variables and
200:42 - add a new environment variable called
200:45 - nextore public underscore prod as in
200:48 - production underscore API underscore
200:51 - endpoint and now you can paste the full
200:54 - URL of your app but of course remove the
200:56 - sign in at the end and save it once you
201:00 - save environment variables you'll have
201:02 - to redeploy the app oh and let's not
201:04 - forget to head over to our config
201:07 - because we'll need to use those envs
201:08 - right here as well so alongside the API
201:11 - endpoint I'll also add a prod API
201:15 - endpoint
201:17 - which will be equal to process.
201:19 - env. next public prod API end point
201:25 - which is only accessible in
201:27 - production we'll use that one very soon
201:30 - when sending out our workflows with that
201:32 - in mind now that our AB has been
201:33 - deployed and we have all of the
201:35 - necessary production envs we are ready
201:38 - to finalize our workflows and make them
201:40 - send out emails to our newly onboarded
201:43 - users so let's do that in the next
201:46 - lesson
201:48 - you see this workflow endpoint that we
201:50 - created in the last lesson one talking
201:53 - about sending emails when a new user
201:55 - signs up and then we wait three days and
201:57 - then we either start sending them a
201:59 - newsletter or we email the non-active
202:01 - users well this is all about sending
202:05 - emails and even though qash allows us to
202:08 - trigger these workflows we have to use
202:11 - another tool to actually send out the
202:13 - emails because it doesn't have to be an
202:15 - email it can can be an SMS it can be an
202:18 - inapp notification it can be anything
202:20 - but in this case I think the most common
202:22 - solution is to send out emails so for
202:25 - that we have to choose an email provider
202:27 - in this course I'll teach you how to use
202:28 - resent it is a new email API for
202:31 - developers that a lot of great companies
202:33 - like live blocks and even Warner
202:35 - Brothers use and it is also something
202:37 - that I have personally used on JS
202:39 - mastery. proo platform this is not
202:41 - sponsored just wanted to cover this tool
202:43 - as it's used on many production
202:45 - applications and what see even better is
202:47 - that you can completely write your email
202:49 - templates using react components that is
202:51 - not possible with simpler tools like
202:53 - email JS that I typically teach in my
202:55 - other courses so if you want to have
202:57 - completely custom designs you can
202:59 - achieve that now I do want to quickly
203:01 - mention that you can totally use email
203:03 - JS to implement email sending in this
203:05 - application as well and I would even
203:07 - encourage it if you're looking for
203:09 - something simple to just get the job
203:11 - done the reason why I'm providing this
203:12 - as an alternative is because recent will
203:15 - ask you for a live domain through which
203:17 - it wants to send emails and if you don't
203:20 - have any kind of a domain name yet
203:22 - you'll have to get one so I just wanted
203:24 - to provide you with an alternative in
203:26 - case you don't already have a domain
203:27 - name or you don't want to buy a new one
203:29 - for this project but in this case I will
203:31 - proceed with recent so click the recent
203:33 - link down in the description to be able
203:35 - to follow along and see exactly what I'm
203:37 - seeing and then click get started next
203:40 - create an
203:41 - account head over to the API Keys
203:45 - section and it It'll ask you to create a
203:47 - new API key you can enter your key name
203:49 - such as University Library give it full
203:52 - permissions and then add it as soon as
203:55 - you do that you'll get your API key
203:57 - which you need to copy and add it to
203:59 - your env. loal so right here I'll do
204:03 - something like
204:04 - resend
204:06 - underscore token and make it equal to
204:09 - the one that I just copied by the way I
204:11 - am pretty sure that this is the highest
204:13 - amount of environment variables we've so
204:15 - far had in in a YouTube course so if
204:17 - anything that shows how large the app is
204:20 - once you've created your API key you
204:22 - need to head over to domains and add a
204:25 - new domain now this is the point where
204:27 - you'll need your own custom domain and
204:30 - this can be the same domain that you're
204:31 - using for your portfolio so if you've
204:34 - built a portfolio watching any of my
204:35 - previous videos before you most likely
204:38 - already have it but if you don't like in
204:41 - my portfolio videos I would recommend
204:43 - you to buy a cheap domain name from
204:44 - hostinger if you don't have it already
204:46 - for your portfolio it'll be a great way
204:48 - to add a bit more reputation to it and
204:50 - if you do have it you can then use that
204:52 - one or just grab a new one and then swap
204:54 - it over I don't even think you'll need
204:56 - hosting in this case you can just head
204:57 - over to domains and choose the domain
204:59 - name you'd like is your typical domain
205:02 - name but Pro and XYZ domains can be
205:05 - picked up at like two bucks for the
205:06 - first year so enter your domain name
205:08 - right here most likely it's going to be
205:10 - something like your first and last name
205:13 - in this case I'll go with Adrien JS
205:15 - mastery
205:17 - and registered for the first year oh I
205:19 - can see honey coupons found but we're no
205:22 - longer using honey after what has
205:24 - happened so I got to quickly uninstall
205:26 - that extension very soon but in this
205:28 - case we don't even need a coupon code so
205:30 - just go ahead and click continue and
205:33 - then create your
205:34 - account once you get your domain it'll
205:36 - be registered and then you'll get an
205:38 - email which you need to verify it and
205:40 - then you can copy it head back over to
205:43 - domains and add it but make sure to add
205:45 - something in front of it like hello do
205:49 - and then your domain name.com this will
205:52 - make it into a subdomain which is a
205:53 - recommended practice when adding domains
205:55 - for sending emails typically companies
205:57 - have something like hello or marketing
206:00 - or whatever else it is so in this case
206:02 - I'll use hello. Adrian JSM mastery.com
206:05 - and I'll click add then you'll be given
206:08 - a couple of DNS records which you want
206:10 - to copy over to your email provider so
206:13 - let's do that right away by heading over
206:14 - to DNS and then you can add all of these
206:16 - DNS records let's do them one by one
206:19 - I'll first add an MX record with a host
206:23 - or name of send. hello and this specific
206:26 - value priority of 10 and TTL of Auto I
206:29 - think you can leave it as it is and we
206:31 - can repeat the procedure with additional
206:33 - records I think the second one is a txt
206:35 - record with a name of send hello and the
206:39 - following
206:40 - value we can do the same thing with the
206:42 - third one which is also a txt with this
206:45 - name name and this value and finally we
206:49 - have one more DeMark record which is
206:51 - also a txt with the name ofor dmark and
206:55 - the following value once you add all of
206:58 - these records you will have to wait some
207:00 - time as these records can take up to a
207:02 - couple of hours to fully propagate but
207:05 - typically it happens within minutes so
207:07 - let's click verify DNS records and you
207:10 - can see that for me it still says
207:11 - pending and verifying two have been
207:14 - verified immediately as I was speaking
207:16 - and hopefully the third one will too and
207:19 - there we go all of them have been
207:20 - successfully verified well done now
207:23 - you're ready to start building and
207:25 - sending out emails with this domain now
207:27 - it's pretty amazing that appstash
207:29 - already has an integration with
207:31 - resent which allows you to very quickly
207:34 - send emails using resent streamlining
207:36 - email delivery in your applications so
207:38 - let's go ahead and follow it to set up
207:40 - some basic email sending you only need
207:42 - to use publish Json method with the
207:44 - recent provider and then ensure your Q
207:47 - stash token and resent token are set for
207:49 - authentication so let's copy this piece
207:51 - of code and as it says in the body field
207:54 - specify the parameters supported by
207:56 - recent email API such as from to subject
207:59 - and HTML you can also send batch emails
208:02 - to multiple
208:03 - people and that's more or less it so let
208:06 - me show you how we can use it together
208:08 - so let's head over to our workflow. TS
208:12 - file the one that we created before
208:13 - where we have set up a workflow client
208:16 - and paste the block of code that we just
208:18 - copied there we get another client which
208:21 - is the up stash qash client so we have
208:24 - both we have both the workflow client as
208:27 - well as the Q stash client and the
208:29 - resent and we set it up right here below
208:31 - just to make it make a bit more sense we
208:33 - can rename this Q stash client to Q
208:37 - stash client just to follow a great
208:41 - practice and then we can rename it here
208:44 - and then we can Define it as Q stack
208:46 - client just since we have both the
208:48 - workflow client and the Q stash client
208:49 - in the same page and then it requires us
208:52 - to pass a q stash token so let's do just
208:55 - that saying that the token is equal to
208:58 - config coming from our lip config env.
209:02 - up stash do qash token there we go so
209:07 - now we're defining both after that we
209:09 - want to create a functionality to send
209:11 - out an email so let's say export const
209:14 - send email is equal to an async function
209:18 - where we take in some parameters like
209:21 - the email itself the subject and the
209:23 - message and then we can return something
209:26 - and that something will of course be
209:27 - this block of code that we copied from
209:29 - qash documentation with their
209:31 - integration with recent we can rename
209:33 - this client to qash client and we have
209:36 - to provide the types for email subject
209:38 - and the message all three of which will
209:41 - be strings so we can say email is a type
209:43 - of string subject is a type of Str
209:46 - string and the message itself is also a
209:50 - type of string great so now we can use
209:52 - those parameters which will pass into
209:54 - the function to compose our email we can
209:57 - do that by saying API name is email with
210:00 - a provider as resent and here we have to
210:03 - add the recent token which I believe we
210:06 - have already added to our environment
210:07 - variables so we can say config Dov Dot
210:11 - and this will now be I believe recent
210:14 - let's see have I added it
210:17 - I'll go to config oh and it looks like
210:19 - we're missing the recent token so I'll
210:21 - quickly head back over to recent and go
210:24 - to API keys and try to copy the token
210:27 - from here but it looks like it's not
210:28 - actually allowing me to recopy it so in
210:31 - case you didn't pasted before you'll
210:33 - have to remove this API Key by saying
210:35 - delete and then we'll just recreate a
210:38 - new API key called
210:40 - University library and maybe even for
210:43 - the better because now we actually have
210:45 - created a new domain so it can sync the
210:47 - two and now yeah you can only see this
210:49 - key once store it safely so go ahead and
210:52 - copy it and add it right here as recent
210:57 - token as process. env. rendor token and
211:02 - then head over to your env. loal oh
211:05 - silly me looks like I added the recent
211:08 - token before to envs but not to the
211:10 - config either way now we have a new
211:12 - token right here so you can simply
211:14 - override the current one
211:17 - and with that back in the workflow we
211:19 - can now say config env.
211:22 - resend
211:24 - token and we can start composing the
211:27 - body of our email so we can say from JSM
211:32 - or JS Mastery or you can put your name
211:34 - here and then you can put your current
211:36 - domain name which in my case is hello.
211:40 - Adrian JS mastery.com we're going to
211:43 - deliver it to the email that we pass
211:46 - through pams the subject will be the
211:48 - subject we pass through perams allowing
211:50 - us to modify it and then the HTML will
211:53 - actually be equal to the message that we
211:56 - pass through params as well so it is
211:58 - fully customizable and believe it or not
212:00 - that's all there is to this setup so
212:03 - before we go ahead and modify the APA
212:05 - route to send out emails based on
212:07 - conditions we want to have a welcome
212:09 - email when a user first signs up and
212:11 - another email saying something like hey
212:14 - how's it going if the user hasn't been
212:16 - active for the last 3 days so we have to
212:18 - prepare Logic for these conditions like
212:21 - how and when we'll trigger it and if you
212:23 - remember by heading back into schema of
212:26 - our database we have added a last
212:28 - activity date right here which stores
212:31 - the last activity date of the user if we
212:34 - keep updating this value whenever our
212:36 - user visits our platform or maybe at
212:38 - least once per day we then know when
212:40 - this user was last active now as a good
212:43 - react developer you might think of using
212:45 - use effect and making a request to
212:47 - update that field as soon as user opens
212:49 - the application or if you're an okay
212:51 - nextjs developer you might want to do it
212:53 - on the server side to avoid writing lots
212:55 - of code and avoid loading on client side
212:58 - but if you're an excellent nextjs
213:00 - developer who went through the ultimate
213:02 - nextjs course on JS mastery. proo then
213:05 - you'll want to use the latest nextjs
213:07 - features like next after allowing to
213:11 - schedule work to be executed after a
213:13 - response is finished this is useful for
213:16 - tasks and other side effects that should
213:17 - not block the response such as logging
213:20 - and analytics this way you won't be
213:22 - blocking the UI and you can perform
213:24 - tasks in the background with less code
213:26 - which gives you the best of both worlds
213:29 - perfect use case for this little feature
213:31 - so let's head over to our root layout
213:34 - and implement the logic to update the
213:36 - user's last activity I'll do it right
213:38 - here after we make a check if they're
213:40 - signed in and say after here you can
213:43 - define a callback function that happens
213:46 - after the page loads and then within it
213:48 - you can check if there is no session
213:51 - question mark. user question mark. ID
213:54 - you simply exit out of it this is just
213:57 - an additional check even though it might
213:58 - not be necessary because we're already
214:00 - redirecting to sign in if the session
214:02 - doesn't exist of course don't forget to
214:05 - actually import after coming from next
214:08 - server and then if a user does exist we
214:11 - simply want to update our database by
214:13 - saying await DB coming from from
214:15 - database
214:17 - drizzle. update users which is the
214:20 - schema for the
214:22 - users and then call the dot set last
214:25 - activity date and set it to New
214:29 - date. 2 ISO string. slice and you want
214:34 - to slice from 0 to 10 what the slice
214:37 - does is it simply takes the day month
214:40 - and the year without the time we don't
214:42 - necessarily care about the time in this
214:43 - case and finally
214:46 - we can use the wear method where we
214:49 - check for the equality for the user ID
214:52 - so we only want to update the last
214:54 - activity date for the user that is
214:56 - currently logged in so we'll say EQ
214:58 - user. ID is session user ID like so and
215:03 - this was supposed to be users right here
215:05 - and the EQ is of course coming from
215:09 - drizzle
215:10 - orm great believe it or not that's it
215:13 - that's everything we need to periodic
215:16 - update the users's last activity date
215:18 - when they revisit the website now you
215:20 - know that we're all about production
215:22 - ready applications and things that
215:24 - you're not going to see in typical
215:25 - courses so One update that we can do to
215:28 - this is not update it always like every
215:31 - time that a user does something and only
215:34 - do it once a day okay so one mutation
215:37 - per day let's do that by writing a
215:40 - comment of something like get the
215:43 - user and see if the last activity date
215:48 - is today and in this case since I'm
215:51 - using copilot or you can use any other
215:53 - AI autofill it should already recommend
215:56 - some things that you can do like const
215:58 - user is equal to await DB where we want
216:01 - to select from users so do from
216:07 - users where user ID is equal to session
216:11 - ID and we can even limit it to one by
216:14 - saying Li limit to
216:17 - one pretty cool right and then you can
216:21 - write an if statement and checking if
216:24 - user
216:26 - z. last activity
216:28 - date is triple equal to new date to ISO
216:32 - string. slice then simply return meaning
216:35 - exit out of the function and don't
216:37 - perform the update so now this is even
216:39 - more performant but not that it really
216:41 - matters because this after ensures that
216:43 - it never blocks the UI anyway so it will
216:45 - not slow down your application but it
216:48 - will knock down the number of mutation
216:50 - calls to your database so with that in
216:52 - mind let's modify the API workflow route
216:55 - to include these conditions of checking
216:57 - the last activity date and sending
216:58 - emails according to that head over to
217:01 - your
217:02 - onboarding route. TS and add the logic
217:06 - for sending emails according to those
217:08 - conditions we can have two types of
217:09 - users type user state will be either
217:14 - nonactive or or it'll be
217:18 - active and then for the initial data in
217:20 - this case we get both the email as well
217:23 - as the full name of a type string we can
217:26 - also Define some constants at the top
217:29 - such as different intervals in
217:31 - milliseconds just so we can more easily
217:33 - use them later on without using a
217:36 - programming an pattern of magic numbers
217:39 - like what do these numbers mean right
217:40 - here I don't know it's much easier to
217:43 - Define it as a variable something like
217:45 - one day in Ms milliseconds and then make
217:50 - it equal to 60 * 60 times I think the
217:55 - first number is the number of hours so
217:57 - 24 hours time 60 seconds time 60 minutes
218:01 - and then times 1,000 this should be one
218:04 - day in milliseconds we can also create
218:07 - some other intervals like maybe three
218:10 - days Days in milliseconds which is going
218:14 - to be three times and then we can simply
218:17 - use one day in milliseconds much easier
218:19 - right there we go and let's also do 30
218:22 - days where we can simply say 30 times 1
218:25 - day in milliseconds after that we want
218:28 - to create a function that will check the
218:29 - last activity State and derive if a user
218:32 - is active or not during that period in
218:34 - time so let me say const get user state
218:39 - is equal to an async function that
218:41 - accepts an email of a type string and
218:44 - it'll return a promise that will return
218:47 - a user State it'll look something like
218:49 - this first we have to extract the user
218:51 - which will be the same to what we have
218:53 - done in the root layout get a single
218:58 - user const user is equal to a wait db.
219:02 - select from users where users email so
219:06 - here we're going to take a look by email
219:07 - not by ID is equal to the email we're
219:10 - passing right here and we're going to
219:12 - limit it to
219:13 - one next we're going to check if user.
219:17 - length is triple equal to zero that
219:19 - means that it is nonactive it doesn't
219:22 - exist so I'll simply say nonactive but
219:25 - after that we want to make checks for
219:27 - the last activity date so let me say
219:29 - const last activity date is equal to new
219:34 - date out of the user
219:37 - z. last activity date and you can add an
219:40 - exclamation mark here letting typescript
219:42 - know that it will be there then with you
219:45 - want to get the current date by saying
219:47 - const now is equal to new date and
219:51 - finally you want to compare the
219:52 - difference by saying con time
219:56 - difference is equal to now. get time
220:00 - minus last activity date. get time and
220:03 - then finally if time difference is
220:06 - greater than 3 days in
220:09 - milliseconds and if time
220:12 - difference is lower than or equal to 30
220:17 - days in milliseconds then you want to
220:20 - return
220:21 - nonactive else you want to return active
220:24 - so this was some pretty custom example
220:26 - of showing you how flexible your
220:29 - workflows and queries are you can do
220:32 - whatever you just have to write it in
220:35 - plain JavaScript code and now that we
220:37 - can get the user State we can actually
220:39 - use it to perform some actions in the
220:41 - workflows or use it as a trigger so
220:44 - alongside the email right here in the
220:46 - post request we're also going to get a
220:48 - full name and first we're sending a
220:50 - welcome email so I'll add a comment
220:52 - right here and say welcome
220:54 - email where we run a context new signup
220:58 - await send email and instead of just
221:01 - passing different programs we can pass a
221:03 - single object with the settings and then
221:05 - pass over an email we are sending to a
221:09 - subject of something like welcome to the
221:13 - platform and then a message
221:16 - of something like template string of
221:20 - Welcome full name and this send email
221:23 - function will no longer be one provided
221:26 - to us by up
221:28 - stash because it's just a dummy one
221:31 - actually will import it right at the top
221:33 - so let's remove this and let's just
221:35 - import it right here coming from lib
221:38 - workflow so this is the custom email
221:40 - function sending using resend as a
221:43 - provider next we want to trigger the
221:45 - work workflows it sleeps for 3 Days to
221:47 - avoid any bills or server load and then
221:50 - it enters the loop here we want to get
221:52 - access to the state of the user so we
221:54 - are running the check user State and
221:56 - then we have an async function which
221:58 - returns an await call to get user state
222:03 - to which we have to pass the email so
222:05 - this is the function we created to get
222:07 - the current user State and then
222:08 - according to that we have to send out
222:10 - the emails so let's actually modify them
222:13 - by passing an object into each one
222:16 - for the first one I'll say send it to
222:19 - this email with a subject saying are you
222:21 - still there hey we miss you and then for
222:25 - the second one we'll pass another object
222:28 - and I'll say something like welcome back
222:31 - it's good to see you active and that's
222:33 - it then we can sleep the workflow once
222:35 - again for a month and recheck once again
222:38 - so with that in mind we have set up
222:40 - absolutely
222:41 - everything from the workflow client that
222:44 - we have right here under workflow TS lib
222:48 - to the qash client as
222:50 - well the email mechanism to send out
222:53 - emails and the integration with resent
222:56 - and seemingly everything else needed for
222:58 - this to work to test out our workflow we
223:01 - can use the trigger method which starts
223:03 - the workflow run and gets its run ID it
223:06 - looks something like this pretty
223:08 - straightforward but the main question is
223:10 - where should we trigger it do you have
223:13 - any guesses where should we trigger the
223:16 - onboarding of the
223:17 - user well of course when a user signs up
223:21 - for the first time so head over to the
223:23 - au. TS file in the lib actions and head
223:27 - over into the sign up function as soon
223:30 - as we create or insert a new user into
223:32 - the database we want to trigger the
223:34 - workflow by saying await workflow
223:38 - client. trigger and then you have to
223:40 - pass the URL pointing to the route of
223:43 - the workflow in our case that is the
223:46 - onboarding workflow right here under app
223:49 - API onboarding route. DS which will
223:53 - trigger this post request and with it
223:55 - the workflow itself so we can say URL
223:59 - and then make it a dynamic template
224:00 - string of config
224:03 - env.
224:05 - prod API endpoint but first make sure to
224:09 - import config coming from lib config and
224:13 - it should point to your environment
224:14 - variables and then to it append for SL
224:18 - API slw workflow slash onboarding as the
224:22 - second parameter add the body which will
224:26 - contain the email we want to send to as
224:28 - well as the full name and that's it we
224:31 - sign the user in and the rest happens
224:33 - behind the scenes so now we ready to
224:35 - test it out but of course since
224:37 - workflows require publicly deployed URLs
224:40 - we have to get our latest environment
224:42 - variables and the latest code and push
224:44 - it to cell so first things first let's
224:48 - get the environment variables we need to
224:50 - get our resent token then head over to
224:54 - your project settings environment
224:57 - variables and add a recent token right
225:00 - here and click save alongside that make
225:04 - sure that your next public prod API
225:06 - endpoint points to your currently
225:08 - deployed website copy it and you can
225:11 - also change the next public API endpoint
225:14 - by editing it right here to also point
225:17 - to the same URL no longer do we need to
225:19 - refer to Local Host 3000 on the
225:22 - deployment now to re-trigger these
225:24 - changes you can either go to deployments
225:26 - and then redeploy it
225:28 - manually but we're not going to do that
225:30 - because we have to push the changes
225:32 - anyway containing the latest code for
225:34 - all of the logic for sending emails so
225:37 - let's actually just push the code once
225:39 - again which should re-trigger the
225:41 - deployment I'll say get add dot get
225:44 - command DM and that'll be Implement qash
225:49 - workflows for user
225:52 - onboarding and then do get push this
225:56 - will push the latest changes and
225:58 - immediately trigger a redeployment on
226:00 - res sell so let's give it a minute there
226:03 - we go our new deployment is ready so
226:06 - let's head over to our deployed website
226:09 - and create a new account in this case
226:11 - I'll use a different email enter my
226:13 - password and my name we can also enter a
226:17 - University ID and upload a university
226:20 - card once you upload it click sign up
226:24 - and there we go we got redirected back
226:26 - to homepage but if you check your email
226:29 - it is nowhere to be found at least I
226:32 - can't find it in my inbox so what do you
226:34 - say that we go ahead and debug it
226:36 - together if you head over to qash and
226:39 - move over to workflows you'll see that
226:41 - there is one workflow that started
226:43 - running which is a good sign right and
226:45 - there's another one because one of you
226:47 - was crazy enough to find the published
226:50 - repo and already started testing the
226:52 - application even before it went live or
226:55 - before I finished recording it but here
226:57 - is my attempt of trying to get my email
227:00 - JavaScript Mastery right here and it
227:02 - says retrying which means that it wasn't
227:04 - really successful you can also head over
227:07 - to resend and check the emails here it
227:09 - looks like it's empty and the logs are
227:12 - empty too so it looks like it's not Q
227:15 - Stash's fault and it's not resent fault
227:18 - so most likely we've done something
227:19 - wrong so another place to look at for
227:22 - errors is to head over to your server
227:24 - logs on versell so find your versell
227:28 - project head over to logs and then turn
227:31 - on the live right here and look for when
227:34 - you made that workflows onboarding call
227:37 - it is right here we have my profile sign
227:40 - in and then we have the API workflow on
227:43 - boarding and in this case it looks like
227:45 - it'll be pretty easy to debug as it's a
227:47 - 404 not found which indicates that the
227:51 - API workflow on boarding cannot be found
227:54 - but how is that the case we have created
227:56 - it well if I go back right here and
227:59 - check out my API workflows onboarding
228:03 - route I can notice that it has an extra
228:05 - S at the end it's not workflow it is
228:08 - workflows so I have to go here and
228:11 - search for where we have mentioned that
228:14 - and and I think that's going to be
228:15 - somewhere in the odds of actions so if
228:19 - you scroll down you should be able to
228:21 - see API workflow on boarding but we need
228:24 - to switch this over to workflows on
228:27 - boarding at least that's how I called it
228:29 - so just make sure that matches once you
228:31 - do that we'll have to redeploy our app
228:33 - so go ahead and say get add dot get
228:36 - commit dasm fix typo and get push after
228:42 - you do that your app will get redeployed
228:44 - and and you'll be able to sign in with
228:46 - yet another account while it's being
228:48 - deployed we can head over to Neon and
228:51 - head over to tables just to quickly
228:53 - remove the two existing users we have to
228:56 - have a clean slate and to properly on
228:58 - board our new upcoming user there we go
229:01 - the application is now live so let's go
229:03 - ahead and check it out I'll log out and
229:05 - create a new account now I can use the
229:07 - email that I used at the start I'll
229:09 - enter some random University ID and
229:11 - upload my University card it should
229:13 - upload it right away if it doesn't try
229:15 - to reload your page and then click sign
229:18 - up immediately you'll be redirected back
229:20 - to the homepage but what we care about
229:23 - more is whether the workflow has been
229:25 - triggered so even before I head over to
229:28 - my email I'll head over to qash workflow
229:30 - table and check this out new workflow
229:34 - has been initialized and we have a new
229:36 - signup action which ran successfully and
229:39 - now it's going to sleep for 3 days but
229:42 - if you head over to resent you'll notice
229:44 - that no emails have been sent and also
229:47 - the logs are empty so that means that
229:50 - something went wrong when trying to send
229:51 - out the email even though everything
229:53 - went right with qash workflows so let's
229:56 - actually check out our workflow. TS one
229:58 - more time where we're actually setting
229:59 - up the qash client and allowing it to
230:02 - send emails I think we'll need to modify
230:04 - this body from as an example before they
230:08 - provided us with onboarding at recent.
230:11 - deev which is an actual email domain
230:13 - name not just just a website domain I
230:16 - can show you what we had and compare it
230:18 - with this there we go so you can see I
230:21 - have hello. Adrian JSM mastery.com but
230:24 - they have onboarding at recent. deev so
230:27 - what I think we need to do is also get
230:29 - an email account for our domain name
230:31 - something like onboarding or contact so
230:34 - I'll head back over to hostinger scroll
230:37 - down and see here it says get a
230:39 - professional email account for your
230:41 - domain name just click try for free and
230:44 - then it'll will be about less than a
230:45 - dollar per month and you even get a free
230:48 - 30-day trial and once again if you
230:50 - really can't put in a credit card or you
230:52 - cannot spend this amount in that case
230:55 - you can check out email JS I have a link
230:57 - pointing to the complete implementation
231:00 - within another video right below but in
231:02 - this case I'll start with a free 30-day
231:04 - trial there we go I got it if you don't
231:06 - want to get charged you can cancel it
231:08 - for free within 30 days or you can keep
231:10 - it if you're going to use it for your
231:11 - own portfolio it's always great to have
231:13 - a professional main name and email so
231:16 - I'll head over to manage email and I'll
231:18 - create a new email account email can be
231:21 - something like contact at Adrian
231:23 - gsmaster pro.com and you can choose any
231:26 - password you like and you can skip the
231:28 - second step and now you have your email
231:30 - so make sure to copy
231:33 - it go back to your application and
231:36 - replace it right here now we can send
231:38 - emails from a real domain name even
231:41 - though on recent domains we have entered
231:43 - a subdomain as they recommended but I
231:45 - don't think that's going to be a problem
231:47 - if it poses some issues we can very
231:48 - quickly add our main domain right here
231:51 - to allow us to send
231:52 - emails with that said let's go ahead and
231:55 - push this change and test it once again
231:57 - I'll run get add dot get commit
232:01 - DM fix email domain and get push back on
232:06 - resell we can wait until it is deployed
232:09 - back on the deployed app I'll try to
232:11 - create a new account I'll use my
232:13 - personal one this time
232:16 - enter my
232:18 - name and my University ID number and the
232:21 - card sometimes it's not uploading on the
232:24 - first try for me but weirdly enough if I
232:28 - reload and enter all my information once
232:33 - again and try to reupload one more time
232:36 - then it uploads it immediately I'll see
232:38 - if this issue persists and then we can
232:40 - fix it with that in mind let's click
232:42 - sign up oh and I think I get an error
232:44 - because I entered the same University ID
232:47 - as before so I'll change it it's good to
232:49 - know that our validation is working we
232:51 - get redirected to the homepage looks
232:53 - like a few more people have been
232:55 - triggering these workflows but there's
232:57 - one for my new user that's good to know
232:59 - but now the main question is what
233:01 - happens if I head over to resent and
233:03 - would you look at that we got a 403
233:05 - under logs happening just a minute ago
233:09 - but unfortunately no emails just 403s
233:12 - under logs hopefully the these 43s will
233:15 - now give us a bit more information on
233:17 - what went wrong we got a validation
233:19 - error saying that Adrian jm.com the main
233:22 - is not verified so it looks like I was
233:24 - wrong even though they recommended to
233:26 - have a subdomain there we have to use
233:28 - the main domain for our email so I'll
233:31 - just head over to domains and remove the
233:34 - existing
233:35 - domain by saying delete and add a new
233:38 - domain but this time it will not be a
233:40 - subdomain I'll just use my full domain
233:43 - Adrien JSM tree.com and then
233:46 - unfortunately we'll have to go through
233:48 - the process of setting up our DNS
233:49 - records one more time so get back to
233:51 - your domain head over to DNS and let's
233:54 - add a few more records the first one as
233:57 - before is an MX record of send and the
234:01 - following value the second one is a txt
234:04 - record with the host name of send and
234:08 - this value after that we have another
234:10 - txt with this name and this value
234:15 - and finally we have another txt of dmark
234:18 - and a value of dmark B none there we go
234:21 - I'm already well versed in adding those
234:23 - DNS records now I'll click verify and
234:27 - hopefully it'll verify them as quickly
234:29 - as it did the last time they're still
234:31 - pending now but let's give them a minute
234:34 - two got verified in a second like the
234:37 - last time and hopefully the last one
234:38 - does get verified too there we go it
234:41 - took a couple of seconds but now we're
234:43 - fully verified and hopefully this time
234:46 - emails will send as you can see this
234:49 - took us some time to get everything up
234:50 - and running and set up but that's the
234:52 - difference between a small
234:54 - non-production Ready YouTube tutorial
234:56 - and this which is an Enterprise ready
234:58 - course I actually wanted to guide you
235:01 - through the real process of setting up
235:02 - tools that companies and developers use
235:05 - on the daily basis and I wanted to guide
235:08 - you through the errors that I
235:09 - experienced in my process and way of
235:11 - fixing them this time we don't have to
235:13 - redeploy our app we can just log out and
235:16 - try to create another account I'll use
235:18 - one of the last remaining emails I have
235:20 - to test it
235:21 - out enter my password and upload my
235:25 - University card and click sign up there
235:27 - we go now let's go through all the steps
235:29 - one more time like we're firing up a jet
235:32 - engine we're going to go through all the
235:35 - steps and make sure everything is
235:36 - running smoothly Q stash run started a
235:40 - few seconds ago recent status 200 less
235:43 - than a minute ago under emails we have
235:47 - our welcome to the platform email and
235:49 - finally in your inbox you should be able
235:51 - to see a message from JS Mastery which
235:54 - should come from your own domain contact
235:56 - Adrian JS mastery.com that should say
235:59 - something simple like welcome JSM even
236:02 - though this is a very plain looking
236:04 - email in plain text as I told you recent
236:07 - allows you to craft your emails using
236:10 - react components on recent landing page
236:13 - if you scroll to the section of develop
236:16 - emails using react you can see just what
236:18 - is possible and just how beautiful these
236:21 - emails look like this is something we'll
236:23 - cover in the pro version of this course
236:24 - so if you're already watching within JS
236:26 - mastery. Pro platform keep watching but
236:29 - if you're in YouTube you might want to
236:31 - transition over there and get all of the
236:33 - benefits by watching this on the
236:34 - platform directly and I don't have to do
236:37 - any further thinking for all of the
236:38 - upcoming users I didn't share this app
236:41 - anywhere so far but it looks like you
236:43 - guys have been triggering workflows like
236:45 - crazy I can already see like five or
236:48 - more emails triggered just in the last
236:50 - couple of minutes I can't imagine what
236:52 - you'll do with this app once I actually
236:54 - release it on YouTube but the good thing
236:55 - to know is that Q Stash's workflows can
236:58 - handle it all because they're incredibly
237:00 - scalable making your app production
237:02 - ready and that's how you do it that's
237:05 - how you implement workflows in your
237:07 - applications you should now be able to
237:09 - do any kind of workflow needed for any
237:11 - kind of application but later on as part
237:14 - of the pro part of this course just for
237:17 - practice I'll teach you how to implement
237:18 - another workflow for reminding your
237:21 - users as to when their book is due to be
237:23 - returned so keep
237:27 - watching so far you've developed a
237:29 - feature packed library application but
237:33 - it's not yet a library management system
237:36 - as a matter of fact almost every single
237:39 - Enterprise ready application isn't just
237:41 - a single public facing website like this
237:43 - one typically it consists of multiple
237:46 - applications that work together think of
237:48 - an e-commerce store where people can see
237:51 - and buy the products but that store has
237:53 - another admin interface through which
237:56 - employers can add additional products
237:58 - think of Netflix which is very similar
238:00 - to a library application where people
238:02 - can browse different movies but there's
238:05 - a behind the-scenes interface through
238:07 - which those movies can be added by now
238:09 - I'm pretty sure you understand the
238:10 - importance of having a complete admin
238:13 - interface to manage the creation of
238:15 - whatever we're seeing on the public
238:17 - facing website so for this platform we
238:20 - have already built a greatl looking user
238:22 - facing platform where we can show the
238:24 - books and allow users to borrow them but
238:27 - now we'll develop a completely new app
238:30 - allowing admins to manage those books
238:33 - which makes it a fully-fledged full
238:35 - stack Library management solution with
238:38 - an admin dashboard first we'll focus on
238:41 - taking a look at all of the users that
238:42 - have been created so far and then
238:44 - creating an interface that will allow us
238:46 - to add new books to the library so I
238:49 - hope you're excited what do you say are
238:51 - you ready to bring this app to another
238:53 - level and go from what we typically do
238:56 - in YouTube tutorials and build something
238:58 - that you don't see every day an admin
239:00 - dashboard interface connected with the
239:02 - public facing app so let me teach you
239:04 - how we can approach creating these two
239:06 - separate applications within a single
239:09 - file and folder structure which
239:10 - basically means that we're creating a
239:12 - monol lifee application where everything
239:14 - we need for whatever application we need
239:16 - connected with the main app is consisted
239:18 - right within the same folder so let's
239:21 - create a new folder within which we'll
239:23 - handle all of the admin related stuff
239:25 - such as showing statistics users
239:27 - requests book creation and more we can
239:30 - do that right here within the app and
239:32 - then create a new folder and call it
239:38 - admin and then create a new page. DSX
239:44 - and use rafc right within it and what do
239:48 - you think why didn't we use parentheses
239:50 - around the admin to make it a route
239:52 - group well that's because we want to
239:55 - have admin to be as part of the route so
239:59 - we can go to admin and then maybe
240:01 - forward slash is just the home or maybe
240:03 - we can go to admin and then dashboard or
240:06 - admin forward SL users that's the reason
240:09 - why I didn't turn the admin folder into
240:10 - a route group rather we want it to be
240:12 - included within the URL path now if you
240:15 - check out the design you'll notice that
240:17 - the admin dashboard is completely
240:19 - different from our user facing app
240:21 - everything from the color which I have
240:24 - purposely changed to light to look
240:25 - similar to most admin dashboards also
240:28 - here we have the sidebar and on the main
240:30 - app we had the Navar and then here we
240:32 - have some tables and so on so it is
240:35 - completely different which means that we
240:37 - have to create a completely new layout
240:39 - for the admin folder so let's go ahead
240:42 - and do that by creating a new new file
240:45 - and call it layout. DSX run our afce
240:49 - inside of here and let's quickly spin up
240:52 - a new layout we'll create a main and
240:54 - that main will have a class name equal
240:57 - to flex m-- screen w- full and flex -
241:03 - row right within it we'll render a
241:05 - simple
241:06 - sidebar and then we'll have a div with a
241:09 - class name equal to admin-c container
241:14 - and within it we'll render a P tag that
241:17 - for now will'll say header and finally
241:19 - here we can render the
241:21 - children the children are coming through
241:24 - props as with every layout so we can
241:26 - destructure the children right here and
241:29 - say that children are of a type react
241:33 - node coming from react and we can also
241:35 - check if there is an active session
241:37 - right here by saying con session is
241:40 - equal to a wait so let's add a sing
241:44 - right here and we can check if o exists
241:48 - or rather whether o returns a valid
241:51 - session if there is no session question
241:55 - mark. user. ID or question mark. ID in
241:59 - that case we can simply redirect to SL
242:03 - signin so we can sign that user in and
242:05 - check whether they have admin privileges
242:07 - another thing we need are the Styles so
242:10 - let's create a new folder outside of the
242:13 - app folder
242:14 - and let's call it Styles and within
242:17 - Styles we can create a
242:19 - new admin. CSS style similar to the
242:24 - global. CSS that we had before and then
242:26 - if you head over below this video find
242:28 - the GitHub repo and head over to code
242:30 - Snippets to copy you can find this
242:32 - complete admin. CSS file it won't
242:35 - contain a lot of stuff just some helper
242:37 - functions to make it easier to create
242:39 - our sidebar headers and some error
242:42 - handling no logic here just styles to
242:45 - make sure that we can focus on what
242:47 - truly matters so once you get it here
242:50 - make sure to import it right within the
242:52 - layout by saying
242:54 - import at/ Styles SL admin.
242:59 - CSS if you do that you can head back to
243:02 - your application and navigate over to
243:05 - localhost 3000 for sadmin and you'll see
243:09 - that your entire application interface
243:11 - will change in an instant now we have a
243:14 - sidebar on the left with a header on the
243:15 - top and then the main page in the middle
243:18 - and of course this layout changes as we
243:20 - expand the screen of course we have to
243:23 - make it a bit more responsive but it'll
243:25 - do the trick for
243:26 - now this is just the layout so let's
243:29 - focus on creating the sidebar first I'll
243:31 - head over to the components folder and
243:34 - create a new folder within it which I'll
243:36 - call admin and within the admin folder
243:39 - we can keep all of the components
243:41 - dedicated strictly for the admin app so
243:44 - let's create a new file within it and
243:46 - let's call it sidebar. TSX run RFC
243:50 - within it and then import it right here
243:53 - within the
243:54 - layout by simply saying sidebar and then
243:57 - self close it right here like this and
244:00 - now let's develop it together we can do
244:03 - that by heading into the sidebar and
244:06 - starting with a div that's wrapping it
244:08 - let's give it a class name equal to
244:11 - admin Das sidebar Within it create one
244:15 - empty div and within that div create
244:17 - another div with a class name equal to
244:20 - logo within it render a nextjs image
244:24 - with a source of SL ions SL admin
244:29 - logo.svg with an Al tag of
244:32 - logo a height of about 37 a width of
244:37 - about 37 as well and you can close it
244:40 - there that should show our admin side
244:43 - logo
244:45 - and you can also render an H1 and say
244:47 - something like bookwise which is the
244:50 - name of our application by implementing
244:52 - the admin sidebar Styles you can notice
244:54 - that the H1 is not present on smaller
244:56 - devices but if I expand it you can see
244:59 - it right here now let's head below the
245:01 - div that is wrapping the H1 and let's
245:03 - create another div with a class name
245:07 - equal to margin top of 10 flex
245:11 - flex-all and a gap of five and within
245:14 - here we can map over all of our sidebar
245:17 - elements it should look something like
245:19 - this we need to have the homepage all
245:21 - users all books borrower requests and
245:24 - account requests and then at the bottom
245:26 - we'll show some profile information to
245:28 - do that you need to create some kind of
245:30 - an array of links to map over that can
245:33 - look like this an array of objects where
245:38 - you can Define the icon and the text and
245:41 - then you would need to duplicate it many
245:42 - times and then run the dot map on
245:45 - it but we never want to do this right
245:48 - here within this file as it's clattering
245:50 - the jsx view instead you can pull it
245:53 - into constants so let's head over into
245:55 - constants
245:56 - index.ts and here alongside sample books
246:00 - right at the top you should also be able
246:02 - to see admin sidebar links allowing us
246:05 - to quickly map over them so let's do
246:07 - just that I'll say admin sidebar links.
246:11 - map where we get each individual link
246:14 - and for each link we can open up a
246:16 - function block first we want to figure
246:19 - out whether this link is currently
246:21 - selected so I'll say is selected and
246:24 - I'll set it equal to false right now
246:27 - then we can return how each one of these
246:29 - links will look like first of all it'll
246:32 - be a nextjs link with an href pointing
246:35 - to
246:36 - link.
246:38 - route and its key will also be link.
246:41 - route since it is unique then within
246:44 - that link we can render a div that div
246:47 - will have a class name equal to it'll be
246:50 - a dynamic class name so we can call the
246:53 - CN and first it'll always have a class
246:56 - name of Link but then only if it is
247:00 - selected then we will also apply a class
247:03 - name of BG primary admin and Shadow DSM
247:07 - you'll see soon what difference that
247:08 - will make within that div we can have
247:11 - another div that'll have have a class
247:14 - name equal to relative and a size of
247:18 - five this is to wrap our
247:20 - image so let's create an image right
247:23 - here with a source of link. IMG and an
247:27 - I'll tag of Icon a property of fill and
247:32 - a class name of now this is a pretty
247:35 - interesting feature in CSS that you can
247:37 - do and that is to invert the color of
247:41 - the image based on a specific proper
247:43 - property making it work on both dark and
247:45 - light backgrounds you can do it like
247:47 - this first check if is selected and if
247:51 - it is selected then change the
247:53 - brightness over to zero and invert the
247:56 - colors else simply apply nothing and
247:59 - always it can have object contain if you
248:02 - do that now and properly close it you
248:04 - can see five different icons will appear
248:06 - right here later on as we select them
248:09 - you'll also be able to see that they'll
248:10 - change color it should look something
248:12 - like this typically they're gray but if
248:15 - it's selected they should turn white I
248:17 - remember first using this technique of
248:19 - changing the icons maybe 5 years ago
248:22 - when I was creating the filmire course
248:24 - it was my first react course ever since
248:27 - then I also used it within the ultimate
248:29 - nextjs course and now finally within
248:32 - this course as well I used to think we
248:33 - need to have two separate images for
248:35 - different colors but no with a bit of
248:37 - CSS magic you can make it work there we
248:40 - go I fixed the typo and now we can head
248:42 - over below this div and render a P tag
248:45 - that'll simply render the link. text it
248:48 - can have a class name equal to if CN is
248:54 - selected so if is selected then it'll
248:57 - have a text white else it'll have a text
249:01 - dark it's pretty easy to work with text
249:03 - right to change colors now if I expand
249:06 - this you'll see that on larger devices
249:09 - there is text now how do we figure out
249:11 - which link is currently Act active when
249:14 - we're just on admin the homepage should
249:16 - be active so we can do that by using the
249:20 - route parameters or the path name so
249:23 - right here at the top of our component
249:25 - we can say const path name is equal to
249:28 - use path name coming from next
249:31 - navigation and since we're using path
249:33 - name we have to use browser
249:35 - functionalities which means that we have
249:37 - to make this component client rendered
249:40 - so let's add a use client directive at
249:42 - the top with that in mind we can fix
249:44 - this is selected to false to implement
249:47 - the logic of actually changing it
249:49 - dynamically we can do it like this put
249:52 - parentheses and then check if link.
249:55 - route is not equal to SL admin so this
249:59 - is the
250:00 - homepage and if path name do includes
250:06 - link. route and if link.
250:09 - route. length is greater than one exit
250:13 - exit parenthesis and say or if path name
250:17 - is triple equal to link. route in those
250:20 - two cases the route is selected so you
250:24 - can see that currently homepage is
250:26 - selected I'm going to zoom it in a bit
250:28 - so you can see that this icon indeed
250:30 - turns white cool and as I Collapse this
250:34 - to mobile we can only see the collapsed
250:36 - icons without the text to conserve some
250:39 - space perfect now let's head down and
250:42 - let's implement the C for the user
250:44 - profile we can do that by going below
250:46 - two of these
250:47 - divs and creating another div with a
250:51 - class name equal to user within it we
250:55 - can create an avatar this is a component
250:57 - that we can import from components UI
250:59 - Avatar and we can refer to how we called
251:02 - it previously let me see Avatar it was
251:06 - in the header yep we have to call it
251:08 - like this so let's copy this part and
251:12 - just let's let's call it here again
251:15 - Avatar Avatar foldback get initials and
251:19 - then we have to get access to the
251:20 - session and we can get access to that
251:22 - session by simply passing it over from
251:24 - the layout so here I'll say session is
251:27 - equal to
251:29 - session and moving into the sidebar we
251:31 - can destructure it right here and set
251:35 - the type of session to be equal to
251:39 - session coming from next o if you do
251:42 - that you can now see see this little
251:43 - Avatar icon which says a for Adrian and
251:46 - right below it we can also render
251:48 - another div with a class name equal to
251:51 - flex
251:53 - flex-all and on Max MD devices hidden
251:57 - we're hiding it because we only want to
251:59 - show it on desktop
252:00 - devices and that something will actually
252:03 - be a P tag that'll render the session
252:06 - question mark. user question mark. name
252:09 - we can duplicate it below and also
252:11 - render the email so that'll look
252:14 - something like this and we can also
252:16 - provide some additional class names like
252:20 - font - semi bold text- dark 200 and for
252:25 - the second one we can give it a class
252:27 - name equal to text- light 500 text- XS
252:32 - for extra small there we go this is
252:35 - looking better and as we collapse it to
252:37 - mobile view you can see that now we have
252:39 - only the Avatar perfect and now that we
252:41 - have the sidebar let's Al create a
252:43 - header which is the second and the last
252:45 - component within our layout so I'll head
252:48 - over to the components folder into the
252:50 - admin folder and create a new file
252:53 - called header. TSX and I'll run RFC
252:58 - within it then within the layout we can
253:01 - simply import it and use it right here
253:04 - by saying header coming from components
253:07 - admin header because they're different
253:10 - and I'll also pass a session to it
253:12 - because I'm sure will need to use it so
253:15 - now let's get into the header and let's
253:17 - implement it starting with getting
253:20 - access to that session that we're
253:22 - passing over that is of a type session
253:27 - session we can change this over to an
253:29 - HTML 5 semantic header tag as well as
253:32 - give it a class name of admin Das header
253:36 - within it we can render a div that'll
253:38 - have an H2 which will render the session
253:41 - question mark. user question mark name
253:43 - and below the H2 we can render a P tag
253:46 - that'll say something like monitor all
253:50 - of your users and books here so let's
253:55 - give them some styles by giving it a
253:58 - class name equal to text- dark 400 and
254:02 - font D semi
254:04 - bold as well as text- 2
254:07 - Excel and let's also give this ptag a
254:11 - class name
254:13 - equal to text- slate d500 and
254:19 - text-base there we go looking good and
254:22 - finally below this div we can render a P
254:25 - tag which for now will'll say search
254:28 - later on we'll convert this into a fully
254:30 - fledged functional search but for now
254:32 - we'll leave it as it is or you can even
254:35 - comment it out and with that done we
254:37 - have implemented the complete layout for
254:40 - the admin dashboard of course that is
254:42 - only the layout we are yet to implement
254:44 - the main dashboard page so yep this
254:47 - right here is the main admin
254:51 - dashboard but what matters most is that
254:54 - the main layout is now done so now we
254:56 - can very easily switch between other
254:58 - pages and Implement them first one of
255:01 - which will be a page within which we can
255:03 - add new books to the library as admins
255:07 - so let's do that in the next
255:10 - lesson first let's implement the ability
255:13 - for admins to add new books for that we
255:16 - have to implement the all books route so
255:18 - heading back into the code let's head
255:20 - over to our admin and create a new
255:23 - folder called
255:25 - books and within books Let's create a
255:28 - new page. DSX within which we can run
255:31 - rafc allowing us to visit this route
255:34 - just to verify it's the one I can change
255:36 - this text over to books and it changes
255:38 - right here so let's turn this into a
255:41 - section and let's give it a CL last name
255:43 - of w fool rounded D2 XL as well as BG
255:49 - white and p7 now we have a card-like
255:52 - layout within it we can create a div and
255:56 - that div will have a class name all Flex
256:00 - flex-wrap items Das Center justify Dash
256:04 - between and a gap of two within it we
256:08 - can display an H2 that'll have a class
256:10 - name of text- excl
256:13 - and font D semi Boldt and it'll simply
256:16 - say all
256:19 - books there we go that's better below it
256:23 - we can render a
256:24 - button and that button will simply say
256:28 - plus create a new book let's give the
256:32 - button a class name of BG primary
256:37 - dadmin and that button will actually be
256:39 - a link so we can say as child which
256:42 - means that the button will actually
256:43 - become a link href will be SL admin SL
256:48 - books slne and now the link will render
256:52 - the text that the button was before
256:54 - rendering that'll look something like
256:56 - this of course let's style this further
256:58 - by giving it a class name of text- light
257:02 - 100 or we can do just text white now we
257:07 - can head below this button and below the
257:09 - div and create another div which will
257:12 - wrap our
257:13 - table so we can just do a P tag for the
257:16 - table right now but later on we'll turn
257:19 - it into a fully fletched dashboard
257:21 - worthy table it'll have a class name of
257:24 - margin top of seven to divide it a bit
257:26 - from the top w- full and overflow Dash
257:30 - hidden so now this is looking more like
257:32 - an actual page within a dashboard but
257:35 - why do we need the all books page and
257:37 - the table if we don't yet have any books
257:40 - so what do you say that we focus on the
257:41 - more important component first which is
257:44 - the form that allows us to add books to
257:47 - the library and utilize our full
257:49 - permissions as admins of the site we can
257:51 - do that by creating a new page within
257:54 - books or it's going to be a new folder
257:56 - rather called
257:58 - new and within new we can create a new
258:02 - page. TSX where we can run our afce so
258:06 - now if you click on create a new book
258:08 - you'll be redirected to that page within
258:10 - it we can return an empty react thre M
258:13 - and within it we can return a button
258:16 - that button will once again render a
258:18 - link with an href all SL admin SL books
258:23 - and a text that says go back so if at
258:26 - any point we want to go back to the old
258:28 - books page now we can do that let's say
258:31 - that this button will act as a child as
258:34 - before to make it become a link and give
258:37 - it a class name of back-
258:39 - BTN perfect so now I can go back and we
258:43 - can create a new book to create it
258:45 - though we'll need a new section right
258:47 - here below the button with a class name
258:50 - of
258:51 - w-o and Max
258:53 - dw-2 EXL within it we'll render a new
258:57 - book form that'll be a big form
259:01 - component bigger than what we had on
259:04 - registration form to allow us to add all
259:06 - of the important information about a
259:08 - book so before we create that form let's
259:11 - actually head over to validation .ts
259:14 - where we had validations for the signup
259:16 - schema as well as the signin schema now
259:19 - we want to have another one for the book
259:21 - form so let's say
259:24 - export const book schema is equal to z.
259:30 - object and then what will a book have
259:33 - well it'll have a title of z. string.
259:37 - trim. min
259:39 - 2. max 100 meaning that it can have no
259:44 - less than two characters and no more
259:46 - than 100 now we can repeat this and
259:49 - render the same thing for the author
259:52 - next let's have a genre so we can have
259:54 - something like genre will be very
259:57 - similar but maybe it cannot have 100
260:00 - characters it can be just about 50 a
260:02 - book can have a rating which will be z.
260:05 - number and it can be a Min of one and a
260:11 - Max of five so it's a rating between one
260:13 - and five it can also have a number of
260:15 - total copies so that'll look something
260:18 - like this total copies is z. coer coer
260:22 - means that we want to turn it into a
260:24 - number so we'll say int which means
260:27 - integer do positive so it must be a
260:30 - positive integer and LTE which means
260:33 - lower than and then we can put something
260:34 - like 10,000 here let's say that the
260:37 - 10,000 is the upper limit oh and under
260:39 - cores you don't actually have to call it
260:41 - you just say z.c
260:43 - do number and then you keep writing it
260:46 - as you're used to after that we can also
260:48 - have a description which will be similar
260:50 - to the title so let's add it right below
260:53 - it'll be
260:55 - description but let's say that it can be
260:57 - a minimum of 10 characters and a maximum
261:00 - of 1,000 characters after that we can
261:03 - have a cover URL so let's say cover URL
261:07 - is z. string and it must not be empty so
261:10 - I'll say nonempty next we need a cover
261:13 - color to be able to choose how the
261:15 - covers of the book will look like so
261:17 - that'll be a z. string. trm and it must
261:21 - be a valid heximal color so here we
261:25 - could write a regular expression that
261:27 - will check for the validity of a hexol
261:29 - code so say do Rex and here it must
261:33 - start with a hash and then contain
261:35 - numbers from 0 to 99 and letters from A
261:38 - to F and it must have six characters
261:41 - it's pretty crazy how get copilot fill
261:43 - this out for me it'll also contain a
261:45 - video URL about a book which is of a
261:47 - type z.
261:49 - string. non mty and finally it'll have a
261:52 - summary of the book which is z. string.
261:56 - trim. Min of 10 characters great so now
262:01 - we have our book schema and we are ready
262:03 - to create a new form so let's head over
262:07 - to our components head over to admin
262:10 - create a new folder called form
262:13 - forms and within forms create a new file
262:17 - called book form.
262:20 - DSX and within it we'll actually want to
262:22 - implement a regular shat CN form I think
262:25 - we've already done something similar
262:27 - back in our OD form right remember that
262:30 - one it's this one right here it's a
262:33 - pretty lengthy one but it has most of
262:35 - the things that we already need for the
262:37 - form so what do you say that we copy it
262:39 - get rid of the things that we don't need
262:41 - and then utilize the fields that we
262:43 - actually need I'll copy the entire thing
262:45 - and paste it into the book form now if I
262:47 - save it we are ready to go back to the
262:50 - page. TSX and import book form right
262:53 - here you'll notice that webstorm will
262:55 - automatically ask me to provide all of
262:57 - these required props that we typically
262:59 - provide to forms but for now I'll skip
263:01 - providing any of them because we don't
263:03 - actually have them as this is not an odd
263:05 - form so let's head into the book form
263:08 - and let's get it rid of all of these
263:09 - props as in this case it doesn't have to
263:11 - accept many I'll remove this T extends
263:14 - values in this case we don't have to
263:16 - make it as reusable as we did before
263:18 - it'll only accept a prop of type and we
263:21 - can also spread all of the properties
263:24 - about the book this is if we're editing
263:27 - a book that we already have the
263:28 - information for and this can be of a
263:31 - type props so now we can change the
263:34 - props and it'll only accept one prop
263:37 - which is an optional type of create or
263:42 - update date pretty simple and instead of
263:45 - extending field values props will now
263:49 - extend a partial type off book coming
263:53 - from types. D.S we are importing the
263:56 - router that is good in this case we
263:58 - don't have to be considered whether it
263:59 - is sign in or sign up the form
264:01 - declaration will look a bit simpler here
264:03 - we can just say const form is equal to
264:06 - use form z. infer type of book schema so
264:12 - so here we're using that validation to
264:14 - make sure that our form is filled in
264:15 - correctly we pass in the resolver with
264:18 - the book schema and let's not forget to
264:20 - import Z from Zod which is actually
264:22 - doing the validation and then here we
264:24 - can provide the default values now for
264:27 - the default values we can grab all of
264:29 - the values from the validation from the
264:31 - schema you can do that by holding the
264:33 - option key and then selecting by double
264:37 - clicking all of these fields right
264:39 - here once you do that simply go ahead
264:42 - and paste them here select the end of
264:45 - each one to add multiple cursors and
264:48 - then simply give them their default
264:50 - value for most it'll be an empty string
264:53 - but for some like the rating or the
264:55 - number of total copies it'll actually be
264:58 - set to a number like a one so now we
265:00 - have the form set up as well after that
265:03 - we'll have an onsubmit function so let's
265:05 - actually remove the existing handle
265:07 - submit and let's just make something
265:09 - simple like const onsubmit
265:12 - is equal to an asynchronous function
265:15 - that accepts values of a type z. infer
265:19 - type of book schema so what this means
265:22 - is that we'll simply get the values off
265:24 - of the fields of the form and then for
265:27 - now we can simply leave it as an empty
265:29 - callback function and then finally we
265:30 - have the return in this case we simply
265:33 - want to have the form nothing else so I
265:36 - will remove everything before the form
265:38 - and everything after the form right here
265:41 - just keeping the form element I'll
265:42 - change the forms handle submit to be
265:44 - equal to onsubmit remove this W full and
265:48 - just make it space Y8 to give it some
265:51 - more space and in this case we won't be
265:53 - mapping over any default values we'll be
265:56 - just rendering different form Fields one
265:58 - by one so the first one will be a form
266:00 - field that'll have a name of title and
266:03 - we can remove the rest then it'll render
266:05 - a form item with a class name equal to
266:09 - flex flex-all and the gap of
266:12 - one with a form label of class name
266:17 - text-base font dormal and text- dark
266:22 - 500 and here we don't have to do any
266:25 - kind of magic here mapping over the
266:26 - items in this case we can make it simple
266:29 - so I have shown you both of how we can
266:31 - make it super reusable by mapping over
266:33 - all of the fields similarly to what we
266:35 - have done within the OD form and then
266:37 - here we can literally just say hey this
266:40 - is a single form field doing a single
266:42 - thing thing so let me spell it out for
266:43 - you book title after that we have a form
266:46 - control which will render just a simple
266:48 - input so the only thing we can keep is
266:50 - an input which will be required it'll
266:52 - have a
266:54 - placeholder equal to book title we'll
266:58 - spread the field and it'll have a class
267:00 - name of book-
267:02 - formore input finally we can exit the
267:05 - form control render the form message
267:08 - remove all of these additional
267:10 - parentheses and move the button that we
267:13 - have at the bottom and this should leave
267:15 - us with a pretty straightforward looking
267:17 - form we did do a lot of the cleanup you
267:20 - can see some values are still unused
267:22 - we'll use them
267:23 - soon and we can definitely remove many
267:26 - of the Imports here as well as here and
267:29 - here bam only now I can see how big and
267:31 - reusable the initial odd form really was
267:34 - now that I see how many Imports there
267:36 - are but as you can see now we have a
267:38 - very clean and straightforward not odd
267:41 - form we can actually rename this to book
267:46 - form and we can rename it at the bottom
267:48 - allowing us to create new
267:50 - books so far we only have one single
267:53 - form field which is the book title but
267:56 - we actually need many many more the full
267:59 - form will look something like this
268:01 - everything from book title to author
268:03 - genre total number of books book image
268:06 - primary color video and so on so the
268:10 - reason why I didn't just map over all of
268:11 - these these inputs and do it similar to
268:14 - the OD form is because here we have a
268:16 - couple of different types of inputs the
268:18 - first three are regular text inputs the
268:21 - fourth one is a number input then we
268:24 - have two different file uploads one for
268:26 - images and one for videos that'll be
268:28 - exciting then we have a specialized
268:31 - hexadecimal input for color selection
268:33 - and finally we have a long text area for
268:35 - the book summary so let's go ahead and
268:37 - code out all of these inputs I think the
268:39 - simplest way to do that is to Simply
268:42 - copy this form field and duplicate it
268:44 - below now if you go back you immediately
268:47 - have two different inputs but this time
268:49 - we'll change the name from title to
268:52 - author we'll also change the form label
268:54 - to say author and then in the input we
268:56 - can just say something like book author
268:59 - there we go as simple as that let's also
269:02 - copy it one more time and paste it just
269:05 - below this time we won't be dealing with
269:08 - the author we'll be dealing with the
269:09 - genre of the book so let's say genre or
269:12 - the category and then here we can say
269:15 - book
269:16 - genre there we go now let's go for the
269:19 - fourth one so I'll copy the same input
269:21 - once again but this time we'll have to
269:23 - modify it just a bit this time it'll be
269:25 - rating so we can say rating here as well
269:29 - and we can say book rating and change
269:32 - the type over to number okay pretty cool
269:35 - right I think the number also allows us
269:37 - to provide a Min and a Max so if I set
269:40 - Min to one and Max to 5 I actually
269:43 - believe it'll limit it from 1 to 5 there
269:46 - we go this is pretty cool right after
269:48 - that we can copy this input or form
269:51 - field and create another one for the
269:54 - total number of copies so I can say
269:56 - total copies and then say total copies
269:59 - here and
270:00 - finally total copies here as well I
270:03 - think the max here is 10,000 so I'll set
270:06 - it to 10,000 and set to Min to be equal
270:08 - to zero or if we're adding a book it
270:11 - must be one right right after that we
270:13 - can duplicate this form field one more
270:15 - time this time we're dealing with a
270:17 - cover URL for this book so we can change
270:21 - the form label to book image and then
270:24 - within the form control for now I'll
270:26 - leave it empty because here we want to
270:28 - have a specialized file upload component
270:32 - even though so far we've created an
270:34 - image upload we'll take that image
270:36 - upload and make it more reusable to
270:38 - allow us to upload both images and
270:40 - videos we can also duplicate it one more
270:43 - time this one will deal with the cover
270:45 - color so we can say primary color here
270:48 - as well and instead of rendering a file
270:51 - upload here we'll Implement a Color
270:54 - Picker which we don't yet have so we'll
270:56 - also leave it commented out for now and
270:58 - I'll duplicate it once more this time
271:01 - for the description so I'll say
271:03 - description the form label will say book
271:07 - description and within the form control
271:09 - we can render a text area element text
271:12 - area has to be added from shaten and we
271:14 - haven't installed it yet so let's do
271:16 - that now by saying MPX shaten add latest
271:20 - add text area there we go it got added
271:24 - very quickly so let's one more time
271:27 - import it from a proper
271:29 - place it's coming from UI components
271:33 - it's a self-closing component that has a
271:36 - placeholder we can say something like
271:38 - book description let's also spread all
271:40 - the field information into it so we can
271:42 - modify the form give it 10 rows because
271:45 - somebody might write a long description
271:48 - and then give it a class name of book-
271:51 - formore input just to make it look a bit
271:54 - nicer finally below it we'll have
271:56 - another file upload so I'll copy the
271:59 - initial cover
272:01 - URL and paste it below the book
272:05 - description and this one will say video
272:10 - URL and it'll say book video or we can
272:15 - call it book
272:16 - trailer and here we also have to
272:18 - implement a file upload component
272:21 - finally we'll have a summary a book
272:23 - description is a bit different than a
272:25 - book summary but they're still similar
272:27 - so I'll go ahead and copy the book
272:29 - description form field and paste it
272:32 - right here at the bottom and call it
272:35 - summary book summary change the
272:38 - placeholder to book summary maybe make
272:41 - it five
272:42 - rows I think we're good finally what
272:45 - would the form be without a button so
272:47 - right below the last form input let's
272:50 - create a button a button that will say
272:53 - add book to library it'll have a type of
272:56 - submit so it'll submit the full form and
272:59 - a class name equal to book-
273:05 - formore
273:06 - BTN so it'll look something like
273:10 - this we can also get it a text- white
273:14 - property there we go so with that in
273:17 - mind we have just built out the entire
273:19 - UI of our form it looks good on mobile
273:21 - but here's how it looks like on desktop
273:23 - of course it could have been further
273:25 - stylized by maybe making the book title
273:28 - take half a row and then the author
273:30 - could take another half a row but you
273:32 - know what with these admin dashboard
273:34 - applications design is never what
273:37 - matters you know how I always talk about
273:39 - how UI ux and design really matter
273:41 - because people are visual beings well it
273:43 - does matter on public client facing
273:46 - websites does it matter in an admin
273:48 - dashboard that only people adding those
273:50 - books will see not at all there the most
273:53 - important thing is that it's simple to
273:55 - understand and simple to use so we can
273:57 - very quickly go here and add new books
274:00 - in a matter of seconds so with that in
274:03 - mind we now have a nice skeleton of the
274:05 - form but we're still missing some Fields
274:08 - so let's go ahead and add them in the
274:10 - next lesson
274:13 - for admins to be able to add new books
274:15 - to the library they need to be able to
274:17 - upload some files be that a book in a
274:20 - PDF format maybe a cover image of that
274:23 - book or even a video trailer they'll
274:25 - need to upload some files and make them
274:27 - accessible for everyone to see so back
274:30 - on the public facing website we can
274:32 - quickly retrieve those files and show
274:34 - them to the users if you remember we
274:36 - already had to do something like that on
274:37 - our signup page where we provided the
274:40 - users with the ability to upload their
274:42 - University ID card and for that we used
274:44 - image kit and created this image upload
274:47 - component now since we'll have to upload
274:49 - both videos and images let's modify that
274:52 - image upload component to handle uploads
274:54 - of both of these file types I'll rename
274:57 - the image upload component to file
275:00 - upload and will once again use image
275:03 - Kit's grade feature to allow us to
275:05 - upload those images and now even videos
275:08 - and then later on very easily deliver
275:10 - them to our user
275:12 - to do that first let's accept some more
275:14 - props into our file upload component
275:17 - I'll leave the on file change here but
275:19 - I'll actually copy its type declaration
275:22 - and I'll just change it to props because
275:24 - we'll be adding many more props to it so
275:26 - let me declare a new interface called
275:28 - props right here and Define the on file
275:31 - change type but on top of that we want
275:34 - to add many more Fields such as type to
275:38 - allow us to figure out whether we want
275:40 - to accept an image or a video next we
275:43 - have the accept property I'll explain
275:45 - very soon what that does a placeholder
275:48 - also of a type string a folder in which
275:50 - you want to place that file a variant
275:53 - which can be either dark or light and
275:56 - finally the on file change so now let's
275:59 - accept all of these props right here so
276:01 - we can later on pass them into this new
276:03 - reusable file upload component I'll be
276:06 - getting a type accept placeholder folder
276:11 - variant and on file change great from
276:14 - before we have this ik upload ref
276:17 - allowing us to upload those files and we
276:20 - have a state allowing us to set that
276:22 - file to the state I'll introduce yet
276:24 - another state right here called
276:27 - progress and set progress at the start
276:30 - set to zero image kit will very easily
276:32 - allow us to track the progress of our
276:34 - upload which is super handy for larger
276:37 - files or videos then we can Define some
276:39 - Styles right here at the top so we can
276:41 - very easily use them later on within the
276:43 - code we can Define the styles for the
276:45 - button depending on the variant so if
276:48 - the variant is triple equal to dark that
276:51 - means that we're showing this component
276:53 - on the public facing website not on the
276:55 - admin dashboard in that case we can give
276:58 - it a BG dark of 300 but if we're showing
277:01 - it on the admin dashboard we can give it
277:03 - a BG light of 600 border gray of 100 and
277:09 - a border we can also mod modify the
277:11 - color of the placeholder so if the
277:14 - variant is triple equal to dark we can
277:17 - change the text to light 100 else it can
277:22 - be text- slate d500 and finally we can
277:26 - create styles for the text itself where
277:29 - if the
277:30 - variant is triple equal to dark in that
277:33 - case we can change the color to light
277:36 - 100 else we can have dark 400 the on
277:40 - eror that's we had here will remain the
277:43 - same but we'll just say not image right
277:45 - here we'll say type upload
277:49 - fail which will look something like this
277:51 - so if it's an image it'll say image
277:53 - upload failed else it'll say video
277:55 - upload failed same thing here I'll just
277:58 - change this over for type we can also
278:01 - collapse everything that we don't need
278:03 - so Styles and the on error after that we
278:06 - have the on success where we can do the
278:08 - same thing instead of saying image we
278:10 - can say type upload failed and then we
278:13 - can leave this the same perfect now an
278:15 - additional thing that we can do with
278:17 - image kit is provide validation for the
278:20 - files we're uploading so I'll say const
278:22 - on
278:23 - validate is equal to a function where we
278:26 - accept a file of a type file and then we
278:29 - can check if the type of the file is
278:33 - image and if the file size is greater
278:36 - than 20 * 124 * 124 which is is 20
278:41 - megabytes we can return some kind of a
278:45 - toast where we can say title file size
278:49 - too large upload a file that is less
278:51 - than 20 megabytes in size and a variant
278:54 - of destructive and after the toast we
278:56 - can return false as in we're not going
278:59 - to validate this we're not going to let
279:00 - it slide we can exit this if the one
279:03 - that says type is image and add an else
279:05 - if and check if type is triple equal to
279:09 - video if that is the case we want to
279:12 - check if file. size is greater than 50
279:15 - megabytes so that's 50 * 124 * 124 and
279:20 - we want to do a similar thing saying
279:22 - file size too large upload a file that
279:24 - is less than 50 megabytes in size and
279:27 - once again we want to return false oh
279:29 - and it looks like I added an else on the
279:31 - wrong if the else was actually supposed
279:34 - to go under this if so let me actually
279:36 - copy this part of the
279:38 - code and put it one if below
279:43 - there we go this is good so now we have
279:44 - if image and then we have an else if
279:47 - video perfect and if we reach outside of
279:50 - both of these ifs that means that we can
279:51 - say return true the validation is good
279:55 - finally we can now improve our image kit
279:57 - upload to make it more versatile more
280:00 - robust and more flexible we'll do that
280:02 - first by defining the ref attached to
280:05 - this I upload after the ref we have an
280:07 - on error and on success we can remove
280:10 - this file name right here and then we
280:12 - have a class name hidden because
280:14 - remember we wanted this component to
280:16 - look nicer so we're actually hiding it
280:18 - here but then we're calling this
280:19 - component on a click of the button that
280:21 - is then more properly styled and now we
280:24 - can use many different props that image
280:26 - kit provides out of the box that give
280:28 - you additional
280:29 - functionality such
280:31 - as use unique file name and we can said
280:35 - that to
280:36 - True validate file and here we can call
280:40 - on validate
280:42 - on upload start we can call the set
280:44 - progress and set it to zero on upload
280:47 - progress you get access to a callback
280:50 - function where you can destructure the
280:52 - loaded property as well as the total and
280:55 - then you can return the percentage by
280:57 - calculating it by doing math. round and
281:01 - then dividing the loaded by the total
281:04 - and multiplying it by 100 to get a
281:07 - percentage and then you can set progress
281:09 - to be equal to percent so this allows
281:11 - you to very neatly track percent by
281:14 - percent how your upload is going we can
281:17 - also Define to which folder we want to
281:19 - upload this file and we can also pass
281:21 - the accept equal to accept we'll modify
281:24 - this variable to say something like
281:26 - image everything or video everything for
281:29 - now we'll just leave it like this
281:31 - Dynamic so whenever we change the type
281:33 - from image to video we can also modify
281:36 - which types of files do we accept great
281:38 - I think that's more or less it for the
281:40 - ik upload and we were using that one on
281:42 - o form right so let's actually go ahead
281:45 - and log out and head over to create an
281:48 - account there we go it's still looking
281:49 - the same we still have to test the
281:51 - functionality though so let's scroll
281:53 - down here we have the upload button but
281:56 - alongside that class name I'll also
281:58 - provide some additional Styles so I'll
282:00 - say CN and always it'll have the upload
282:04 - BTN class name but then we'll also
282:06 - provide it styles. button which will
282:08 - change it depending on whether we're on
282:11 - the public facing website or on the
282:12 - admin dashboard then within the button
282:15 - we have the image below it we have a
282:17 - piece of text so let's style it as well
282:19 - by giving it a CN property of
282:23 - text-base and then give it a styles.
282:26 - placeholder and here we can dynamically
282:29 - render a placeholder text because now
282:31 - we're making this component reusable and
282:33 - right below this P tag we can check if a
282:35 - file has been uploaded so if file is
282:38 - there then render a P tag that will
282:40 - render under defile. file path and it
282:44 - can have a class name equal to
282:47 - CN of upload file name and a styles of
282:52 - text I noticed that this file upload
282:54 - change color right now and it doesn't
282:56 - look that good also remember how our
282:58 - toast component didn't look that good I
283:00 - think that's because when setting up
283:02 - shat CN I actually chose to use CSS
283:05 - variables but I think we can change that
283:07 - if we head over to components. Json file
283:10 - you see CSS variables to set to true we
283:12 - can set that over to false and that'll
283:14 - make it not use the CSS variables which
283:17 - will then fix some overrides in shats
283:19 - and components that will not fix this
283:21 - button though this one is white because
283:23 - we are not yet passing the prop of
283:26 - variant to this component we'll do that
283:28 - very soon but before let's just finalize
283:31 - what shows up when we actually upload
283:33 - the file right here below this button we
283:36 - can show the progress yep now we have
283:38 - that too so we can say progress if if
283:41 - it's greater than zero then we can
283:43 - display a
283:45 - div with a class name of
283:48 - w-o rounded Dash fo BG green of 200
283:54 - within it yet another div with a class
283:57 - name of
283:58 - progress and a style of width and what
284:03 - will be as long as the progress is so we
284:06 - can say progress and then percentage so
284:10 - width will be 1% % 2% 3% and it'll go
284:13 - all the way to 100% as the progress
284:16 - reaches the Finish finally within it we
284:18 - can also display a progress percentage
284:21 - now you cannot see it because it's zero
284:23 - but you'll see it soon as we start
284:25 - testing some file uploads and finally
284:28 - here if a file exists we were showing a
284:31 - preview of that file but now we can show
284:34 - a different thing depending on the file
284:36 - type so if file exists and if type is
284:41 - triple equal to image in that case
284:43 - render whatever we had here an ik image
284:48 - with a path and Al tag a width and a
284:51 - height but else if type is triple equal
284:54 - to
284:56 - video then render ik video which is a
285:00 - self-closing component that accepts a
285:03 - path equal to file. file
285:06 - path controls equal to true as well as a
285:11 - class name equal to
285:13 - h-96 w-o and rounded D excl and finally
285:18 - if it's neither image or video then
285:20 - simply show null there we go are you
285:23 - excited to test it we can first test it
285:25 - within the OD form to make sure that we
285:27 - didn't break anything so let's head over
285:30 - to our OD
285:32 - form.
285:33 - DSX and let's properly use this
285:37 - form you can see my webstorm
285:39 - automatically changed the file name for
285:41 - me to file upload you might have needed
285:43 - to do that
285:44 - manually but now it's saying that we
285:46 - need to pass some different kinds of
285:48 - props like type accept placeholder
285:50 - folder variant and more so let's do just
285:53 - that the type in this case will be image
285:56 - because that's what we're uploading we
285:58 - can also say that accept will be equal
286:00 - to image SL asterisk meaning any kind of
286:04 - image type placeholder will be equal to
286:08 - upload your ID folder will go into IDs
286:13 - so you can choose where you want to
286:14 - place that image variant will be dark
286:17 - because we're on our public facing
286:18 - website with a dark theme and then on
286:21 - file change is equal to files.on change
286:25 - let's fix this typo and no more warnings
286:28 - and it is looking great matching the
286:30 - Dark theme so what do you say that we
286:31 - tested out just before doing that I'll
286:33 - head over to local. drizzle. studio and
286:36 - I'll remove all of the users that are
286:38 - currently here I notice we have a lot of
286:40 - you we testing already sorry about that
286:43 - I'll need to have a clean slate while
286:44 - developing to test everything properly
286:46 - bye-bye now I'll enter my
286:49 - email I'll enter my password as well as
286:53 - a full name and my University ID and
286:57 - most importantly we'll try to upload our
286:59 - University ID card so let me click
287:02 - here and select it you can immediately
287:05 - see the progress bar appear but it looks
287:08 - like the file name is too long so head
287:10 - over into your file upload and first of
287:12 - all let's hide the progress if it
287:14 - reaches 100 so if progress is greater
287:16 - than zero and progress is not equal to
287:21 - 100 so if we do that you'll now see that
287:23 - the progress is gone but we also need to
287:25 - remove this name right here so it could
287:27 - be this file path right here I think
287:29 - it's fine if we even just remove that or
287:31 - comment it out yep it looks a bit better
287:34 - that way so let me actually remove
287:37 - that and now let's go ahead and click
287:39 - sign up to fully test out our new form
287:41 - there we go it looks like an account is
287:43 - being created oh but we do have a sign
287:45 - of error even though it's hard to spot
287:47 - it with this broken toast it looks like
287:49 - it fails right here where we're trying
287:51 - to trigger the workflow so we'll need
287:53 - this production URL Even in our local
287:55 - enironment because our workflows can
287:57 - still be triggered so let me head over
287:59 - to our env. loal I'll head over to my
288:02 - versel environment variables and I'll
288:05 - grab the next public prod API endpoint
288:08 - and just copy it so that'll look
288:11 - something like this next public prod API
288:14 - endpoint is equal to your deployed URL
288:17 - once you do that we should get a 200 but
288:20 - it looks like I was trying to sign up
288:21 - with an already existing user so I'll
288:24 - just use another email right here and
288:26 - then click sign up and I'll have to
288:27 - change my University ID as
288:30 - well there we go we have successfully
288:33 - signed up and uploaded our ID let's just
288:36 - see if we can properly retrieve it by
288:38 - finding my user right here and then
288:40 - heading over to the university card and
288:42 - you can see that this even though it
288:44 - seems like it's a URL it's actually a
288:47 - path pointing to where this image is
288:49 - stored within image Kit's file storage
288:51 - so head out to your image kit dashboard
288:54 - and then go over to media
288:56 - library right there you should see a
288:57 - folder called IDs and if you double
289:00 - click into it you can see all of the
289:02 - different users identity cards safely
289:04 - stored with all of the corresponding
289:06 - information metadata Tags and More not
289:10 - to mention that we can also edit this
289:12 - image right here with many different
289:14 - editing options and since in our code we
289:16 - are referring to this path right here
289:18 - pointing to this image whatever
289:20 - operations you perform on this image
289:22 - such as remove backgrounds or do
289:24 - anything else the changes will
289:27 - immediately be reflected in the code
289:30 - perfect and now that we know that we
289:31 - brought our file upload back to the
289:33 - working State for the O form let's see
289:36 - what it will do for the admin state so
289:39 - if I head over to admin I'll head over
289:41 - to books and create a new book and now
289:44 - we want to use that input here for the
289:46 - image and then right here for the
289:48 - trailer which is going to be a video
289:50 - upload so I'll head over to a form this
289:53 - time a book form and I'll see where we
289:56 - said we want to add an image that is
289:59 - right here file upload for the cover URL
290:02 - Yep this this file upload will act as an
290:05 - image upload so we can simply use it
290:07 - like this I'll say file
290:11 - upload imported webstorm will
290:13 - automatically let me know which props I
290:15 - need it'll be a prop of image accept
290:19 - will be of image/ asterisk meaning all
290:22 - image types placeholder will be upload a
290:26 - book
290:27 - cover folder in this time will be books
290:30 - slash covers variant will be light
290:34 - because we're on an admin dashboard and
290:36 - on file change we can simply call the
290:39 - field on on change and we can also give
290:42 - it a value equal to field. value and we
290:46 - can self close it right here with that
290:48 - in mind you can see how great it looks
290:49 - like here as we made it completely
290:51 - reusable both in terms of the variant so
290:54 - light and dark mode as well as in terms
290:56 - of the placeholder the icon that we show
290:58 - and more now let's copy it and let's
291:01 - move a bit down to where we have the
291:04 - video input or the trailer so I'll put
291:07 - it right here but this time we'll make
291:09 - it upload a video video so we will only
291:12 - accept video
291:14 - files we can say upload a book
291:17 - trailer and it'll go under books
291:21 - videos and the rest can remain the same
291:24 - if you go down you can now see upload a
291:26 - book trailer if I click here you'll see
291:29 - that it'll let me upload a PNG but if I
291:31 - click on upload a book trailer you'll
291:33 - see that it won't let me upload a PNG
291:35 - and instead it is expecting a video with
291:38 - that in mind we have now successfully
291:39 - completed the file upload component but
291:42 - just before we test it out we'll also
291:44 - have to implement one more field which
291:46 - is a Color Picker and then we'll be able
291:48 - to test the entire form out so let's do
291:51 - that
291:52 - next to implement our Color Picker
291:55 - component we'll use a very simple
291:57 - package called react colorful which
292:00 - spins up this nice component allowing
292:02 - you to select a color Hue as well as
292:05 - opacity so let's go ahead and simply
292:07 - install it by running mpm install react
292:10 - D
292:11 - colorful and once it gets installed now
292:14 - let's copy this block of code and let's
292:17 - create a new component called Color
292:19 - Picker under admin components and then a
292:23 - new file called color
292:26 - picker. DSX there simply paste what you
292:30 - copied rename it to Color
292:33 - Picker make sure to export it at the
292:36 - bottom by saying export default Color
292:39 - Picker make sure to import use State as
292:43 - well in this case we'll need the state
292:46 - to manage the color but we'll also open
292:48 - or close this Color Picker so let's also
292:51 - create another used State allowing us to
292:54 - control the is open State at the start
292:57 - set two false when it comes to the props
292:59 - we'll pass into this Color Picker we can
293:01 - Define them right here by saying
293:03 - interface of props will accept a value
293:06 - which is the color value of a type
293:08 - string as well as on picker change which
293:12 - will then accept a color of a type
293:15 - string and return nothing meaning void
293:18 - it'll just modify the color so now we
293:21 - can destructure the value and the on
293:23 - picker change and we can set that equal
293:26 - to the props interface now let's try to
293:29 - use it within the book form component
293:31 - I'll head down right here to where we're
293:34 - referring to the color and I'll import
293:37 - Color Picker coming from components
293:39 - Color Picker and and onp picker change
293:41 - will be equal to field. on change which
293:44 - is provided to us by react hook form and
293:46 - the value will be equal to field that
293:48 - value which is the currently selected
293:51 - color now if we go back you should be
293:53 - able to see something that looks like
293:55 - this and we could already leave it as it
293:57 - is I mean this is more than good enough
293:59 - provides a lot of flexibility but some
294:02 - people might want to specifically choose
294:04 - the color of their book to choose the
294:06 - exact color so for that reason let's
294:09 - head into the color picker let's wrap
294:12 - this return statement in a
294:14 - div with a class name of
294:18 - relative within which we'll have another
294:20 - div with a class name equal to Color
294:24 - Picker now let's put this hex Color
294:27 - Picker right within it there we go this
294:29 - is looking good but what we can do as
294:31 - well is add a hex color input as a
294:35 - self-closing component which is also
294:37 - coming from react colorful and we can
294:41 - provide it the color we can provide it
294:43 - the on change which is going to be the
294:45 - same and we can also give it a class
294:47 - name equal to hex Das input and now we
294:50 - can see the live number of this input
294:53 - and as you change it it changes as well
294:55 - now to make it look a bit nicer we can
294:58 - wrap this hex Color Picker within a
295:01 - div give it a class name of flex Flex D
295:05 - row and items Das Center we can put it
295:08 - within it and we can also render A P tag
295:11 - in front of it which will simply say
295:13 - hash because all heximal colors start
295:15 - with a hash so that'll look something
295:18 - like this and we can maybe leave this
295:20 - hex Color Picker outside of the div so
295:22 - now we can both type the color as well
295:25 - as select it looking great I was wrong
295:28 - we don't even need this is open we made
295:30 - it a bit simpler and we might not even
295:33 - need this state right here of color
295:35 - instead we can automatically use the
295:37 - value that we're passing through props
295:39 - to this component
295:40 - and then on picker change as the on
295:42 - change that way we can automatically
295:45 - change it and you can see that the color
295:47 - changes in real time perfect so that
295:50 - means that the Color Picker is done as
295:52 - well now the last thing is to test the
295:54 - whole UI to see if the data is being
295:56 - logged properly so let's first check if
295:59 - we have any errors or Warnings right
296:00 - here it's saying that this value is red
296:03 - because the value does not exist on type
296:06 - file upload oh this is interesting did
296:09 - we forget to accept the value if we head
296:12 - over to file upload it looks like we
296:15 - don't have the value let's add it
296:17 - immediately so value optional of a type
296:20 - string and we can accept it right here
296:22 - through props value and then if a file
296:25 - exists we can use it right here by
296:27 - setting up the initial state of the file
296:29 - so I'll turn it into an object and say
296:32 - file
296:33 - path is equal to either a value or null
296:37 - if value doesn't exist and since we're
296:40 - doing this object we also have to define
296:42 - the type and it looks like webstorm did
296:44 - it automatically for me saying that this
296:46 - use state will accept a file path of a
296:49 - type string or null so let's just fix it
296:52 - file path is string or null and we can
296:55 - close it right
296:57 - here perfect now a few of these errors
297:00 - are gone we have a few more at the top
297:03 - just unused values and some unused
297:06 - values as well but we should be able to
297:08 - test out all of the inputs so let's head
297:10 - over to the onsubmit and let's actually
297:13 - console log those values right here to
297:16 - see what we're getting back I'll enter
297:18 - some random information for now because
297:19 - we're not yet submitting for real so
297:22 - I'll say test title test
297:25 - author test genre rating can be two
297:29 - copies can be
297:32 - 10 we need to enter the book image so
297:35 - for now I'll pick one of our default
297:37 - ones that we have on our homepage
297:40 - so let me upload it right here it'll be
297:43 - this one there we go it nicely shows up
297:46 - we can then select the color to match it
297:48 - I think this one is good we can enter a
297:51 - test
297:52 - description and finally we can enter a
297:55 - title this is a real file that we're
297:57 - about to upload typically for videos I
297:59 - use a website called cover with a
298:03 - r and they allow you to download some
298:05 - free videos so let's get this one with
298:08 - pouring coffee into a mug it'll very
298:10 - quickly download it and I'll be able to
298:12 - upload it as the trailer of this book A
298:14 - book about coffee so if I select pouring
298:17 - coffee stock video you see the progress
298:20 - bar works it uploaded it we can fix this
298:22 - long name very soon but as soon as it
298:25 - loads it you'll be able to play it right
298:27 - here to see whether this is the trailer
298:28 - you wanted to upload looking good oh and
298:32 - silly me I was supposed to be testing
298:33 - this on desktop because that's where
298:35 - most books are going to be added anyway
298:37 - it's not like somebody's going to go on
298:39 - a phone and then add a book there and
298:41 - finally we have a test
298:43 - summary so what will happen if I go
298:46 - ahead and click add book to library
298:48 - let's go to the console clear it and
298:51 - click it it says expected number
298:54 - received string for the rating okay
298:56 - that's interesting let's head over to
298:58 - the rating component which is right here
299:01 - we did specify that the type is number
299:03 - here and if we head over into
299:05 - validations and search for rating we can
299:09 - see that it is a z. number oh but what
299:11 - we should have done instead is coerced
299:13 - it into a number right here by saying z.
299:16 - co. number like this so similar to what
299:21 - we have done with total copies so if I
299:23 - do this and try it one more time it's
299:26 - good to know that the validation is
299:27 - working at least I can go ahead and
299:29 - click add book to library and we get
299:32 - back a conol log of the entire form we
299:35 - get all the information such as the
299:37 - author cover color oh the cover URL is
299:40 - actually here it got uploaded to image
299:43 - kit which means that it is working and
299:45 - same thing happened to the video URL
299:47 - which is amazing test title test summary
299:49 - rating and total copies as a number and
299:53 - the color right here as a hexadecimal
299:54 - value that means that all of the
299:56 - different inputs that should have been
299:58 - accepting numbers strings images videos
300:02 - colors and everything are working
300:04 - properly so now that we know that that
300:06 - is the case we are ready to implement a
300:09 - create book action which will allow us
300:12 - to actually create a book and add it to
300:14 - the database and then later on we'll be
300:16 - able to display it to the public facing
300:19 - Library website so let's do that
300:23 - next to implement a create book action
300:27 - head over to lib create a new folder and
300:31 - call it admin within it create another
300:33 - folder called
300:36 - actions and within actions create a new
300:39 - book. TS
300:41 - file as you already know we have to use
300:44 - the use server directive at the top for
300:46 - the server actions to be executed well
300:48 - on the server and we're ready to add a
300:50 - new book to the database we can do that
300:53 - by creating a new function const create
300:57 - book is equal to an async callback
300:59 - function that accepts some programs of a
301:02 - type book programs we have to Define
301:05 - these in our Global types and we can
301:08 - open up a try and C catch Block in the
301:11 - catch we get access to the error and if
301:14 - something goes wrong we can simply
301:15 - consol log that error and return some
301:19 - kind of an object that'll say success is
301:23 - false and a message saying an error
301:25 - happened while creating a book okay that
301:28 - was pretty simple so what params do we
301:30 - actually need to create a book well
301:33 - let's head over to types. D.S and let's
301:36 - create an interface called book parap
301:40 - and here we can Define different things
301:42 - that we need to pass over such as a
301:44 - title of a type string an author of a
301:47 - type string as well a genre of a type
301:50 - string a rating of a type number a cover
301:54 - URL of a type string a cover
301:58 - color of a type string a description of
302:02 - a type string the number of total copies
302:06 - so total copies which is going to be a
302:08 - number video URL which will be a string
302:12 - and a summary which will be a string as
302:14 - well and now that type should
302:16 - automatically be recognized right here
302:18 - at the top next let's actually create a
302:20 - new book and you might think how are we
302:23 - going to do that this is the second time
302:25 - we're doing a creation action within our
302:26 - code we already created users and trust
302:29 - me neon and drizzle make it super simple
302:32 - I'll just say const new book is equal to
302:36 - await db. insert we're going to insert
302:41 - the books schema so we're going to get
302:43 - the books and we're going to insert into
302:45 - the books schema so we have to get those
302:48 - books and that means that we have to
302:49 - create a new postgress table so we have
302:53 - to head over to schema. TS and create a
302:56 - new one for the table similarly to what
302:59 - we did with the users let's go ahead and
303:01 - do that right below by saying export
303:04 - const books is equal to PG table where
303:07 - we can Define that specific name name of
303:10 - the table which is books and then Define
303:12 - all of the fields that it'll have it'll
303:15 - have an ID of a type uu ID with the name
303:18 - of
303:19 - ID which is not null it is the primary
303:23 - key and by default it'll be random and
303:27 - unique we also need to get a title which
303:29 - is a varar meaning it's just a string of
303:32 - Max 255 characters and it must not be
303:35 - null we can do a similar thing with the
303:38 - author by simply saying author is a VAR
303:42 - Char with the name of author that is not
303:45 - null after that we can have a genra
303:48 - which is going to be a text of genre and
303:51 - it must not be null after that we'll
303:54 - have a rating which will be an integer
303:56 - meaning a number called rating and it
303:59 - will not be null so we can say Do not
304:01 - null after that we'll have a cover URL
304:04 - which will be of a type text and we have
304:06 - to pass the name of cover uncore URL
304:10 - which will also not be null after that
304:13 - we have a cover color which will be a
304:17 - varar and it'll be called cover uncore
304:20 - color with a max length of seven
304:23 - characters and it must not be null seven
304:26 - because it's six numbers and a hash to
304:29 - create a hexadecimal value then we get a
304:32 - description which is a text of
304:34 - description and not null we can also get
304:36 - a number of total copies which is an
304:38 - integer that is is not null and the
304:41 - default value can be set to one after
304:43 - that we have available copies which will
304:46 - be an integer of available copies that
304:48 - is not null and the default will be set
304:50 - to zero finally we have a video URL
304:54 - which will be a text of video URL that
304:59 - is not null we can do a similar thing
305:02 - with the summary which will be a
305:05 - varar of summary that is not null and
305:09 - finally a created ad field that'll be of
305:12 - a type timestamp called created ad with
305:15 - time zone true and it'll default to now
305:18 - and this is our book schema now we can
305:21 - head back over to book. DS and insert it
305:25 - into books coming from schema. TS what
305:28 - are we going to insert well we're going
305:29 - to insert the following values we're
305:32 - going to Simply spread all the prams
305:34 - coming from a book and we'll set the
305:36 - available copies to be equal to super
305:40 - rams. total copies because we're just
305:43 - creating it for the first time so all
305:45 - the books are available and then we can
305:46 - also say dot returning returning simply
305:49 - means that we want to get that value
305:51 - back that was just created in the
305:52 - database oh and looks like I forgot to
305:55 - import the DB from drizzle there we go
305:58 - so once we created we can just return a
306:01 - success of true and we can return the
306:04 - data of json.parse
306:07 - json. stringify just to make sure to
306:10 - properly move it over to our front end
306:12 - from the server action and we're going
306:14 - to return the new book zero because
306:17 - that's the one and only book that was
306:19 - created and let's not forget to add the
306:21 - export right here in front of our server
306:23 - action completing its functionality and
306:26 - allowing us to use it within our form
306:28 - that's it that's all there is to it it
306:30 - took us a bit more time because we
306:32 - actually had to create a book schema but
306:34 - in all future mutations it's going to be
306:36 - even easier it is basically a couple of
306:39 - lines of code so let's integrate it
306:41 - within our book form which we completed
306:44 - just recently we'll do it within the
306:46 - onsubmit function I'll say const result
306:50 - is equal to await create book and this
306:54 - is coming from our actions to it we want
306:57 - to pass all of the values from the form
306:59 - see how simple it is once you make the
307:01 - form and typescript and Zod and
307:04 - validation and all of these different
307:05 - tools work together you can pass exactly
307:08 - what you get you can get exact actly
307:09 - what you want and everyone's happy so
307:12 - let's check if result is equal to
307:15 - success or result. success is true then
307:18 - we can return a toast which will render
307:21 - a title of success and it'll also render
307:24 - some kind of a description of book
307:27 - created successfully don't forget to
307:30 - import the toast at the top and after we
307:32 - show the toast we also want to use the
307:35 - router. push and push to/ admin SL book
307:40 - slash and then result. dat. ID allowing
307:44 - you to see the details of the book that
307:46 - you just published else if result is not
307:49 - success we can simply show a toast
307:52 - that'll render a title of error it'll
307:56 - render some kind of a description of
307:59 - result.
308:01 - error and finally the variant will be
308:05 - set to destructive there we go and looks
308:08 - like typescript is complaining bit about
308:09 - this error I think it was result.
308:12 - message there we go that's good so with
308:15 - that in mind the only thing that's
308:17 - remaining for us to do is test the book
308:19 - creation process and to do that I'll
308:22 - open up our public facing website where
308:24 - we have mock data for now and our admin
308:26 - panel to turn that mock data into a real
308:29 - book in the database so let's go ahead
308:31 - and copy all the parts from the book
308:33 - title to
308:36 - author you can follow the same thing and
308:39 - then category as well we can do the
308:41 - rating which is
308:42 - 4.6 total copies is 20 looks like I
308:45 - already entered this book title before
308:47 - but you can basically just save image as
308:50 - and then upload it here you can choose
308:51 - the primary color that matches the
308:53 - covers I think it's somewhere near here
308:56 - like a darkish purplish color we have a
309:00 - description and then a book trailer can
309:02 - remain this Coffey right here telling us
309:04 - how we can pour ourselves a nice cup of
309:06 - coffee while reading it for now I'll
309:09 - leave the summary to be equal to the
309:12 - description and let's give it a shot if
309:15 - everything works our server action
309:17 - should be triggered and it should create
309:19 - a new book I'll say add book to library
309:21 - oh the rating should actually be an
309:23 - integer this is interesting if you want
309:25 - you can turn it into a float which would
309:27 - allow you to have decimal values but in
309:29 - this case I'll just bring it over to
309:31 - five I'm feeling generous today and I'll
309:34 - add it to the library considering we
309:36 - didn't get redirected I'm guessing an
309:38 - error has happened and if you go into
309:39 - our terminal you'll notice an error
309:42 - right here saying neon DP error relation
309:45 - books does not exist and I'm actually
309:48 - super glad that this happened because
309:50 - this is something that happens to
309:52 - everybody and happens often so the
309:54 - sooner you start understanding why this
309:56 - happened and you start putting into
309:57 - practice to automatically generate and
310:00 - migrate over your database as soon as
310:02 - you change the schema the better
310:04 - remember how I told you that whenever
310:05 - you change the schema you'll have to
310:07 - then rerun the commands that we added
310:09 - over to our package.json it's generate
310:12 - and
310:13 - migrate so let's do just that I'll go
310:17 - into our new terminal and run mpm run DB
310:20 - generate you can see it provided a new
310:23 - SQL migration and then I'll say mpm run
310:26 - DB migrate we have that warning as
310:29 - before but no errors which means that
310:31 - we're
310:32 - good and if you check out our migrations
310:35 - you'll see a second SQL file which
310:38 - simply adds to the first one so it
310:40 - doesn't have to repeat the creation of
310:42 - those tables they're already there but
310:44 - now it created a new table for books and
310:47 - with that the relation books should
310:49 - actually exist and we should be able to
310:50 - create it so let me click add book to
310:53 - library and we get success and even
310:56 - though we're seeing a 404 error here
310:58 - that's good we just got redirected to
311:00 - the book Details page which we haven't
311:02 - yet created but that's a good sign so
311:05 - head over either to your drizzle Studio
311:07 - or to Neon tables
311:10 - where you'll be able to see your
311:11 - database and a new table should appear
311:14 - called books where we can see all the
311:16 - information such as the title of
311:18 - Midnight Library Matt who is the author
311:21 - genre rating and more it is all here
311:24 - which means that our book creation
311:26 - process is fully functional but there's
311:28 - one problem with it everybody can head
311:31 - over from just a general URL over to
311:34 - admin books new and create a new book
311:37 - that doesn't feel right does it
311:39 - they need to have privileges to be able
311:41 - to create a book so let's head over to
311:44 - app admin layout and let's add a check
311:49 - alongside checking whether a user exists
311:51 - we also need to check whether that
311:52 - currently logged in user is an admin so
311:55 - I'll say const is admin is equal to
311:59 - await DB coming from drizzle. select we
312:04 - want to select only the is admin field
312:07 - which is under users.
312:09 - we want to select it from users where we
312:14 - have an equality of users ID which
312:17 - matches the currently logged in user
312:19 - which is the session. user. ID we can
312:23 - limit it to only return one user and we
312:25 - can run a do then on it and check the
312:29 - response and if the response zero
312:32 - question mark do is admin is triple
312:35 - equal to admin all operas then that
312:39 - means that we want to return true so by
312:42 - default when you're making an equality
312:44 - comparison the output of that is a
312:46 - bullion so if this matches this function
312:49 - will return true and if this function
312:51 - returns true that true will be
312:53 - transitioned over to this is admin
312:55 - variable so the only thing we have to do
312:57 - is say if not is
313:01 - admin then we can redirect over to
313:05 - forward
313:06 - slash so let's test it out reload your
313:10 - page and then if you try to sneak your
313:12 - way over to the admin interface of this
313:14 - great Library management platform you'll
313:16 - Simply Be redirected to the public
313:17 - facing website access denied for now
313:21 - just to allow ourselves the access to
313:22 - the platform you can find your user in
313:24 - the
313:26 - database find the role right here which
313:28 - is currently user and manually switch it
313:31 - over to admin if you do that head back
313:34 - to the app and head over to admin you'll
313:37 - see that it'll work because now we have
313:38 - the necessary permissions later on we'll
313:41 - implement the ability to change the user
313:42 - role directly from the admin side but
313:45 - for now this is good too now finally
313:47 - that we can create new books and now
313:49 - that we know that they have been added
313:50 - to the database we are ready to display
313:52 - them on the homepage currently we're
313:54 - displaying mock data here but now we're
313:57 - ready to start fetching real data from
313:59 - the
314:01 - database to start displaying real books
314:03 - from our database head over to app rout
314:07 - and then page that DSX with then here we
314:09 - can first get the user session by saying
314:12 - con session is equal to await o coming
314:15 - from OJs then instead of just getting
314:18 - all the users we can just get the latest
314:20 - books by saying something like const
314:23 - latest books is equal to we can put it
314:27 - in parenthesis and say await DB do
314:31 - select and now we can select do from
314:34 - books specifically we'll limit it to
314:37 - about let's do 10 books books and let's
314:39 - order it by descending order so we can
314:43 - say DEC which we can import from drizzle
314:46 - orm and then say books. created at just
314:49 - like this and finally we can wrap all of
314:52 - that in
314:53 - parentheses and say as an array of books
314:56 - because that's exactly what we'll be
314:57 - returning now one problem will appear as
314:59 - soon as you do that and that is that
315:01 - everything will become red you'll notice
315:03 - that the conversion of type ID title
315:06 - author genre and so on may be mistaken
315:09 - because neither type sufficiently
315:10 - overlap with the others so why is it
315:13 - saying that we have an overlap well
315:15 - that's because before our books looked
315:17 - something like this they had available
315:20 - copies with an underscore total copies
315:22 - with an underscore and they were coming
315:25 - from sample books but now they're coming
315:27 - from a real schema books which is
315:29 - looking something like this even though
315:31 - it has underscores in the database when
315:34 - we're trying to fch data using drizzle
315:36 - it automatically converts it over to
315:38 - camel cas
315:39 - so we have to head over into this book
315:42 - type and we have to fix it ID title
315:44 - author genre rating it'll stay the same
315:48 - but it'll say total copies available
315:50 - copies in camel case no longer it'll be
315:53 - a cover now it'll be a cover URL same
315:56 - thing for the video URL and then it'll
315:58 - also have a created
316:00 - ad which will be a date or null and we
316:04 - don't need this is loan book so if we do
316:07 - this now the type should be a bit more
316:09 - precise but it still says that it's not
316:10 - a perfect match let's see if we have
316:12 - everything color right here we called
316:15 - cover color so this also has to match
316:17 - the same schema in the database more or
316:19 - less the rest should be okay it says
316:21 - that the only property that is
316:22 - incompatible right now is the ID
316:25 - property which is interesting oh yeah it
316:27 - shouldn't be a number it should indeed
316:28 - be a string thank you typescript for
316:31 - saving me here and now you can see the
316:32 - error is gone so finally instead of
316:35 - Simply passing sample books which we no
316:38 - longer need so I can completely remove
316:39 - it from here we'll be passing real books
316:42 - so let's spread dot dot dot
316:45 - latest books zero we'll pass that over
316:49 - to the book overview and let's also pass
316:51 - the user
316:52 - ID equal to session question mark. user
316:57 - question mark. ID and we'll say as
316:59 - string because we know that it'll
317:01 - actually exist there and we can also
317:03 - pass those books right here as latest
317:05 - books but we'll run a slice one which
317:09 - means that we'll make the array start
317:10 - from the second element and not the
317:12 - first one because we're already showing
317:14 - the first one in the book overview we
317:16 - don't want to repeat ourselves so let's
317:18 - head into the book list everything
317:19 - should be the same here we're mapping
317:21 - over books and then rendering a book
317:23 - card but we changed the name of some of
317:24 - the properties from the time when we had
317:26 - a sample book and now that we have the
317:28 - real data in the database so let's
317:30 - quickly change those as well you can
317:32 - rename the color to cover color and you
317:34 - can use it wh we're using it below you
317:37 - can also do cover that is now a cover
317:40 - URL so let's copy it and paste it
317:43 - wherever we're using the cover that is
317:46 - here and finally is loan book no longer
317:49 - exists but for now I'll leave it as it
317:51 - defaults to false anyway and let's also
317:53 - head back over to the book list and
317:56 - let's hide the book list in case we
317:58 - don't have any books to show so I'll say
318:00 - only if books. length is greater than
318:04 - two because the first element actually
318:06 - is in the hero so we're already covering
318:08 - that so only if it's greater than two
318:10 - then show this UL as a matter of fact we
318:13 - should show the entire section only if
318:16 - it has any elements to show so I'll do
318:18 - it right
318:19 - here if book. length is greater than two
318:24 - then we'll return this but if it's lower
318:26 - than two we'll simply exit out of this
318:29 - return meaning show nothing so now if I
318:32 - go back we don't see any latest books
318:34 - because the only book we have added to
318:35 - the database is this book right here and
318:38 - it looks looks like it is properly
318:40 - taking all of the information from the
318:41 - book which is amazing but everything
318:44 - besides the C photo so let's head over
318:47 - to our book
318:48 - overview and here we also have to change
318:50 - some naming total copies will be renamed
318:53 - over to Total copies in camel case same
318:56 - thing for available copies color will be
319:00 - cover color and cover will be cover URL
319:05 - so let's make sure to change those in
319:07 - the code as well
319:10 - total copies available
319:13 - copies next we have a cover color we
319:17 - have a cover URL for the image and once
319:20 - again we have a cover
319:23 - color and cover URL right here so if we
319:28 - make all the changes properly to work
319:30 - with our new database schema now with
319:32 - real data you can see that at least the
319:34 - book gets colored but the image is still
319:36 - not showing we are rendering that image
319:38 - right here as cover URL which we're
319:41 - passing over to book cover and then it's
319:43 - rendering it as an image so let's
319:45 - actually conso log this cover URL to see
319:48 - what we're getting
319:50 - back I'll do a conso log of cover URL
319:53 - and then reload and it looks like we're
319:56 - getting back/ books SL covers and a
320:00 - correct webp address but this is not a
320:02 - full address it is a path pointing to
320:04 - image kit our image solution so let's
320:08 - actually head over to the book cover
320:11 - component and instead of just rendering
320:13 - it as a regular image let's actually use
320:16 - the i k
320:19 - image where the path will now be set to
320:22 - cover image URL endpoint will be set to
320:25 - config coming from lib config env.
320:30 - imagit URL endpoint Al tag will be book
320:34 - cover we'll have
320:36 - fill class name will be the same we can
320:39 - also use something known as lazy loading
320:41 - so we can say loading is lazy to load
320:43 - other things before it and then with
320:45 - image kit you're also getting a lot of
320:46 - these great functionalities out of the
320:48 - box such as L qip which is lower quality
320:52 - image placeholder which we can set
320:54 - active to true so first it'll render a
320:56 - lower quality placeholder and only then
320:59 - it will render the full image which
321:00 - optimizes website performance now image
321:03 - kit has to be used on the client side so
321:05 - for the time being I will change this
321:07 - over to a use client comp
321:09 - component and with that our book is
321:12 - right here it's looking great and now
321:14 - it's coming from the database now in the
321:17 - next lesson I'll show you another
321:18 - production ready technique that allows
321:20 - us to quickly fill up the entire
321:24 - database in this lesson I'll teach you
321:26 - how to seed a database database seedings
321:29 - simply means populating a database with
321:31 - an initial set of data it is so common
321:34 - to load seed data such as initial user
321:36 - accounts or dami data in this case our
321:39 - images which allows us to see more data
321:41 - without necessarily needing to manually
321:43 - go ahead and add every single book and
321:45 - since it happens so often within
321:47 - companies and larger applications I
321:48 - wanted to teach you how to do that first
321:50 - head over into
321:52 - constants and then right here find our
321:55 - sample books remove them and instead
321:59 - where you found other Snippets to copy
322:01 - you can also find another file called
322:03 - dummy books create a new file in the
322:06 - root of your application and call it
322:08 - dummy books. Json there we go so this is
322:13 - simply a list of all of the dummy data
322:15 - for some programming related books we
322:17 - won't just show this fake data within
322:19 - our application we'll actually use it to
322:21 - populate our database for real so those
322:24 - rows appear there so head over into your
322:26 - database folder and create a new file
322:29 - called
322:30 - seed. DS within it let's create a new
322:33 - function const seed is equal to a
322:37 - function which will consol
322:40 - log something like seeding data dot dot
322:43 - dot and we can open up a try and catch
322:46 - Block in the catch we'll simply say
322:49 - something like error seaing data and in
322:52 - the try we'll actually try to do that
322:54 - and if you go back to your application
322:56 - you'll notice that the profile page will
322:57 - broke for a second so for the time being
323:00 - we can bring back our old books the
323:02 - sample books that we had here just so we
323:04 - don't break that there we go now in the
323:06 - try let's Loop over our c data by saying
323:10 - for const Book of dummy books so let's
323:15 - try to import those dumy books we can do
323:18 - that right here at the top to get them
323:19 - from our Json dumy books coming from do
323:23 - SL dummy books. Json and we can map over
323:27 - them right here after that before we
323:30 - actually insert them into the database
323:32 - we first have to upload the images and
323:34 - cover videos to image kit so let's say
323:36 - const cover UR
323:39 - is equal to a wait upload to image kit
323:45 - and then we can pass a book. coverurl
323:47 - the second parameter can be the title
323:50 - which can be something like book. tile
323:54 - and then an extension of JPEG and
323:57 - finally we can pass the path which will
324:00 - be something like for SL
324:03 - books slash covers for this to work we
324:06 - have to do two things the first one is
324:09 - to turn this into an async function and
324:12 - the second one is to create this upload
324:14 - to image kit function so const upload to
324:17 - image kit it'll be an async function
324:19 - that will accept a
324:21 - URL a file name as well as the folder
324:24 - path So within there we can open up
324:27 - another try and
324:29 - catch within the catch you know the deal
324:31 - we get the error and then we simply
324:33 - conso log it but in the try we'll try to
324:36 - get the response
324:38 - so const response out of the image
324:41 - upload so let's simply set a new
324:43 - instance of image kit by saying const
324:46 - image kit is equal to New Image kit and
324:51 - then we can pass all of our
324:52 - configuration options such as a public
324:55 - key equal to process. env. imagit public
324:59 - key private key which is equal to
325:02 - process. env. imagit private key and
325:05 - then a URL endpoint equal to image kit
325:07 - URL endpoint now only the private key is
325:11 - private but the first two the public key
325:13 - and the URL endpoint are public so we
325:16 - need to add a next public right here in
325:19 - front perfect and now that we have that
325:22 - we can say await image
325:25 - kit do upload and we can pass all these
325:29 - configuration options such as file is
325:32 - equal to URL then we pass the file name
325:35 - and finally we pass the folder once we
325:38 - get the response we can just return
325:41 - response. file
325:43 - path perfect so now we can upload images
325:47 - or files and videos to image kit and we
325:49 - actually want to duplicate
325:51 - this and do the same thing with the
325:53 - video so we can say const video URL is
325:56 - equal to upload to image kit book. video
325:59 - URL and we'll upload it to books videos
326:03 - and it'll be an mp4
326:05 - file finally we are ready to insert that
326:08 - into our database by saying await DB
326:12 - coming from drizzle do insert into
326:16 - books the values that are as follows
326:20 - we're going to spread all of the
326:22 - properties of the book and we're going
326:24 - to add a cover URL as well as a video
326:28 - URL perfect we'll also have to make a
326:31 - connection to this database one more
326:33 - time we cannot use our previous
326:35 - connection because we will not be
326:37 - running this file from our typical
326:39 - nextjs application rather we'll be
326:41 - running it as a script from a package
326:43 - file like running a separate node file
326:46 - not nextjs so right here at the end of
326:49 - this
326:50 - four I'll add a conso log data seated
326:54 - successfully I'll collapse the function
326:57 - collapse the upload to image kit as well
326:59 - and we have to set up an instance of our
327:01 - database by saying
327:04 - config of path isv
327:08 - . local to get access to our environment
327:11 - variables then we can say const SQL is
327:14 - equal to Neon and then to it we pass the
327:17 - process. env. database URL and finally
327:22 - we can export const DB is equal to
327:26 - drizzle to which we pass the client
327:28 - equal to SQL so in this case we're not
327:31 - importing the DB from database drizzle
327:33 - we're just creating a new instance of
327:35 - that right here since this file is
327:37 - standal from other files we can also add
327:40 - exclamation marks right here at the end
327:41 - to let it know that we actually know
327:43 - that these keys will be there and we
327:46 - have to import the config coming from
327:49 - EnV and I think that's it the only thing
327:51 - we have to do is call the seed function
327:53 - right here at the end as soon as we call
327:55 - this file oh and I think typescript
327:57 - saved me one more time there's a red
327:59 - squiggly line right here saying property
328:01 - cover URL does not exist actually since
328:04 - we're just seating it manually we cannot
328:06 - use the camel case it'll have to be the
328:08 - exact format we're seating the database
328:10 - with so we'll have to use a cover uncore
328:13 - URL here as well as the video uncore URL
328:18 - right here same thing here cover URL and
328:23 - video
328:24 - URL so let's do it properly and we can
328:27 - rename it here as well cover URL now you
328:31 - can see here it says did you mean cover
328:33 - URL in camel case so looks like I was
328:36 - wrong we still needed to do everything
328:38 - in camel case as we're just inserting
328:40 - the value using drizzle but in dummy
328:42 - data so far I use snake case so actually
328:45 - I'm interested in seeing whether this
328:46 - will work if not I'll transition it over
328:48 - to camel case so now let me head over to
328:52 - my package.json and the way that you
328:54 - typically seed your databases is by
328:57 - adding a seed command to package Json so
329:00 - right here on top of our DB commands
329:02 - I'll add seed and I'll simply make it
329:04 - run that file MPX TSX datab
329:08 - b/ seed. DS so let's head over to our
329:13 - terminal and let's run mpm run seed and
329:18 - I'll expand it so we can see what's
329:19 - happening and press enter it says you
329:22 - need to install the TSX package sure
329:24 - let's go ahead and do that it looks like
329:26 - we got a connection string issue with
329:28 - neon so we have to head back over to the
329:30 - seed database and check whether we have
329:33 - properly provided the URL it looks like
329:35 - we are passing it properly but it's like
329:37 - it's not reading it from our environment
329:40 - variables process. env. database URL oh
329:44 - it looks like I have an extra space
329:45 - right here hopefully you had it right so
329:48 - let's go ahead and rerun that command
329:51 - that'll be mpm run
329:53 - seed it's seeding data okay so it looks
329:57 - like it fails after all as you can see
330:00 - so far whenever we have been inserting
330:02 - the values into the database we have
330:04 - used this schema right here which has
330:07 - camel case for our properties but then
330:09 - later on in database rows it converts
330:12 - them into snake case so I'm actually
330:14 - very glad that we tested this out
330:15 - because now we know that we cannot
330:17 - insert properties using the final format
330:20 - that they'll be saved within the
330:21 - database with rather we can use camel
330:24 - case so by the time you're watching this
330:25 - video for you I might have provided the
330:27 - right file right off the bat the Json
330:30 - file that contained camel case but for
330:33 - myself I will modify it right away there
330:35 - we go I've simply overridden the
330:37 - previous file file with the one with the
330:39 - values in camel case so now I'll just
330:41 - have to make a small modification right
330:43 - here and change these to camel Cas as
330:45 - well you'll have to do that change as
330:47 - well so wherever they're saying video or
330:50 - cover URL simply change it to video and
330:53 - cover URL in commel case but why is
330:56 - there still a red Squigly line right
330:58 - here well because to insert it into the
331:01 - database we want to make sure that the
331:02 - value is there so we can say that this
331:05 - will be string
331:09 - and same thing for the video URL as
331:11 - string that way tab script will know
331:14 - that we are properly returning these
331:16 - values so let's go ahead and seat our
331:18 - database one more time with one more
331:21 - lesson learned we're seaing the data
331:24 - this time is taking a bit longer which
331:26 - is a good sign when we're seaing
331:28 - databases as there's a lot of data to
331:30 - upload we could have added some
331:32 - additional conso logs to know when the
331:34 - images are uploaded when videos are
331:36 - uploaded and when the books are inserted
331:39 - but as of now we can stare into the
331:40 - screen and look at this blinking cursor
331:43 - and wait for it to say
331:46 - success and there we go data seated
331:49 - successfully head over to your table and
331:51 - just check this out all of these books
331:54 - are right here and if you head over to
331:56 - your local host 3000 check this out we
331:59 - have a book Overview at the top and then
332:01 - we have some more books right here at
332:02 - the bottom this is looking great and now
332:05 - you know what it takes to seed any data
332:07 - database to quickly get your project
332:09 - data up and
332:12 - running now that we have all of these
332:14 - great books Let's actually create a
332:16 - Details page for each and every one of
332:18 - them let's go with JavaScript the good
332:20 - parts right now we get a 404 as we don't
332:23 - yet have a book Details page so let's
332:25 - head over back into the code head over
332:27 - into app rout and create a new folder
332:31 - called
332:32 - books and within books create a new
332:35 - Dynamic
332:36 - route of ID within square brackets and
332:41 - within it create a new page.
332:44 - DSX there run rafc and first we can
332:48 - accept the ID of the book we're
332:50 - currently on through params so let's
332:52 - destructure the pams and that'll be of a
332:55 - type pams is a promise which in this
332:58 - case will include an ID of a type string
333:02 - so let's destructure that ID by saying
333:04 - const ID is equal to await per rams. ID
333:10 - and we can make this function async and
333:12 - now based off of that ID we can fetch
333:14 - the book from our database so I'll write
333:17 - a comment and that'll look like this
333:19 - const book details is equal to DB coming
333:24 - from database drizzle do select. from
333:29 - books. where and now we can use an
333:33 - equality sign EQ books. ID and then we
333:37 - match it with the ID we're getting
333:38 - through params do limit to one and I
333:42 - think this is good so let's just await
333:44 - it right here and I think this will
333:46 - return an array so to get the exact book
333:48 - details we can destructure the first
333:50 - parameter out of that array which should
333:52 - bring us back the book details finally
333:54 - if there is no book details we can
333:57 - simply redirect to 404 this is how it's
334:00 - going to look like and before we go
334:02 - ahead and return it let's actually just
334:04 - conso log it to see what we're getting
334:06 - back from book details it looks like
334:08 - we're getting back all the correct data
334:10 - so to render the book details I'll
334:13 - simply return an empty react fragment
334:15 - and within it I'll return a component we
334:18 - already created the book overview
334:20 - component you can see we have to pass a
334:22 - lot of props into it or we can simply
334:25 - spread the book details to it we can
334:28 - also pass a user ID equal to session
334:32 - question mark. user question mark. ID as
334:35 - string and you already know how we can
334:37 - get this session right at the top by
334:39 - saying session is equal to await o and
334:44 - the O is coming from next o or OJs let's
334:47 - close the book or your component and
334:50 - let's properly import it coming from
334:52 - components if you do that you should be
334:54 - able to see the details of the book you
334:56 - just clicked on so if I head over to
334:58 - react in action you can see the details
335:00 - of that book perfect you also have the
335:03 - button to borrow it which will make full
335:06 - use of very soon now right below this
335:08 - primary information we also want to show
335:11 - a video trailer of that book so head
335:13 - just below it and create a new div with
335:16 - a class name of book
335:20 - details within it there's another div
335:23 - with a class name of flex d1.5mm
335:37 - there we can render an H3 that'll say
335:40 - video and later here we can display the
335:43 - video component to actually allow people
335:46 - to play that trailer so if we put it
335:48 - side by side you can see how that looks
335:51 - like so right below this section let's
335:54 - also create another section for the book
335:56 - summary it'll have a class name equal to
336:00 - margin top of 10 to divide it a bit from
336:02 - the top it'll be a flex container it'll
336:05 - have a flex column so the element appear
336:08 - one below another and a gap of seven
336:11 - there we can render an H3 of
336:14 - summary and within it render a div with
336:17 - a class name of space-
336:21 - y-5 text- extra large and text- light of
336:26 - 100 within it we can render the book
336:29 - details. summary which would look
336:31 - something like this but we can split it
336:33 - by new lines by saying do split and then
336:37 - choosing the back slash and character as
336:39 - the
336:40 - separator and then mapping over each
336:42 - individual line which will look
336:44 - something like this we simply want to
336:45 - show A P tag for each one of the
336:48 - Lines within this summary and that'll
336:51 - make it look like this it'll be split
336:53 - into paragraphs looking great and later
336:56 - on beneath this section and beneath one
336:58 - more div we could have a section to
337:00 - maybe show similar books which would
337:02 - allow us to Traverse between page
337:04 - details of similar books and finally
337:07 - let's implement this video component
337:09 - which will allow us to play the video
337:11 - trailer of that book so let's create a
337:13 - new component in the components folder
337:16 - and let's call it book video.
337:21 - DSX run rafc right within it and this
337:26 - will actually be super simple thanks to
337:28 - the image kit video
337:30 - component first we have to wrap it in an
337:33 - image kit
337:35 - provider which will look something like
337:38 - this to it as you might already know we
337:41 - need to provide a public key equal to
337:44 - config env. imagit dopu
337:48 - key and also the URL endpoint which will
337:52 - be equal to config make sure to import
337:55 - it from our lib config not. EnV
337:59 - config and then say. env. imag kit. URL
338:04 - endpoint and within it we can render the
338:07 - ik video component and then pass the
338:10 - necessary props let's first call the
338:12 - book video as a component right
338:15 - here it'll be a book video component as
338:18 - a self-closing component to which we can
338:21 - pass a video
338:23 - URL equal to book
338:26 - details. video URL and then within the
338:29 - component we can get access to that
338:32 - video URL right
338:34 - here which will be equal to video URL of
338:37 - a type string and then we can set the
338:39 - path of the video to be equal to video
338:42 - URL if you want to you can set controls
338:45 - to be true or false depending on whether
338:47 - you want to show them and you can
338:50 - provide a class name of w fo and rounded
338:53 - Das excl and let's not forget to turn
338:56 - this into a client
338:59 - component as ik video request us to do
339:02 - that and if you do that check this out
339:06 - there is now a video trailer related to
339:08 - this book and if we expand it to look at
339:10 - it in its full Glory this is looking
339:13 - even better a simple and optimized video
339:16 - player component and then a full book
339:18 - summary completing our work on the book
339:20 - Details page finally let's Implement
339:23 - that borrow
339:29 - functionality to start implementing the
339:31 - borrow functionality head over to lib
339:34 - and within actions create a new file
339:36 - called book. TS here we can declare that
339:41 - this is a used server file so the code
339:43 - will only be executed on the server and
339:45 - we can create a server action that will
339:47 - initialize the borrowing process so
339:49 - let's say export const borrow book which
339:53 - is equal to an async function which will
339:56 - accept some prams and these will be of a
339:58 - type borrow book
340:01 - prams so let's head into the types. D.S
340:06 - and let's define those borrow book
340:07 - perams we can do that simply by saying
340:11 - interface borrow book perams and it'll
340:15 - be just a book ID because we need to
340:18 - know which book to borrow and then
340:19 - finally the user ID to know who is
340:22 - borrowing the book finally we can
340:24 - destructure those two params by saying
340:26 - const user ID as well as the book ID are
340:31 - coming from pams and we can open up a
340:34 - try and catch
340:36 - block in the catch you already know the
340:38 - deal we get the error and then we can
340:41 - simply consol log it as well as
340:44 - return a
340:46 - success of false and an error something
340:49 - like an error occurred while borrowing
340:51 - the book and then we can focus on the
340:54 - tribe part here we can make a new
340:56 - mutation to the database by saying const
341:00 - book is equal to await DB coming from
341:05 - drizzle do select and and we only want
341:07 - to get access to the number of
341:11 - available copies and that's coming from
341:13 - books. available copies then we want to
341:17 - make sure that we're getting it from the
341:19 - books schema or books
341:22 - table where we have an equation sign
341:25 - books. ID is equal to the book ID that
341:29 - we're currently trying to borrow and
341:32 - we're going to limit it to only one book
341:36 - that should look something like this
341:38 - after that we first of all need to check
341:40 - whether that book even exists the book
341:42 - that we want to borrow so if no book.
341:46 - length or if book zero do available
341:51 - copies is lower than or equal to zero in
341:54 - that case we're going to
341:56 - return a success of false as well as an
342:00 - error of something like let's do book is
342:03 - not available for borrowing if we can
342:06 - borrow the book though we need to get
342:08 - its due date as to when we need to
342:10 - return it so let's say const due date is
342:13 - equal to and here we can use the DJs
342:16 - Library which helps us deal with dates a
342:18 - bit more easily so let's just install it
342:21 - by running mpm install DJs and then we
342:24 - can say
342:26 - djs. add
342:29 - 7 Day 7 days to
342:34 - date do to dat
342:38 - string so we're simply going to add 7
342:40 - days from today that's the deadline
342:44 - later on we can make this Dynamic by
342:46 - passing a dynamic return value right
342:48 - here instead of the number seven and
342:50 - then we are ready to insert a new record
342:53 - a new borrowing record we can do that by
342:55 - saying db. insert and specifically we
342:59 - want to insert something into the
343:00 - database but into a completely new table
343:04 - called borrow records so think of this
343:07 - as a huge library of different records
343:09 - that keep track of which users borrowed
343:12 - which books you don't want to Simply
343:14 - mutate the book itself you want to
343:16 - create a new record that connects a
343:18 - specific user with a specific book so to
343:21 - do that we have to create a new table so
343:23 - let's head into
343:25 - schemas and Below books we'll create
343:28 - another table now since it'll be very
343:30 - similar to the tables we created so far
343:32 - I'll provide you with a code for this
343:34 - one you can just find it where you found
343:36 - all other Snippets code and then paste
343:38 - it right here you'll notice that it has
343:40 - the ID the user ID who is borrowing the
343:43 - book the book ID so we know which book
343:46 - is being borrowed the borrow date the
343:48 - due date and finally we'll later on
343:51 - mutate it with the return date so we
343:53 - know what is the status of that return
343:55 - as you know whenever we change the
343:57 - schema we have to rerun mpm run DP
344:00 - generate and then once again rerun mpm
344:02 - run DB migrate once you do that we can
344:05 - now insert this right here here by
344:07 - saying DB insert into
344:11 - borrow records and specifically we want
344:14 - to insert the following values user ID
344:19 - book ID due
344:21 - date and Status which by default will be
344:24 - set to Borrowed great and then finally
344:28 - once we create this new record we want
344:30 - to mutate the original books by saying
344:33 - await db. update
344:38 - books and we want to set the number of
344:41 - available
344:44 - copies to be equal to book zero do
344:47 - available copies minus one because
344:50 - somebody just borrowed one instance of
344:52 - that book and we want to do it
344:55 - where EQ books ID is equal to the
344:59 - current book ID we're
345:01 - on beautiful finally let's return it by
345:05 - saying success is true and and as the
345:07 - data we can do json.parse
345:11 - json. stringify and we can return that
345:14 - borrow record right within so now let's
345:16 - actually go ahead and call this borrow
345:18 - book action when we click this borrow
345:21 - button right there I'll head over into
345:23 - the book
345:24 - overview as I think that's where the
345:26 - button is yep here it is but since this
345:29 - click will now involve client side
345:31 - actions such as clicking on a click
345:33 - Handler we'll have to either turn the
345:35 - entire book a component into a client
345:37 - component or create a separate client
345:40 - side component just for the borrow
345:42 - button for better SEO and to get more
345:45 - code generated on the server itself
345:47 - we'll create a separate component for
345:48 - the button so copy this button right
345:51 - here create a new component and call it
345:53 - borrow book.
345:56 - DSX run
345:59 - rafc and paste the button code right
346:02 - here make sure all the Imports are in
346:05 - order
346:07 - and then simply import the button where
346:09 - it used to be right here I think it was
346:11 - below the description so that's going to
346:13 - be borrow
346:15 - book and if you save it here we have it
346:19 - but now we can turn it into a client
346:21 - component while keeping everything else
346:23 - server rendered and this is something
346:26 - that I dive into much more detail within
346:27 - the ultimate nextjs course so if you
346:29 - want to learn a bit more about server
346:32 - and client components server actions and
346:34 - how all of that works behind the scenes
346:36 - definitely check out that course on JS
346:38 - mastery. proo but with that in mind
346:40 - we'll have to pass some props into this
346:42 - button the first one will be just the
346:44 - book ID so we can say book ID is equal
346:47 - to book
346:48 - ID and the second one will be equal to
346:51 - the user ID which is equal to user ID
346:54 - and I think book ID actually is just the
346:56 - ID because we're already on the book
346:58 - Details page so let's get those values
347:00 - we can get them right here at the top of
347:02 - the book overview and I think we're
347:03 - already passing it through the props
347:05 - into the book overview if I'm not
347:07 - mistaken so we should be able to just
347:08 - destructure them right here that'll be
347:10 - ID as well as user ID and we need to
347:13 - also let typescript know that alongside
347:15 - the book properties will'll also be
347:17 - accepting a user ID we can do that by
347:19 - saying interface props extends book with
347:25 - the user ID of a type string so now we
347:28 - can make the type of props and it'll
347:30 - know that all of this is a book and then
347:32 - it also has a user ID great now if I
347:35 - remember correctly our users currently
347:37 - also have a status and a status can be
347:40 - pending or approved so far we don't yet
347:43 - have the functionality on the admin side
347:45 - to approve certain users but that's
347:48 - definitely something we can do later so
347:49 - for example a book clerk who is sitting
347:51 - in a library sees your ID checks whether
347:54 - you're from the University that this
347:56 - library is from and then if that is the
347:58 - case they can approve you else they can
348:00 - reject you so for now I'll manually
348:02 - approve my user right here and let's
348:04 - fetch our user data by saying const
348:07 - destructure the first user and make it
348:10 - equal to the call to the database by
348:12 - saying await DB from database
348:16 - drizzle let's make it into an async
348:20 - function and we're going to do DB do
348:25 - select. from users. where EQ users. ID
348:32 - is equal to the user
348:34 - ID and liit to
348:38 - one now we get the user if a user
348:41 - doesn't exist that means that we can't
348:42 - borrow so I'll say if no user then
348:45 - simply return null and then finally we
348:48 - can figure out can
348:51 - user borrow this is going to be a
348:53 - Boolean variable and then we can create
348:55 - a new object called borrowing
348:59 - eligibility which will be equal to an
349:00 - object that'll have an is eligible
349:03 - Boolean variable and we can check the
349:04 - status of that variable by checking
349:06 - checking if available copies is greater
349:09 - than zero and if user. status is triple
349:13 - equal to approved only in that case they
349:16 - should be eligible to borrow it and if
349:19 - not we can render a message saying
349:22 - available copies is lower than or equal
349:24 - to zero in that case we can render
349:27 - something like an error message saying
349:30 - book is not available else we can say
349:33 - something like you're not eligible to
349:35 - borrow this book per perfect and now we
349:38 - can pass that object into the borrow
349:40 - book button so I'll do it here borrowing
349:44 - eligibility is equal to borrowing
349:46 - eligibility so let's head into the
349:48 - borrow book and let's get access to all
349:50 - of these props that'll be user ID book
349:54 - ID and borrowing eligibility and that'll
349:57 - be of a type props so let's define those
350:00 - props at the top by saying interface
350:03 - props is equal to and then we can say
350:06 - that it has a user ID of a typee string
350:09 - book ID of a type string and borrowing
350:11 - eligibility which is an object with a
350:13 - Boolean and a string within here we'll
350:16 - need to get access to the router
350:18 - properties to be able to renate the user
350:20 - to another page after the borrow so we
350:22 - can say router is equal to use router
350:26 - coming from next navigation and we'll
350:28 - also need to create a new use state so
350:31 - we can handle the loading state of the
350:33 - borrow function like borrowing and and
350:36 - set borrowing at the start set defaults
350:39 - and finally we can implement the const
350:42 - handle borrow which is equal to an Asing
350:45 - function that'll be executed once we
350:47 - actually click on that button there we
350:50 - can first check if no borrowing
350:54 - eligibility do is
350:57 - eligible what we can do actually is
350:59 - maybe destructure the is eligible and
351:01 - the message from that so we can just do
351:04 - a colum and then D structure them is
351:07 - eligible and message and then we can
351:10 - simply say if not is eligible a bit
351:12 - simpler to do it that way then we can
351:14 - render a toast with a title of error a
351:19 - description of message and a variant of
351:24 - destructive and that'll look something
351:25 - like this if we pass that if statement
351:28 - that means that we're eligible so then I
351:30 - can set borrowing to true so we can
351:32 - start the loading and open up a new try
351:35 - and catch block in the catch we get an
351:37 - error and we'll render a
351:40 - toast that will say something like title
351:43 - error description an error occurred
351:45 - while borrowing the book and a variant
351:48 - of destructive we can also add a finally
351:50 - clause in this case because no matter
351:52 - whether it succeeds or fails we'll set
351:54 - borrowing back to false because we want
351:57 - to stop the loading and finally in the
352:00 - try the only thing we have to do is get
352:02 - a
352:03 - result from the server action we create
352:06 - created so we can await borrow book
352:09 - server action to which we can then pass
352:12 - an object of book ID and user ID which
352:17 - is exactly what it accepts then if a
352:20 - result is a success so if result success
352:23 - then we show a toast of title success
352:28 - description book borrowed successfully
352:30 - and we use the router. push to push to
352:34 - the profile page so my profile to see
352:37 - the book we just
352:39 - borrowed else will show a toast of title
352:44 - error the description can be something
352:47 - like an error curred while borrowing the
352:48 - book and we're not going to Route
352:50 - anywhere finally on click of this button
352:53 - we can say on click is equal to handle
352:57 - borrow book that is this action right
353:00 - here also we can set a disabled State
353:04 - and if we're currently borrowing it'll
353:06 - be disabled and we can change the text
353:08 - depending on the borrowing status so if
353:10 - we're borrowing then we'll say
353:13 - borrowing do do dot else we'll say
353:16 - something like borrow book there we go
353:20 - you can see that changed and we are
353:22 - already to test it out I'll open up my
353:24 - neon DB table right here on the left
353:27 - while I click the button and in terminal
353:29 - we get some kind of an other error so at
353:31 - least now we know that the book
353:33 - eligibility test is good and if you're
353:35 - not eligible
353:37 - you'll not be able to borrow it but wait
353:39 - I actually thought we approved ourselves
353:41 - looks like I forgot to click the enter
353:43 - or click save changes so now I approved
353:46 - myself for real let's see if I can
353:48 - borrow the book
353:50 - now I click borrow book it says
353:52 - borrowing and now we didn't get that
353:55 - flash that said you're not eligible but
353:57 - we just got an error saying an error
353:59 - occurred while borrowing the book and we
354:01 - get that same converting circular
354:03 - structure object okay so now we know
354:05 - that it's not about the eligibility but
354:08 - something else and for the time being we
354:11 - can just remove these fake dummy books
354:13 - from the profile page and if you remove
354:16 - that the only thing that'll remain on
354:17 - the profile page is the logout button so
354:20 - let's actually move that right here to
354:21 - the top right we have enough space there
354:24 - we can do that by copying these form
354:26 - right here that is within my profile
354:30 - page and then head over into the header
354:33 - in the header you can comment out the
354:36 - link L right here and instead of the
354:38 - link you can simply render that
354:41 - form you'll need to import all of the
354:44 - things from here such as sign out from o
354:46 - and so on and we'll no longer need to
354:49 - get the
354:50 - session because we don't need to show
354:52 - the username there so we can remove
354:55 - these the initials and
354:58 - more and if we do that we can turn this
355:01 - into a server component so let's
355:03 - actually remove the use client directive
355:05 - at the top
355:07 - and remove this first link pointing to
355:08 - the library we can already see a lot of
355:10 - the books on the homepage so if we do
355:13 - that we have successfully turned this
355:15 - into a server component and now the
355:18 - logout button is at the top perfect so
355:21 - now we have a nice looking homepage we
355:23 - have all of the functionalities that
355:25 - happen in the back end when a book is
355:27 - borrowed we create a borrow record and
355:31 - more now now seemingly this is a simple
355:35 - application
355:37 - at least on the front end but you know
355:40 - how much stuff is happening on the back
355:41 - and side we're handling the users we're
355:44 - handling the addition of books we're
355:46 - tracking borrow statuses borrow requests
355:48 - and more and in this one I really wanted
355:51 - to go all out and Implement all of these
355:54 - crazy
355:55 - features but doing that is taking so
355:58 - much time and I think this YouTube video
356:01 - is already a bit too
356:02 - long so I want to continue developing
356:05 - this app even further Implement a
356:08 - workflow that'll update the user to let
356:10 - them know when their book is due manage
356:13 - user approvals and book statuses from
356:14 - the admin side and more so let's keep
356:18 - this app at the current state as it is
356:20 - and let's get it deployed and then after
356:22 - that we'll plan a way to improve it even
356:25 - further the only thing we need to do to
356:27 - deploy it is push the GitHub so I'll run
356:30 - git add dogit commit
356:33 - DM we can say Implement board
356:36 - records and finish the
356:39 - app and then get push this will
356:42 - automatically push it to your
356:45 - repo and since we already deployed our
356:47 - app before if you go to deployments you
356:50 - should be able to see that your app is
356:51 - building right now so let's wait until
356:55 - it finishes and then we can go ahead and
356:57 - check it out live and
356:59 - deployed there we go the status is ready
357:02 - so let's go ahead and visit it and we
357:04 - are in but it looks looks like we had an
357:06 - issue with a check for displaying the
357:08 - book overview in the code we're looking
357:11 - if we can fetch a user in the book
357:13 - overview code we're ret turning null for
357:15 - this entire component if we can't fetch
357:17 - a user but that shouldn't really be the
357:20 - case if we can fetch the user then we
357:23 - simply cannot figure out the borrowing
357:26 - eligibility so hiding the borrowing
357:28 - button makes more sense than hiding the
357:30 - whole thing
357:31 - right so right here I'll say if no user
357:37 - then simply don't show the book or in
357:40 - other words if a user exists then show
357:43 - the borrow book and we can remove this
357:46 - check right here so let's go ahead and
357:48 - push it one more time by running get add
357:51 - dot get commit Dash fix if check and get
357:57 - push and very soon we'll be able to
358:00 - recheck it it build successfully so I'll
358:03 - reload and there we go the book is back
358:06 - just to check out the login
358:08 - functionality one more time you can try
358:10 - the sign up but in this case I'll try
358:12 - just the sign in success we're logged in
358:15 - and this time we have the borrow book as
358:17 - well and if you click
358:20 - it success book borrowed successfully oh
358:23 - but we still have that old redirect to
358:25 - the profile
358:26 - page so if you just bear with me and you
358:29 - want to do one more quick push you can
358:32 - head over to where we actually borrow
358:33 - the book so that is the borrow book
358:35 - button
358:37 - and the only thing we have to do is just
358:39 - push it to the homepage once we borrow
358:41 - instead of pushing to the profile so if
358:44 - you fix this you can do another G add.
358:48 - get commit DM fix redirect and get push
358:54 - this is typically how it is when you're
358:55 - pushing changes and you want to see them
358:56 - live in production so with that in mind
358:59 - the app is done and there you have it
359:03 - you just built a production grade
359:05 - Library system with features that most
359:08 - tutorials wouldn't even dare to touch
359:10 - rate limiting DDOS protection automated
359:14 - workflows with emails and complex
359:16 - database queries you've learned to
359:18 - implement it all but here's the thing
359:22 - everything you build today it's just the
359:25 - beginning remember those Advanced
359:27 - features I showed you in the demo like
359:29 - the analytics dashboard and the admin
359:32 - panel with different
359:33 - tables and even automated workflow CL
359:36 - with performance optimizations yeah
359:38 - those aren't just for the show they're
359:40 - complete systems that showcase the
359:42 - functionalities of real modern web
359:45 - applications now you could absolutely
359:47 - take what you learned so far and build
359:49 - those features yourself that's the
359:51 - beauty of understanding The Core
359:52 - Concepts you have the foundation to
359:55 - explore and create and heck you even
359:58 - have the complete codebase with all of
360:00 - those changes already implemented on
360:02 - GitHub so you can check it out and give
360:04 - it a spin but if you want to skip trial
360:06 - and error and dive straight into the
360:09 - advanced patterns I prepared a second
360:12 - part of this course the pro version
360:15 - where we'll build the entire platform
360:17 - together and even more features that
360:19 - would make senior developers not in
360:21 - approval the platform includes deep
360:24 - dives into advanced react patterns
360:27 - step-by-step commits so you never get
360:29 - lost real world challenges to test your
360:32 - skills progress tracking to keep you
360:34 - moving forward and community of
360:36 - developers to build amazing things
360:38 - together and as I said at the start
360:41 - there's a link to join the pre-launch of
360:43 - the course down in the description the
360:45 - first 100 developers who join will get a
360:48 - lifetime access completely for
360:50 - free and even if you miss it once I
360:53 - actually release it I'll reach out to
360:55 - you via email with a special pre-launch
360:57 - discount the link is in the description
361:00 - but no pressure though you came to the
361:02 - end of this video and that's amazing the
361:05 - proon content is there if you want to
361:07 - take your skills to the senior
361:09 - level once again thank you so much for
361:11 - coding along and I'll see you in the
361:14 - next one or maybe inside JS mastery.
361:17 - proo keep building things that matter
361:19 - and have a wonderful day